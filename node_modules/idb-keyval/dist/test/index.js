var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

var mocha$2 = {exports: {}};

var mocha$1 = mocha$2.exports;

var hasRequiredMocha;

function requireMocha () {
	if (hasRequiredMocha) return mocha$2.exports;
	hasRequiredMocha = 1;
	(function (module, exports) {
		// mocha@11.2.2 in javascript ES2018
		(function (global, factory) {
		  module.exports = factory() ;
		})(mocha$1, (function () {
		  var global$2 = (typeof commonjsGlobal !== "undefined" ? commonjsGlobal :
		    typeof self !== "undefined" ? self :
		    typeof window !== "undefined" ? window : {});

		  var global$1 = (typeof global$2 !== "undefined" ? global$2 :
		              typeof self !== "undefined" ? self :
		              typeof window !== "undefined" ? window : {});

		  // shim for using process in browser
		  // based off https://github.com/defunctzombie/node-process/blob/master/browser.js

		  function defaultSetTimout$1() {
		      throw new Error('setTimeout has not been defined');
		  }
		  function defaultClearTimeout$1 () {
		      throw new Error('clearTimeout has not been defined');
		  }
		  var cachedSetTimeout$1 = defaultSetTimout$1;
		  var cachedClearTimeout$1 = defaultClearTimeout$1;
		  if (typeof global$1.setTimeout === 'function') {
		      cachedSetTimeout$1 = setTimeout;
		  }
		  if (typeof global$1.clearTimeout === 'function') {
		      cachedClearTimeout$1 = clearTimeout;
		  }

		  function runTimeout$1(fun) {
		      if (cachedSetTimeout$1 === setTimeout) {
		          //normal enviroments in sane situations
		          return setTimeout(fun, 0);
		      }
		      // if setTimeout wasn't available but was latter defined
		      if ((cachedSetTimeout$1 === defaultSetTimout$1 || !cachedSetTimeout$1) && setTimeout) {
		          cachedSetTimeout$1 = setTimeout;
		          return setTimeout(fun, 0);
		      }
		      try {
		          // when when somebody has screwed with setTimeout but no I.E. maddness
		          return cachedSetTimeout$1(fun, 0);
		      } catch(e){
		          try {
		              // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
		              return cachedSetTimeout$1.call(null, fun, 0);
		          } catch(e){
		              // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
		              return cachedSetTimeout$1.call(this, fun, 0);
		          }
		      }


		  }
		  function runClearTimeout$1(marker) {
		      if (cachedClearTimeout$1 === clearTimeout) {
		          //normal enviroments in sane situations
		          return clearTimeout(marker);
		      }
		      // if clearTimeout wasn't available but was latter defined
		      if ((cachedClearTimeout$1 === defaultClearTimeout$1 || !cachedClearTimeout$1) && clearTimeout) {
		          cachedClearTimeout$1 = clearTimeout;
		          return clearTimeout(marker);
		      }
		      try {
		          // when when somebody has screwed with setTimeout but no I.E. maddness
		          return cachedClearTimeout$1(marker);
		      } catch (e){
		          try {
		              // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
		              return cachedClearTimeout$1.call(null, marker);
		          } catch (e){
		              // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
		              // Some versions of I.E. have different rules for clearTimeout vs setTimeout
		              return cachedClearTimeout$1.call(this, marker);
		          }
		      }



		  }
		  var queue$1 = [];
		  var draining$1 = false;
		  var currentQueue$1;
		  var queueIndex$1 = -1;

		  function cleanUpNextTick$1() {
		      if (!draining$1 || !currentQueue$1) {
		          return;
		      }
		      draining$1 = false;
		      if (currentQueue$1.length) {
		          queue$1 = currentQueue$1.concat(queue$1);
		      } else {
		          queueIndex$1 = -1;
		      }
		      if (queue$1.length) {
		          drainQueue$1();
		      }
		  }

		  function drainQueue$1() {
		      if (draining$1) {
		          return;
		      }
		      var timeout = runTimeout$1(cleanUpNextTick$1);
		      draining$1 = true;

		      var len = queue$1.length;
		      while(len) {
		          currentQueue$1 = queue$1;
		          queue$1 = [];
		          while (++queueIndex$1 < len) {
		              if (currentQueue$1) {
		                  currentQueue$1[queueIndex$1].run();
		              }
		          }
		          queueIndex$1 = -1;
		          len = queue$1.length;
		      }
		      currentQueue$1 = null;
		      draining$1 = false;
		      runClearTimeout$1(timeout);
		  }
		  function nextTick$1(fun) {
		      var args = new Array(arguments.length - 1);
		      if (arguments.length > 1) {
		          for (var i = 1; i < arguments.length; i++) {
		              args[i - 1] = arguments[i];
		          }
		      }
		      queue$1.push(new Item$1(fun, args));
		      if (queue$1.length === 1 && !draining$1) {
		          runTimeout$1(drainQueue$1);
		      }
		  }
		  // v8 likes predictible objects
		  function Item$1(fun, array) {
		      this.fun = fun;
		      this.array = array;
		  }
		  Item$1.prototype.run = function () {
		      this.fun.apply(null, this.array);
		  };
		  var title$1 = 'browser';
		  var platform$1 = 'browser';
		  var browser$4 = true;
		  var env$1 = {};
		  var argv$1 = [];
		  var version$2 = ''; // empty string to avoid regexp issues
		  var versions$1 = {};
		  var release$1 = {};
		  var config$1 = {};

		  function noop$1() {}

		  var on$1 = noop$1;
		  var addListener$1 = noop$1;
		  var once$1 = noop$1;
		  var off$1 = noop$1;
		  var removeListener$1 = noop$1;
		  var removeAllListeners$1 = noop$1;
		  var emit$1 = noop$1;

		  function binding$1(name) {
		      throw new Error('process.binding is not supported');
		  }

		  function cwd$1 () { return '/' }
		  function chdir$1 (dir) {
		      throw new Error('process.chdir is not supported');
		  }function umask$1() { return 0; }

		  // from https://github.com/kumavis/browser-process-hrtime/blob/master/index.js
		  var performance$1 = global$1.performance || {};
		  var performanceNow$1 =
		    performance$1.now        ||
		    performance$1.mozNow     ||
		    performance$1.msNow      ||
		    performance$1.oNow       ||
		    performance$1.webkitNow  ||
		    function(){ return (new Date()).getTime() };

		  // generate timestamp or delta
		  // see http://nodejs.org/api/process.html#process_process_hrtime
		  function hrtime$1(previousTimestamp){
		    var clocktime = performanceNow$1.call(performance$1)*1e-3;
		    var seconds = Math.floor(clocktime);
		    var nanoseconds = Math.floor((clocktime%1)*1e9);
		    if (previousTimestamp) {
		      seconds = seconds - previousTimestamp[0];
		      nanoseconds = nanoseconds - previousTimestamp[1];
		      if (nanoseconds<0) {
		        seconds--;
		        nanoseconds += 1e9;
		      }
		    }
		    return [seconds,nanoseconds]
		  }

		  var startTime$1 = new Date();
		  function uptime$1() {
		    var currentTime = new Date();
		    var dif = currentTime - startTime$1;
		    return dif / 1000;
		  }

		  var process = {
		    nextTick: nextTick$1,
		    title: title$1,
		    browser: browser$4,
		    env: env$1,
		    argv: argv$1,
		    version: version$2,
		    versions: versions$1,
		    on: on$1,
		    addListener: addListener$1,
		    once: once$1,
		    off: off$1,
		    removeListener: removeListener$1,
		    removeAllListeners: removeAllListeners$1,
		    emit: emit$1,
		    binding: binding$1,
		    cwd: cwd$1,
		    chdir: chdir$1,
		    umask: umask$1,
		    hrtime: hrtime$1,
		    platform: platform$1,
		    release: release$1,
		    config: config$1,
		    uptime: uptime$1
		  };

		  var commonjsGlobal$1 = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof commonjsGlobal !== 'undefined' ? commonjsGlobal : typeof self !== 'undefined' ? self : {};

		  function getAugmentedNamespace(n) {
		  	if (n.__esModule) return n;
		  	var a = Object.defineProperty({}, '__esModule', {value: true});
		  	Object.keys(n).forEach(function (k) {
		  		var d = Object.getOwnPropertyDescriptor(n, k);
		  		Object.defineProperty(a, k, d.get ? d : {
		  			enumerable: true,
		  			get: function () {
		  				return n[k];
		  			}
		  		});
		  	});
		  	return a;
		  }

		  function commonjsRequire (path) {
		  	throw new Error('Could not dynamically require "' + path + '". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.');
		  }

		  var domain;

		  // This constructor is used to store event handlers. Instantiating this is
		  // faster than explicitly calling `Object.create(null)` to get a "clean" empty
		  // object (tested with v8 v4.9).
		  function EventHandlers() {}
		  EventHandlers.prototype = Object.create(null);

		  function EventEmitter$2() {
		    EventEmitter$2.init.call(this);
		  }

		  // nodejs oddity
		  // require('events') === require('events').EventEmitter
		  EventEmitter$2.EventEmitter = EventEmitter$2;

		  EventEmitter$2.usingDomains = false;

		  EventEmitter$2.prototype.domain = undefined;
		  EventEmitter$2.prototype._events = undefined;
		  EventEmitter$2.prototype._maxListeners = undefined;

		  // By default EventEmitters will print a warning if more than 10 listeners are
		  // added to it. This is a useful default which helps finding memory leaks.
		  EventEmitter$2.defaultMaxListeners = 10;

		  EventEmitter$2.init = function() {
		    this.domain = null;
		    if (EventEmitter$2.usingDomains) {
		      // if there is an active domain, then attach to it.
		      if (domain.active ) ;
		    }

		    if (!this._events || this._events === Object.getPrototypeOf(this)._events) {
		      this._events = new EventHandlers();
		      this._eventsCount = 0;
		    }

		    this._maxListeners = this._maxListeners || undefined;
		  };

		  // Obviously not all Emitters should be limited to 10. This function allows
		  // that to be increased. Set to zero for unlimited.
		  EventEmitter$2.prototype.setMaxListeners = function setMaxListeners(n) {
		    if (typeof n !== 'number' || n < 0 || isNaN(n))
		      throw new TypeError('"n" argument must be a positive number');
		    this._maxListeners = n;
		    return this;
		  };

		  function $getMaxListeners(that) {
		    if (that._maxListeners === undefined)
		      return EventEmitter$2.defaultMaxListeners;
		    return that._maxListeners;
		  }

		  EventEmitter$2.prototype.getMaxListeners = function getMaxListeners() {
		    return $getMaxListeners(this);
		  };

		  // These standalone emit* functions are used to optimize calling of event
		  // handlers for fast cases because emit() itself often has a variable number of
		  // arguments and can be deoptimized because of that. These functions always have
		  // the same number of arguments and thus do not get deoptimized, so the code
		  // inside them can execute faster.
		  function emitNone(handler, isFn, self) {
		    if (isFn)
		      handler.call(self);
		    else {
		      var len = handler.length;
		      var listeners = arrayClone(handler, len);
		      for (var i = 0; i < len; ++i)
		        listeners[i].call(self);
		    }
		  }
		  function emitOne(handler, isFn, self, arg1) {
		    if (isFn)
		      handler.call(self, arg1);
		    else {
		      var len = handler.length;
		      var listeners = arrayClone(handler, len);
		      for (var i = 0; i < len; ++i)
		        listeners[i].call(self, arg1);
		    }
		  }
		  function emitTwo(handler, isFn, self, arg1, arg2) {
		    if (isFn)
		      handler.call(self, arg1, arg2);
		    else {
		      var len = handler.length;
		      var listeners = arrayClone(handler, len);
		      for (var i = 0; i < len; ++i)
		        listeners[i].call(self, arg1, arg2);
		    }
		  }
		  function emitThree(handler, isFn, self, arg1, arg2, arg3) {
		    if (isFn)
		      handler.call(self, arg1, arg2, arg3);
		    else {
		      var len = handler.length;
		      var listeners = arrayClone(handler, len);
		      for (var i = 0; i < len; ++i)
		        listeners[i].call(self, arg1, arg2, arg3);
		    }
		  }

		  function emitMany(handler, isFn, self, args) {
		    if (isFn)
		      handler.apply(self, args);
		    else {
		      var len = handler.length;
		      var listeners = arrayClone(handler, len);
		      for (var i = 0; i < len; ++i)
		        listeners[i].apply(self, args);
		    }
		  }

		  EventEmitter$2.prototype.emit = function emit(type) {
		    var er, handler, len, args, i, events, domain;
		    var doError = (type === 'error');

		    events = this._events;
		    if (events)
		      doError = (doError && events.error == null);
		    else if (!doError)
		      return false;

		    domain = this.domain;

		    // If there is no 'error' event listener then throw.
		    if (doError) {
		      er = arguments[1];
		      if (domain) {
		        if (!er)
		          er = new Error('Uncaught, unspecified "error" event');
		        er.domainEmitter = this;
		        er.domain = domain;
		        er.domainThrown = false;
		        domain.emit('error', er);
		      } else if (er instanceof Error) {
		        throw er; // Unhandled 'error' event
		      } else {
		        // At least give some kind of context to the user
		        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
		        err.context = er;
		        throw err;
		      }
		      return false;
		    }

		    handler = events[type];

		    if (!handler)
		      return false;

		    var isFn = typeof handler === 'function';
		    len = arguments.length;
		    switch (len) {
		      // fast cases
		      case 1:
		        emitNone(handler, isFn, this);
		        break;
		      case 2:
		        emitOne(handler, isFn, this, arguments[1]);
		        break;
		      case 3:
		        emitTwo(handler, isFn, this, arguments[1], arguments[2]);
		        break;
		      case 4:
		        emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);
		        break;
		      // slower
		      default:
		        args = new Array(len - 1);
		        for (i = 1; i < len; i++)
		          args[i - 1] = arguments[i];
		        emitMany(handler, isFn, this, args);
		    }

		    return true;
		  };

		  function _addListener(target, type, listener, prepend) {
		    var m;
		    var events;
		    var existing;

		    if (typeof listener !== 'function')
		      throw new TypeError('"listener" argument must be a function');

		    events = target._events;
		    if (!events) {
		      events = target._events = new EventHandlers();
		      target._eventsCount = 0;
		    } else {
		      // To avoid recursion in the case that type === "newListener"! Before
		      // adding it to the listeners, first emit "newListener".
		      if (events.newListener) {
		        target.emit('newListener', type,
		                    listener.listener ? listener.listener : listener);

		        // Re-assign `events` because a newListener handler could have caused the
		        // this._events to be assigned to a new object
		        events = target._events;
		      }
		      existing = events[type];
		    }

		    if (!existing) {
		      // Optimize the case of one listener. Don't need the extra array object.
		      existing = events[type] = listener;
		      ++target._eventsCount;
		    } else {
		      if (typeof existing === 'function') {
		        // Adding the second element, need to change to array.
		        existing = events[type] = prepend ? [listener, existing] :
		                                            [existing, listener];
		      } else {
		        // If we've already got an array, just append.
		        if (prepend) {
		          existing.unshift(listener);
		        } else {
		          existing.push(listener);
		        }
		      }

		      // Check for listener leak
		      if (!existing.warned) {
		        m = $getMaxListeners(target);
		        if (m && m > 0 && existing.length > m) {
		          existing.warned = true;
		          var w = new Error('Possible EventEmitter memory leak detected. ' +
		                              existing.length + ' ' + type + ' listeners added. ' +
		                              'Use emitter.setMaxListeners() to increase limit');
		          w.name = 'MaxListenersExceededWarning';
		          w.emitter = target;
		          w.type = type;
		          w.count = existing.length;
		          emitWarning$1(w);
		        }
		      }
		    }

		    return target;
		  }
		  function emitWarning$1(e) {
		    typeof console.warn === 'function' ? console.warn(e) : console.log(e);
		  }
		  EventEmitter$2.prototype.addListener = function addListener(type, listener) {
		    return _addListener(this, type, listener, false);
		  };

		  EventEmitter$2.prototype.on = EventEmitter$2.prototype.addListener;

		  EventEmitter$2.prototype.prependListener =
		      function prependListener(type, listener) {
		        return _addListener(this, type, listener, true);
		      };

		  function _onceWrap(target, type, listener) {
		    var fired = false;
		    function g() {
		      target.removeListener(type, g);
		      if (!fired) {
		        fired = true;
		        listener.apply(target, arguments);
		      }
		    }
		    g.listener = listener;
		    return g;
		  }

		  EventEmitter$2.prototype.once = function once(type, listener) {
		    if (typeof listener !== 'function')
		      throw new TypeError('"listener" argument must be a function');
		    this.on(type, _onceWrap(this, type, listener));
		    return this;
		  };

		  EventEmitter$2.prototype.prependOnceListener =
		      function prependOnceListener(type, listener) {
		        if (typeof listener !== 'function')
		          throw new TypeError('"listener" argument must be a function');
		        this.prependListener(type, _onceWrap(this, type, listener));
		        return this;
		      };

		  // emits a 'removeListener' event iff the listener was removed
		  EventEmitter$2.prototype.removeListener =
		      function removeListener(type, listener) {
		        var list, events, position, i, originalListener;

		        if (typeof listener !== 'function')
		          throw new TypeError('"listener" argument must be a function');

		        events = this._events;
		        if (!events)
		          return this;

		        list = events[type];
		        if (!list)
		          return this;

		        if (list === listener || (list.listener && list.listener === listener)) {
		          if (--this._eventsCount === 0)
		            this._events = new EventHandlers();
		          else {
		            delete events[type];
		            if (events.removeListener)
		              this.emit('removeListener', type, list.listener || listener);
		          }
		        } else if (typeof list !== 'function') {
		          position = -1;

		          for (i = list.length; i-- > 0;) {
		            if (list[i] === listener ||
		                (list[i].listener && list[i].listener === listener)) {
		              originalListener = list[i].listener;
		              position = i;
		              break;
		            }
		          }

		          if (position < 0)
		            return this;

		          if (list.length === 1) {
		            list[0] = undefined;
		            if (--this._eventsCount === 0) {
		              this._events = new EventHandlers();
		              return this;
		            } else {
		              delete events[type];
		            }
		          } else {
		            spliceOne(list, position);
		          }

		          if (events.removeListener)
		            this.emit('removeListener', type, originalListener || listener);
		        }

		        return this;
		      };
		      
		  // Alias for removeListener added in NodeJS 10.0
		  // https://nodejs.org/api/events.html#events_emitter_off_eventname_listener
		  EventEmitter$2.prototype.off = function(type, listener){
		      return this.removeListener(type, listener);
		  };

		  EventEmitter$2.prototype.removeAllListeners =
		      function removeAllListeners(type) {
		        var listeners, events;

		        events = this._events;
		        if (!events)
		          return this;

		        // not listening for removeListener, no need to emit
		        if (!events.removeListener) {
		          if (arguments.length === 0) {
		            this._events = new EventHandlers();
		            this._eventsCount = 0;
		          } else if (events[type]) {
		            if (--this._eventsCount === 0)
		              this._events = new EventHandlers();
		            else
		              delete events[type];
		          }
		          return this;
		        }

		        // emit removeListener for all listeners on all events
		        if (arguments.length === 0) {
		          var keys = Object.keys(events);
		          for (var i = 0, key; i < keys.length; ++i) {
		            key = keys[i];
		            if (key === 'removeListener') continue;
		            this.removeAllListeners(key);
		          }
		          this.removeAllListeners('removeListener');
		          this._events = new EventHandlers();
		          this._eventsCount = 0;
		          return this;
		        }

		        listeners = events[type];

		        if (typeof listeners === 'function') {
		          this.removeListener(type, listeners);
		        } else if (listeners) {
		          // LIFO order
		          do {
		            this.removeListener(type, listeners[listeners.length - 1]);
		          } while (listeners[0]);
		        }

		        return this;
		      };

		  EventEmitter$2.prototype.listeners = function listeners(type) {
		    var evlistener;
		    var ret;
		    var events = this._events;

		    if (!events)
		      ret = [];
		    else {
		      evlistener = events[type];
		      if (!evlistener)
		        ret = [];
		      else if (typeof evlistener === 'function')
		        ret = [evlistener.listener || evlistener];
		      else
		        ret = unwrapListeners(evlistener);
		    }

		    return ret;
		  };

		  EventEmitter$2.listenerCount = function(emitter, type) {
		    if (typeof emitter.listenerCount === 'function') {
		      return emitter.listenerCount(type);
		    } else {
		      return listenerCount$1.call(emitter, type);
		    }
		  };

		  EventEmitter$2.prototype.listenerCount = listenerCount$1;
		  function listenerCount$1(type) {
		    var events = this._events;

		    if (events) {
		      var evlistener = events[type];

		      if (typeof evlistener === 'function') {
		        return 1;
		      } else if (evlistener) {
		        return evlistener.length;
		      }
		    }

		    return 0;
		  }

		  EventEmitter$2.prototype.eventNames = function eventNames() {
		    return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];
		  };

		  // About 1.5x faster than the two-arg version of Array#splice().
		  function spliceOne(list, index) {
		    for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1)
		      list[i] = list[k];
		    list.pop();
		  }

		  function arrayClone(arr, i) {
		    var copy = new Array(i);
		    while (i--)
		      copy[i] = arr[i];
		    return copy;
		  }

		  function unwrapListeners(arr) {
		    var ret = new Array(arr.length);
		    for (var i = 0; i < ret.length; ++i) {
		      ret[i] = arr[i].listener || arr[i];
		    }
		    return ret;
		  }

		  var _polyfillNode_events = /*#__PURE__*/Object.freeze({
		    __proto__: null,
		    'default': EventEmitter$2,
		    EventEmitter: EventEmitter$2
		  });

		  var lookup$1 = [];
		  var revLookup$1 = [];
		  var Arr$1 = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
		  var inited$1 = false;
		  function init$1 () {
		    inited$1 = true;
		    var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
		    for (var i = 0, len = code.length; i < len; ++i) {
		      lookup$1[i] = code[i];
		      revLookup$1[code.charCodeAt(i)] = i;
		    }

		    revLookup$1['-'.charCodeAt(0)] = 62;
		    revLookup$1['_'.charCodeAt(0)] = 63;
		  }

		  function toByteArray$1 (b64) {
		    if (!inited$1) {
		      init$1();
		    }
		    var i, j, l, tmp, placeHolders, arr;
		    var len = b64.length;

		    if (len % 4 > 0) {
		      throw new Error('Invalid string. Length must be a multiple of 4')
		    }

		    // the number of equal signs (place holders)
		    // if there are two placeholders, than the two characters before it
		    // represent one byte
		    // if there is only one, then the three characters before it represent 2 bytes
		    // this is just a cheap hack to not do indexOf twice
		    placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0;

		    // base64 is 4/3 + up to two characters of the original data
		    arr = new Arr$1(len * 3 / 4 - placeHolders);

		    // if there are placeholders, only get up to the last complete 4 chars
		    l = placeHolders > 0 ? len - 4 : len;

		    var L = 0;

		    for (i = 0, j = 0; i < l; i += 4, j += 3) {
		      tmp = (revLookup$1[b64.charCodeAt(i)] << 18) | (revLookup$1[b64.charCodeAt(i + 1)] << 12) | (revLookup$1[b64.charCodeAt(i + 2)] << 6) | revLookup$1[b64.charCodeAt(i + 3)];
		      arr[L++] = (tmp >> 16) & 0xFF;
		      arr[L++] = (tmp >> 8) & 0xFF;
		      arr[L++] = tmp & 0xFF;
		    }

		    if (placeHolders === 2) {
		      tmp = (revLookup$1[b64.charCodeAt(i)] << 2) | (revLookup$1[b64.charCodeAt(i + 1)] >> 4);
		      arr[L++] = tmp & 0xFF;
		    } else if (placeHolders === 1) {
		      tmp = (revLookup$1[b64.charCodeAt(i)] << 10) | (revLookup$1[b64.charCodeAt(i + 1)] << 4) | (revLookup$1[b64.charCodeAt(i + 2)] >> 2);
		      arr[L++] = (tmp >> 8) & 0xFF;
		      arr[L++] = tmp & 0xFF;
		    }

		    return arr
		  }

		  function tripletToBase64$1 (num) {
		    return lookup$1[num >> 18 & 0x3F] + lookup$1[num >> 12 & 0x3F] + lookup$1[num >> 6 & 0x3F] + lookup$1[num & 0x3F]
		  }

		  function encodeChunk$1 (uint8, start, end) {
		    var tmp;
		    var output = [];
		    for (var i = start; i < end; i += 3) {
		      tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2]);
		      output.push(tripletToBase64$1(tmp));
		    }
		    return output.join('')
		  }

		  function fromByteArray$1 (uint8) {
		    if (!inited$1) {
		      init$1();
		    }
		    var tmp;
		    var len = uint8.length;
		    var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
		    var output = '';
		    var parts = [];
		    var maxChunkLength = 16383; // must be multiple of 3

		    // go through the array every three bytes, we'll deal with trailing stuff later
		    for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
		      parts.push(encodeChunk$1(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)));
		    }

		    // pad the end with zeros, but make sure to not forget the extra bytes
		    if (extraBytes === 1) {
		      tmp = uint8[len - 1];
		      output += lookup$1[tmp >> 2];
		      output += lookup$1[(tmp << 4) & 0x3F];
		      output += '==';
		    } else if (extraBytes === 2) {
		      tmp = (uint8[len - 2] << 8) + (uint8[len - 1]);
		      output += lookup$1[tmp >> 10];
		      output += lookup$1[(tmp >> 4) & 0x3F];
		      output += lookup$1[(tmp << 2) & 0x3F];
		      output += '=';
		    }

		    parts.push(output);

		    return parts.join('')
		  }

		  function read$1 (buffer, offset, isLE, mLen, nBytes) {
		    var e, m;
		    var eLen = nBytes * 8 - mLen - 1;
		    var eMax = (1 << eLen) - 1;
		    var eBias = eMax >> 1;
		    var nBits = -7;
		    var i = isLE ? (nBytes - 1) : 0;
		    var d = isLE ? -1 : 1;
		    var s = buffer[offset + i];

		    i += d;

		    e = s & ((1 << (-nBits)) - 1);
		    s >>= (-nBits);
		    nBits += eLen;
		    for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

		    m = e & ((1 << (-nBits)) - 1);
		    e >>= (-nBits);
		    nBits += mLen;
		    for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

		    if (e === 0) {
		      e = 1 - eBias;
		    } else if (e === eMax) {
		      return m ? NaN : ((s ? -1 : 1) * Infinity)
		    } else {
		      m = m + Math.pow(2, mLen);
		      e = e - eBias;
		    }
		    return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
		  }

		  function write$1 (buffer, value, offset, isLE, mLen, nBytes) {
		    var e, m, c;
		    var eLen = nBytes * 8 - mLen - 1;
		    var eMax = (1 << eLen) - 1;
		    var eBias = eMax >> 1;
		    var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0);
		    var i = isLE ? 0 : (nBytes - 1);
		    var d = isLE ? 1 : -1;
		    var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

		    value = Math.abs(value);

		    if (isNaN(value) || value === Infinity) {
		      m = isNaN(value) ? 1 : 0;
		      e = eMax;
		    } else {
		      e = Math.floor(Math.log(value) / Math.LN2);
		      if (value * (c = Math.pow(2, -e)) < 1) {
		        e--;
		        c *= 2;
		      }
		      if (e + eBias >= 1) {
		        value += rt / c;
		      } else {
		        value += rt * Math.pow(2, 1 - eBias);
		      }
		      if (value * c >= 2) {
		        e++;
		        c /= 2;
		      }

		      if (e + eBias >= eMax) {
		        m = 0;
		        e = eMax;
		      } else if (e + eBias >= 1) {
		        m = (value * c - 1) * Math.pow(2, mLen);
		        e = e + eBias;
		      } else {
		        m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
		        e = 0;
		      }
		    }

		    for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

		    e = (e << mLen) | m;
		    eLen += mLen;
		    for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

		    buffer[offset + i - d] |= s * 128;
		  }

		  var toString$2 = {}.toString;

		  var isArray$2 = Array.isArray || function (arr) {
		    return toString$2.call(arr) == '[object Array]';
		  };

		  /*!
		   * The buffer module from node.js, for the browser.
		   *
		   * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
		   * @license  MIT
		   */

		  var INSPECT_MAX_BYTES$1 = 50;

		  /**
		   * If `Buffer.TYPED_ARRAY_SUPPORT`:
		   *   === true    Use Uint8Array implementation (fastest)
		   *   === false   Use Object implementation (most compatible, even IE6)
		   *
		   * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
		   * Opera 11.6+, iOS 4.2+.
		   *
		   * Due to various browser bugs, sometimes the Object implementation will be used even
		   * when the browser supports typed arrays.
		   *
		   * Note:
		   *
		   *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
		   *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
		   *
		   *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
		   *
		   *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
		   *     incorrect length in some situations.

		   * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
		   * get the Object implementation, which is slower but behaves correctly.
		   */
		  Buffer$1.TYPED_ARRAY_SUPPORT = global$2.TYPED_ARRAY_SUPPORT !== undefined
		    ? global$2.TYPED_ARRAY_SUPPORT
		    : true;

		  /*
		   * Export kMaxLength after typed array support is determined.
		   */
		  kMaxLength$1();

		  function kMaxLength$1 () {
		    return Buffer$1.TYPED_ARRAY_SUPPORT
		      ? 0x7fffffff
		      : 0x3fffffff
		  }

		  function createBuffer$1 (that, length) {
		    if (kMaxLength$1() < length) {
		      throw new RangeError('Invalid typed array length')
		    }
		    if (Buffer$1.TYPED_ARRAY_SUPPORT) {
		      // Return an augmented `Uint8Array` instance, for best performance
		      that = new Uint8Array(length);
		      that.__proto__ = Buffer$1.prototype;
		    } else {
		      // Fallback: Return an object instance of the Buffer class
		      if (that === null) {
		        that = new Buffer$1(length);
		      }
		      that.length = length;
		    }

		    return that
		  }

		  /**
		   * The Buffer constructor returns instances of `Uint8Array` that have their
		   * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
		   * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
		   * and the `Uint8Array` methods. Square bracket notation works as expected -- it
		   * returns a single octet.
		   *
		   * The `Uint8Array` prototype remains unmodified.
		   */

		  function Buffer$1 (arg, encodingOrOffset, length) {
		    if (!Buffer$1.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer$1)) {
		      return new Buffer$1(arg, encodingOrOffset, length)
		    }

		    // Common case.
		    if (typeof arg === 'number') {
		      if (typeof encodingOrOffset === 'string') {
		        throw new Error(
		          'If encoding is specified then the first argument must be a string'
		        )
		      }
		      return allocUnsafe$1(this, arg)
		    }
		    return from$1(this, arg, encodingOrOffset, length)
		  }

		  Buffer$1.poolSize = 8192; // not used by this implementation

		  // TODO: Legacy, not needed anymore. Remove in next major version.
		  Buffer$1._augment = function (arr) {
		    arr.__proto__ = Buffer$1.prototype;
		    return arr
		  };

		  function from$1 (that, value, encodingOrOffset, length) {
		    if (typeof value === 'number') {
		      throw new TypeError('"value" argument must not be a number')
		    }

		    if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
		      return fromArrayBuffer$1(that, value, encodingOrOffset, length)
		    }

		    if (typeof value === 'string') {
		      return fromString$1(that, value, encodingOrOffset)
		    }

		    return fromObject$1(that, value)
		  }

		  /**
		   * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
		   * if value is a number.
		   * Buffer.from(str[, encoding])
		   * Buffer.from(array)
		   * Buffer.from(buffer)
		   * Buffer.from(arrayBuffer[, byteOffset[, length]])
		   **/
		  Buffer$1.from = function (value, encodingOrOffset, length) {
		    return from$1(null, value, encodingOrOffset, length)
		  };

		  if (Buffer$1.TYPED_ARRAY_SUPPORT) {
		    Buffer$1.prototype.__proto__ = Uint8Array.prototype;
		    Buffer$1.__proto__ = Uint8Array;
		  }

		  function assertSize$1 (size) {
		    if (typeof size !== 'number') {
		      throw new TypeError('"size" argument must be a number')
		    } else if (size < 0) {
		      throw new RangeError('"size" argument must not be negative')
		    }
		  }

		  function alloc$1 (that, size, fill, encoding) {
		    assertSize$1(size);
		    if (size <= 0) {
		      return createBuffer$1(that, size)
		    }
		    if (fill !== undefined) {
		      // Only pay attention to encoding if it's a string. This
		      // prevents accidentally sending in a number that would
		      // be interpretted as a start offset.
		      return typeof encoding === 'string'
		        ? createBuffer$1(that, size).fill(fill, encoding)
		        : createBuffer$1(that, size).fill(fill)
		    }
		    return createBuffer$1(that, size)
		  }

		  /**
		   * Creates a new filled Buffer instance.
		   * alloc(size[, fill[, encoding]])
		   **/
		  Buffer$1.alloc = function (size, fill, encoding) {
		    return alloc$1(null, size, fill, encoding)
		  };

		  function allocUnsafe$1 (that, size) {
		    assertSize$1(size);
		    that = createBuffer$1(that, size < 0 ? 0 : checked$1(size) | 0);
		    if (!Buffer$1.TYPED_ARRAY_SUPPORT) {
		      for (var i = 0; i < size; ++i) {
		        that[i] = 0;
		      }
		    }
		    return that
		  }

		  /**
		   * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
		   * */
		  Buffer$1.allocUnsafe = function (size) {
		    return allocUnsafe$1(null, size)
		  };
		  /**
		   * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
		   */
		  Buffer$1.allocUnsafeSlow = function (size) {
		    return allocUnsafe$1(null, size)
		  };

		  function fromString$1 (that, string, encoding) {
		    if (typeof encoding !== 'string' || encoding === '') {
		      encoding = 'utf8';
		    }

		    if (!Buffer$1.isEncoding(encoding)) {
		      throw new TypeError('"encoding" must be a valid string encoding')
		    }

		    var length = byteLength$1(string, encoding) | 0;
		    that = createBuffer$1(that, length);

		    var actual = that.write(string, encoding);

		    if (actual !== length) {
		      // Writing a hex string, for example, that contains invalid characters will
		      // cause everything after the first invalid character to be ignored. (e.g.
		      // 'abxxcd' will be treated as 'ab')
		      that = that.slice(0, actual);
		    }

		    return that
		  }

		  function fromArrayLike$1 (that, array) {
		    var length = array.length < 0 ? 0 : checked$1(array.length) | 0;
		    that = createBuffer$1(that, length);
		    for (var i = 0; i < length; i += 1) {
		      that[i] = array[i] & 255;
		    }
		    return that
		  }

		  function fromArrayBuffer$1 (that, array, byteOffset, length) {
		    array.byteLength; // this throws if `array` is not a valid ArrayBuffer

		    if (byteOffset < 0 || array.byteLength < byteOffset) {
		      throw new RangeError('\'offset\' is out of bounds')
		    }

		    if (array.byteLength < byteOffset + (length || 0)) {
		      throw new RangeError('\'length\' is out of bounds')
		    }

		    if (byteOffset === undefined && length === undefined) {
		      array = new Uint8Array(array);
		    } else if (length === undefined) {
		      array = new Uint8Array(array, byteOffset);
		    } else {
		      array = new Uint8Array(array, byteOffset, length);
		    }

		    if (Buffer$1.TYPED_ARRAY_SUPPORT) {
		      // Return an augmented `Uint8Array` instance, for best performance
		      that = array;
		      that.__proto__ = Buffer$1.prototype;
		    } else {
		      // Fallback: Return an object instance of the Buffer class
		      that = fromArrayLike$1(that, array);
		    }
		    return that
		  }

		  function fromObject$1 (that, obj) {
		    if (internalIsBuffer$1(obj)) {
		      var len = checked$1(obj.length) | 0;
		      that = createBuffer$1(that, len);

		      if (that.length === 0) {
		        return that
		      }

		      obj.copy(that, 0, 0, len);
		      return that
		    }

		    if (obj) {
		      if ((typeof ArrayBuffer !== 'undefined' &&
		          obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
		        if (typeof obj.length !== 'number' || isnan$1(obj.length)) {
		          return createBuffer$1(that, 0)
		        }
		        return fromArrayLike$1(that, obj)
		      }

		      if (obj.type === 'Buffer' && isArray$2(obj.data)) {
		        return fromArrayLike$1(that, obj.data)
		      }
		    }

		    throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
		  }

		  function checked$1 (length) {
		    // Note: cannot use `length < kMaxLength()` here because that fails when
		    // length is NaN (which is otherwise coerced to zero.)
		    if (length >= kMaxLength$1()) {
		      throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
		                           'size: 0x' + kMaxLength$1().toString(16) + ' bytes')
		    }
		    return length | 0
		  }
		  Buffer$1.isBuffer = isBuffer$2;
		  function internalIsBuffer$1 (b) {
		    return !!(b != null && b._isBuffer)
		  }

		  Buffer$1.compare = function compare (a, b) {
		    if (!internalIsBuffer$1(a) || !internalIsBuffer$1(b)) {
		      throw new TypeError('Arguments must be Buffers')
		    }

		    if (a === b) return 0

		    var x = a.length;
		    var y = b.length;

		    for (var i = 0, len = Math.min(x, y); i < len; ++i) {
		      if (a[i] !== b[i]) {
		        x = a[i];
		        y = b[i];
		        break
		      }
		    }

		    if (x < y) return -1
		    if (y < x) return 1
		    return 0
		  };

		  Buffer$1.isEncoding = function isEncoding (encoding) {
		    switch (String(encoding).toLowerCase()) {
		      case 'hex':
		      case 'utf8':
		      case 'utf-8':
		      case 'ascii':
		      case 'latin1':
		      case 'binary':
		      case 'base64':
		      case 'ucs2':
		      case 'ucs-2':
		      case 'utf16le':
		      case 'utf-16le':
		        return true
		      default:
		        return false
		    }
		  };

		  Buffer$1.concat = function concat (list, length) {
		    if (!isArray$2(list)) {
		      throw new TypeError('"list" argument must be an Array of Buffers')
		    }

		    if (list.length === 0) {
		      return Buffer$1.alloc(0)
		    }

		    var i;
		    if (length === undefined) {
		      length = 0;
		      for (i = 0; i < list.length; ++i) {
		        length += list[i].length;
		      }
		    }

		    var buffer = Buffer$1.allocUnsafe(length);
		    var pos = 0;
		    for (i = 0; i < list.length; ++i) {
		      var buf = list[i];
		      if (!internalIsBuffer$1(buf)) {
		        throw new TypeError('"list" argument must be an Array of Buffers')
		      }
		      buf.copy(buffer, pos);
		      pos += buf.length;
		    }
		    return buffer
		  };

		  function byteLength$1 (string, encoding) {
		    if (internalIsBuffer$1(string)) {
		      return string.length
		    }
		    if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
		        (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
		      return string.byteLength
		    }
		    if (typeof string !== 'string') {
		      string = '' + string;
		    }

		    var len = string.length;
		    if (len === 0) return 0

		    // Use a for loop to avoid recursion
		    var loweredCase = false;
		    for (;;) {
		      switch (encoding) {
		        case 'ascii':
		        case 'latin1':
		        case 'binary':
		          return len
		        case 'utf8':
		        case 'utf-8':
		        case undefined:
		          return utf8ToBytes$1(string).length
		        case 'ucs2':
		        case 'ucs-2':
		        case 'utf16le':
		        case 'utf-16le':
		          return len * 2
		        case 'hex':
		          return len >>> 1
		        case 'base64':
		          return base64ToBytes$1(string).length
		        default:
		          if (loweredCase) return utf8ToBytes$1(string).length // assume utf8
		          encoding = ('' + encoding).toLowerCase();
		          loweredCase = true;
		      }
		    }
		  }
		  Buffer$1.byteLength = byteLength$1;

		  function slowToString$1 (encoding, start, end) {
		    var loweredCase = false;

		    // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
		    // property of a typed array.

		    // This behaves neither like String nor Uint8Array in that we set start/end
		    // to their upper/lower bounds if the value passed is out of range.
		    // undefined is handled specially as per ECMA-262 6th Edition,
		    // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
		    if (start === undefined || start < 0) {
		      start = 0;
		    }
		    // Return early if start > this.length. Done here to prevent potential uint32
		    // coercion fail below.
		    if (start > this.length) {
		      return ''
		    }

		    if (end === undefined || end > this.length) {
		      end = this.length;
		    }

		    if (end <= 0) {
		      return ''
		    }

		    // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
		    end >>>= 0;
		    start >>>= 0;

		    if (end <= start) {
		      return ''
		    }

		    if (!encoding) encoding = 'utf8';

		    while (true) {
		      switch (encoding) {
		        case 'hex':
		          return hexSlice$1(this, start, end)

		        case 'utf8':
		        case 'utf-8':
		          return utf8Slice$1(this, start, end)

		        case 'ascii':
		          return asciiSlice$1(this, start, end)

		        case 'latin1':
		        case 'binary':
		          return latin1Slice$1(this, start, end)

		        case 'base64':
		          return base64Slice$1(this, start, end)

		        case 'ucs2':
		        case 'ucs-2':
		        case 'utf16le':
		        case 'utf-16le':
		          return utf16leSlice$1(this, start, end)

		        default:
		          if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
		          encoding = (encoding + '').toLowerCase();
		          loweredCase = true;
		      }
		    }
		  }

		  // The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
		  // Buffer instances.
		  Buffer$1.prototype._isBuffer = true;

		  function swap$1 (b, n, m) {
		    var i = b[n];
		    b[n] = b[m];
		    b[m] = i;
		  }

		  Buffer$1.prototype.swap16 = function swap16 () {
		    var len = this.length;
		    if (len % 2 !== 0) {
		      throw new RangeError('Buffer size must be a multiple of 16-bits')
		    }
		    for (var i = 0; i < len; i += 2) {
		      swap$1(this, i, i + 1);
		    }
		    return this
		  };

		  Buffer$1.prototype.swap32 = function swap32 () {
		    var len = this.length;
		    if (len % 4 !== 0) {
		      throw new RangeError('Buffer size must be a multiple of 32-bits')
		    }
		    for (var i = 0; i < len; i += 4) {
		      swap$1(this, i, i + 3);
		      swap$1(this, i + 1, i + 2);
		    }
		    return this
		  };

		  Buffer$1.prototype.swap64 = function swap64 () {
		    var len = this.length;
		    if (len % 8 !== 0) {
		      throw new RangeError('Buffer size must be a multiple of 64-bits')
		    }
		    for (var i = 0; i < len; i += 8) {
		      swap$1(this, i, i + 7);
		      swap$1(this, i + 1, i + 6);
		      swap$1(this, i + 2, i + 5);
		      swap$1(this, i + 3, i + 4);
		    }
		    return this
		  };

		  Buffer$1.prototype.toString = function toString () {
		    var length = this.length | 0;
		    if (length === 0) return ''
		    if (arguments.length === 0) return utf8Slice$1(this, 0, length)
		    return slowToString$1.apply(this, arguments)
		  };

		  Buffer$1.prototype.equals = function equals (b) {
		    if (!internalIsBuffer$1(b)) throw new TypeError('Argument must be a Buffer')
		    if (this === b) return true
		    return Buffer$1.compare(this, b) === 0
		  };

		  Buffer$1.prototype.inspect = function inspect () {
		    var str = '';
		    var max = INSPECT_MAX_BYTES$1;
		    if (this.length > 0) {
		      str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');
		      if (this.length > max) str += ' ... ';
		    }
		    return '<Buffer ' + str + '>'
		  };

		  Buffer$1.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
		    if (!internalIsBuffer$1(target)) {
		      throw new TypeError('Argument must be a Buffer')
		    }

		    if (start === undefined) {
		      start = 0;
		    }
		    if (end === undefined) {
		      end = target ? target.length : 0;
		    }
		    if (thisStart === undefined) {
		      thisStart = 0;
		    }
		    if (thisEnd === undefined) {
		      thisEnd = this.length;
		    }

		    if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
		      throw new RangeError('out of range index')
		    }

		    if (thisStart >= thisEnd && start >= end) {
		      return 0
		    }
		    if (thisStart >= thisEnd) {
		      return -1
		    }
		    if (start >= end) {
		      return 1
		    }

		    start >>>= 0;
		    end >>>= 0;
		    thisStart >>>= 0;
		    thisEnd >>>= 0;

		    if (this === target) return 0

		    var x = thisEnd - thisStart;
		    var y = end - start;
		    var len = Math.min(x, y);

		    var thisCopy = this.slice(thisStart, thisEnd);
		    var targetCopy = target.slice(start, end);

		    for (var i = 0; i < len; ++i) {
		      if (thisCopy[i] !== targetCopy[i]) {
		        x = thisCopy[i];
		        y = targetCopy[i];
		        break
		      }
		    }

		    if (x < y) return -1
		    if (y < x) return 1
		    return 0
		  };

		  // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
		  // OR the last index of `val` in `buffer` at offset <= `byteOffset`.
		  //
		  // Arguments:
		  // - buffer - a Buffer to search
		  // - val - a string, Buffer, or number
		  // - byteOffset - an index into `buffer`; will be clamped to an int32
		  // - encoding - an optional encoding, relevant is val is a string
		  // - dir - true for indexOf, false for lastIndexOf
		  function bidirectionalIndexOf$1 (buffer, val, byteOffset, encoding, dir) {
		    // Empty buffer means no match
		    if (buffer.length === 0) return -1

		    // Normalize byteOffset
		    if (typeof byteOffset === 'string') {
		      encoding = byteOffset;
		      byteOffset = 0;
		    } else if (byteOffset > 0x7fffffff) {
		      byteOffset = 0x7fffffff;
		    } else if (byteOffset < -2147483648) {
		      byteOffset = -2147483648;
		    }
		    byteOffset = +byteOffset;  // Coerce to Number.
		    if (isNaN(byteOffset)) {
		      // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
		      byteOffset = dir ? 0 : (buffer.length - 1);
		    }

		    // Normalize byteOffset: negative offsets start from the end of the buffer
		    if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
		    if (byteOffset >= buffer.length) {
		      if (dir) return -1
		      else byteOffset = buffer.length - 1;
		    } else if (byteOffset < 0) {
		      if (dir) byteOffset = 0;
		      else return -1
		    }

		    // Normalize val
		    if (typeof val === 'string') {
		      val = Buffer$1.from(val, encoding);
		    }

		    // Finally, search either indexOf (if dir is true) or lastIndexOf
		    if (internalIsBuffer$1(val)) {
		      // Special case: looking for empty string/buffer always fails
		      if (val.length === 0) {
		        return -1
		      }
		      return arrayIndexOf$1(buffer, val, byteOffset, encoding, dir)
		    } else if (typeof val === 'number') {
		      val = val & 0xFF; // Search for a byte value [0-255]
		      if (Buffer$1.TYPED_ARRAY_SUPPORT &&
		          typeof Uint8Array.prototype.indexOf === 'function') {
		        if (dir) {
		          return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
		        } else {
		          return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
		        }
		      }
		      return arrayIndexOf$1(buffer, [ val ], byteOffset, encoding, dir)
		    }

		    throw new TypeError('val must be string, number or Buffer')
		  }

		  function arrayIndexOf$1 (arr, val, byteOffset, encoding, dir) {
		    var indexSize = 1;
		    var arrLength = arr.length;
		    var valLength = val.length;

		    if (encoding !== undefined) {
		      encoding = String(encoding).toLowerCase();
		      if (encoding === 'ucs2' || encoding === 'ucs-2' ||
		          encoding === 'utf16le' || encoding === 'utf-16le') {
		        if (arr.length < 2 || val.length < 2) {
		          return -1
		        }
		        indexSize = 2;
		        arrLength /= 2;
		        valLength /= 2;
		        byteOffset /= 2;
		      }
		    }

		    function read (buf, i) {
		      if (indexSize === 1) {
		        return buf[i]
		      } else {
		        return buf.readUInt16BE(i * indexSize)
		      }
		    }

		    var i;
		    if (dir) {
		      var foundIndex = -1;
		      for (i = byteOffset; i < arrLength; i++) {
		        if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
		          if (foundIndex === -1) foundIndex = i;
		          if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
		        } else {
		          if (foundIndex !== -1) i -= i - foundIndex;
		          foundIndex = -1;
		        }
		      }
		    } else {
		      if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
		      for (i = byteOffset; i >= 0; i--) {
		        var found = true;
		        for (var j = 0; j < valLength; j++) {
		          if (read(arr, i + j) !== read(val, j)) {
		            found = false;
		            break
		          }
		        }
		        if (found) return i
		      }
		    }

		    return -1
		  }

		  Buffer$1.prototype.includes = function includes (val, byteOffset, encoding) {
		    return this.indexOf(val, byteOffset, encoding) !== -1
		  };

		  Buffer$1.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
		    return bidirectionalIndexOf$1(this, val, byteOffset, encoding, true)
		  };

		  Buffer$1.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
		    return bidirectionalIndexOf$1(this, val, byteOffset, encoding, false)
		  };

		  function hexWrite$1 (buf, string, offset, length) {
		    offset = Number(offset) || 0;
		    var remaining = buf.length - offset;
		    if (!length) {
		      length = remaining;
		    } else {
		      length = Number(length);
		      if (length > remaining) {
		        length = remaining;
		      }
		    }

		    // must be an even number of digits
		    var strLen = string.length;
		    if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

		    if (length > strLen / 2) {
		      length = strLen / 2;
		    }
		    for (var i = 0; i < length; ++i) {
		      var parsed = parseInt(string.substr(i * 2, 2), 16);
		      if (isNaN(parsed)) return i
		      buf[offset + i] = parsed;
		    }
		    return i
		  }

		  function utf8Write$1 (buf, string, offset, length) {
		    return blitBuffer$1(utf8ToBytes$1(string, buf.length - offset), buf, offset, length)
		  }

		  function asciiWrite$1 (buf, string, offset, length) {
		    return blitBuffer$1(asciiToBytes$1(string), buf, offset, length)
		  }

		  function latin1Write$1 (buf, string, offset, length) {
		    return asciiWrite$1(buf, string, offset, length)
		  }

		  function base64Write$1 (buf, string, offset, length) {
		    return blitBuffer$1(base64ToBytes$1(string), buf, offset, length)
		  }

		  function ucs2Write$1 (buf, string, offset, length) {
		    return blitBuffer$1(utf16leToBytes$1(string, buf.length - offset), buf, offset, length)
		  }

		  Buffer$1.prototype.write = function write (string, offset, length, encoding) {
		    // Buffer#write(string)
		    if (offset === undefined) {
		      encoding = 'utf8';
		      length = this.length;
		      offset = 0;
		    // Buffer#write(string, encoding)
		    } else if (length === undefined && typeof offset === 'string') {
		      encoding = offset;
		      length = this.length;
		      offset = 0;
		    // Buffer#write(string, offset[, length][, encoding])
		    } else if (isFinite(offset)) {
		      offset = offset | 0;
		      if (isFinite(length)) {
		        length = length | 0;
		        if (encoding === undefined) encoding = 'utf8';
		      } else {
		        encoding = length;
		        length = undefined;
		      }
		    // legacy write(string, encoding, offset, length) - remove in v0.13
		    } else {
		      throw new Error(
		        'Buffer.write(string, encoding, offset[, length]) is no longer supported'
		      )
		    }

		    var remaining = this.length - offset;
		    if (length === undefined || length > remaining) length = remaining;

		    if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
		      throw new RangeError('Attempt to write outside buffer bounds')
		    }

		    if (!encoding) encoding = 'utf8';

		    var loweredCase = false;
		    for (;;) {
		      switch (encoding) {
		        case 'hex':
		          return hexWrite$1(this, string, offset, length)

		        case 'utf8':
		        case 'utf-8':
		          return utf8Write$1(this, string, offset, length)

		        case 'ascii':
		          return asciiWrite$1(this, string, offset, length)

		        case 'latin1':
		        case 'binary':
		          return latin1Write$1(this, string, offset, length)

		        case 'base64':
		          // Warning: maxLength not taken into account in base64Write
		          return base64Write$1(this, string, offset, length)

		        case 'ucs2':
		        case 'ucs-2':
		        case 'utf16le':
		        case 'utf-16le':
		          return ucs2Write$1(this, string, offset, length)

		        default:
		          if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
		          encoding = ('' + encoding).toLowerCase();
		          loweredCase = true;
		      }
		    }
		  };

		  Buffer$1.prototype.toJSON = function toJSON () {
		    return {
		      type: 'Buffer',
		      data: Array.prototype.slice.call(this._arr || this, 0)
		    }
		  };

		  function base64Slice$1 (buf, start, end) {
		    if (start === 0 && end === buf.length) {
		      return fromByteArray$1(buf)
		    } else {
		      return fromByteArray$1(buf.slice(start, end))
		    }
		  }

		  function utf8Slice$1 (buf, start, end) {
		    end = Math.min(buf.length, end);
		    var res = [];

		    var i = start;
		    while (i < end) {
		      var firstByte = buf[i];
		      var codePoint = null;
		      var bytesPerSequence = (firstByte > 0xEF) ? 4
		        : (firstByte > 0xDF) ? 3
		        : (firstByte > 0xBF) ? 2
		        : 1;

		      if (i + bytesPerSequence <= end) {
		        var secondByte, thirdByte, fourthByte, tempCodePoint;

		        switch (bytesPerSequence) {
		          case 1:
		            if (firstByte < 0x80) {
		              codePoint = firstByte;
		            }
		            break
		          case 2:
		            secondByte = buf[i + 1];
		            if ((secondByte & 0xC0) === 0x80) {
		              tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F);
		              if (tempCodePoint > 0x7F) {
		                codePoint = tempCodePoint;
		              }
		            }
		            break
		          case 3:
		            secondByte = buf[i + 1];
		            thirdByte = buf[i + 2];
		            if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
		              tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F);
		              if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
		                codePoint = tempCodePoint;
		              }
		            }
		            break
		          case 4:
		            secondByte = buf[i + 1];
		            thirdByte = buf[i + 2];
		            fourthByte = buf[i + 3];
		            if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
		              tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F);
		              if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
		                codePoint = tempCodePoint;
		              }
		            }
		        }
		      }

		      if (codePoint === null) {
		        // we did not generate a valid codePoint so insert a
		        // replacement char (U+FFFD) and advance only 1 byte
		        codePoint = 0xFFFD;
		        bytesPerSequence = 1;
		      } else if (codePoint > 0xFFFF) {
		        // encode to utf16 (surrogate pair dance)
		        codePoint -= 0x10000;
		        res.push(codePoint >>> 10 & 0x3FF | 0xD800);
		        codePoint = 0xDC00 | codePoint & 0x3FF;
		      }

		      res.push(codePoint);
		      i += bytesPerSequence;
		    }

		    return decodeCodePointsArray$1(res)
		  }

		  // Based on http://stackoverflow.com/a/22747272/680742, the browser with
		  // the lowest limit is Chrome, with 0x10000 args.
		  // We go 1 magnitude less, for safety
		  var MAX_ARGUMENTS_LENGTH$1 = 0x1000;

		  function decodeCodePointsArray$1 (codePoints) {
		    var len = codePoints.length;
		    if (len <= MAX_ARGUMENTS_LENGTH$1) {
		      return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
		    }

		    // Decode in chunks to avoid "call stack size exceeded".
		    var res = '';
		    var i = 0;
		    while (i < len) {
		      res += String.fromCharCode.apply(
		        String,
		        codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH$1)
		      );
		    }
		    return res
		  }

		  function asciiSlice$1 (buf, start, end) {
		    var ret = '';
		    end = Math.min(buf.length, end);

		    for (var i = start; i < end; ++i) {
		      ret += String.fromCharCode(buf[i] & 0x7F);
		    }
		    return ret
		  }

		  function latin1Slice$1 (buf, start, end) {
		    var ret = '';
		    end = Math.min(buf.length, end);

		    for (var i = start; i < end; ++i) {
		      ret += String.fromCharCode(buf[i]);
		    }
		    return ret
		  }

		  function hexSlice$1 (buf, start, end) {
		    var len = buf.length;

		    if (!start || start < 0) start = 0;
		    if (!end || end < 0 || end > len) end = len;

		    var out = '';
		    for (var i = start; i < end; ++i) {
		      out += toHex$1(buf[i]);
		    }
		    return out
		  }

		  function utf16leSlice$1 (buf, start, end) {
		    var bytes = buf.slice(start, end);
		    var res = '';
		    for (var i = 0; i < bytes.length; i += 2) {
		      res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
		    }
		    return res
		  }

		  Buffer$1.prototype.slice = function slice (start, end) {
		    var len = this.length;
		    start = ~~start;
		    end = end === undefined ? len : ~~end;

		    if (start < 0) {
		      start += len;
		      if (start < 0) start = 0;
		    } else if (start > len) {
		      start = len;
		    }

		    if (end < 0) {
		      end += len;
		      if (end < 0) end = 0;
		    } else if (end > len) {
		      end = len;
		    }

		    if (end < start) end = start;

		    var newBuf;
		    if (Buffer$1.TYPED_ARRAY_SUPPORT) {
		      newBuf = this.subarray(start, end);
		      newBuf.__proto__ = Buffer$1.prototype;
		    } else {
		      var sliceLen = end - start;
		      newBuf = new Buffer$1(sliceLen, undefined);
		      for (var i = 0; i < sliceLen; ++i) {
		        newBuf[i] = this[i + start];
		      }
		    }

		    return newBuf
		  };

		  /*
		   * Need to make sure that buffer isn't trying to write out of bounds.
		   */
		  function checkOffset$1 (offset, ext, length) {
		    if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
		    if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
		  }

		  Buffer$1.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
		    offset = offset | 0;
		    byteLength = byteLength | 0;
		    if (!noAssert) checkOffset$1(offset, byteLength, this.length);

		    var val = this[offset];
		    var mul = 1;
		    var i = 0;
		    while (++i < byteLength && (mul *= 0x100)) {
		      val += this[offset + i] * mul;
		    }

		    return val
		  };

		  Buffer$1.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
		    offset = offset | 0;
		    byteLength = byteLength | 0;
		    if (!noAssert) {
		      checkOffset$1(offset, byteLength, this.length);
		    }

		    var val = this[offset + --byteLength];
		    var mul = 1;
		    while (byteLength > 0 && (mul *= 0x100)) {
		      val += this[offset + --byteLength] * mul;
		    }

		    return val
		  };

		  Buffer$1.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
		    if (!noAssert) checkOffset$1(offset, 1, this.length);
		    return this[offset]
		  };

		  Buffer$1.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
		    if (!noAssert) checkOffset$1(offset, 2, this.length);
		    return this[offset] | (this[offset + 1] << 8)
		  };

		  Buffer$1.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
		    if (!noAssert) checkOffset$1(offset, 2, this.length);
		    return (this[offset] << 8) | this[offset + 1]
		  };

		  Buffer$1.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
		    if (!noAssert) checkOffset$1(offset, 4, this.length);

		    return ((this[offset]) |
		        (this[offset + 1] << 8) |
		        (this[offset + 2] << 16)) +
		        (this[offset + 3] * 0x1000000)
		  };

		  Buffer$1.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
		    if (!noAssert) checkOffset$1(offset, 4, this.length);

		    return (this[offset] * 0x1000000) +
		      ((this[offset + 1] << 16) |
		      (this[offset + 2] << 8) |
		      this[offset + 3])
		  };

		  Buffer$1.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
		    offset = offset | 0;
		    byteLength = byteLength | 0;
		    if (!noAssert) checkOffset$1(offset, byteLength, this.length);

		    var val = this[offset];
		    var mul = 1;
		    var i = 0;
		    while (++i < byteLength && (mul *= 0x100)) {
		      val += this[offset + i] * mul;
		    }
		    mul *= 0x80;

		    if (val >= mul) val -= Math.pow(2, 8 * byteLength);

		    return val
		  };

		  Buffer$1.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
		    offset = offset | 0;
		    byteLength = byteLength | 0;
		    if (!noAssert) checkOffset$1(offset, byteLength, this.length);

		    var i = byteLength;
		    var mul = 1;
		    var val = this[offset + --i];
		    while (i > 0 && (mul *= 0x100)) {
		      val += this[offset + --i] * mul;
		    }
		    mul *= 0x80;

		    if (val >= mul) val -= Math.pow(2, 8 * byteLength);

		    return val
		  };

		  Buffer$1.prototype.readInt8 = function readInt8 (offset, noAssert) {
		    if (!noAssert) checkOffset$1(offset, 1, this.length);
		    if (!(this[offset] & 0x80)) return (this[offset])
		    return ((0xff - this[offset] + 1) * -1)
		  };

		  Buffer$1.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
		    if (!noAssert) checkOffset$1(offset, 2, this.length);
		    var val = this[offset] | (this[offset + 1] << 8);
		    return (val & 0x8000) ? val | 0xFFFF0000 : val
		  };

		  Buffer$1.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
		    if (!noAssert) checkOffset$1(offset, 2, this.length);
		    var val = this[offset + 1] | (this[offset] << 8);
		    return (val & 0x8000) ? val | 0xFFFF0000 : val
		  };

		  Buffer$1.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
		    if (!noAssert) checkOffset$1(offset, 4, this.length);

		    return (this[offset]) |
		      (this[offset + 1] << 8) |
		      (this[offset + 2] << 16) |
		      (this[offset + 3] << 24)
		  };

		  Buffer$1.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
		    if (!noAssert) checkOffset$1(offset, 4, this.length);

		    return (this[offset] << 24) |
		      (this[offset + 1] << 16) |
		      (this[offset + 2] << 8) |
		      (this[offset + 3])
		  };

		  Buffer$1.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
		    if (!noAssert) checkOffset$1(offset, 4, this.length);
		    return read$1(this, offset, true, 23, 4)
		  };

		  Buffer$1.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
		    if (!noAssert) checkOffset$1(offset, 4, this.length);
		    return read$1(this, offset, false, 23, 4)
		  };

		  Buffer$1.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
		    if (!noAssert) checkOffset$1(offset, 8, this.length);
		    return read$1(this, offset, true, 52, 8)
		  };

		  Buffer$1.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
		    if (!noAssert) checkOffset$1(offset, 8, this.length);
		    return read$1(this, offset, false, 52, 8)
		  };

		  function checkInt$1 (buf, value, offset, ext, max, min) {
		    if (!internalIsBuffer$1(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
		    if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
		    if (offset + ext > buf.length) throw new RangeError('Index out of range')
		  }

		  Buffer$1.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
		    value = +value;
		    offset = offset | 0;
		    byteLength = byteLength | 0;
		    if (!noAssert) {
		      var maxBytes = Math.pow(2, 8 * byteLength) - 1;
		      checkInt$1(this, value, offset, byteLength, maxBytes, 0);
		    }

		    var mul = 1;
		    var i = 0;
		    this[offset] = value & 0xFF;
		    while (++i < byteLength && (mul *= 0x100)) {
		      this[offset + i] = (value / mul) & 0xFF;
		    }

		    return offset + byteLength
		  };

		  Buffer$1.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
		    value = +value;
		    offset = offset | 0;
		    byteLength = byteLength | 0;
		    if (!noAssert) {
		      var maxBytes = Math.pow(2, 8 * byteLength) - 1;
		      checkInt$1(this, value, offset, byteLength, maxBytes, 0);
		    }

		    var i = byteLength - 1;
		    var mul = 1;
		    this[offset + i] = value & 0xFF;
		    while (--i >= 0 && (mul *= 0x100)) {
		      this[offset + i] = (value / mul) & 0xFF;
		    }

		    return offset + byteLength
		  };

		  Buffer$1.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
		    value = +value;
		    offset = offset | 0;
		    if (!noAssert) checkInt$1(this, value, offset, 1, 0xff, 0);
		    if (!Buffer$1.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
		    this[offset] = (value & 0xff);
		    return offset + 1
		  };

		  function objectWriteUInt16$1 (buf, value, offset, littleEndian) {
		    if (value < 0) value = 0xffff + value + 1;
		    for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
		      buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
		        (littleEndian ? i : 1 - i) * 8;
		    }
		  }

		  Buffer$1.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
		    value = +value;
		    offset = offset | 0;
		    if (!noAssert) checkInt$1(this, value, offset, 2, 0xffff, 0);
		    if (Buffer$1.TYPED_ARRAY_SUPPORT) {
		      this[offset] = (value & 0xff);
		      this[offset + 1] = (value >>> 8);
		    } else {
		      objectWriteUInt16$1(this, value, offset, true);
		    }
		    return offset + 2
		  };

		  Buffer$1.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
		    value = +value;
		    offset = offset | 0;
		    if (!noAssert) checkInt$1(this, value, offset, 2, 0xffff, 0);
		    if (Buffer$1.TYPED_ARRAY_SUPPORT) {
		      this[offset] = (value >>> 8);
		      this[offset + 1] = (value & 0xff);
		    } else {
		      objectWriteUInt16$1(this, value, offset, false);
		    }
		    return offset + 2
		  };

		  function objectWriteUInt32$1 (buf, value, offset, littleEndian) {
		    if (value < 0) value = 0xffffffff + value + 1;
		    for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
		      buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff;
		    }
		  }

		  Buffer$1.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
		    value = +value;
		    offset = offset | 0;
		    if (!noAssert) checkInt$1(this, value, offset, 4, 0xffffffff, 0);
		    if (Buffer$1.TYPED_ARRAY_SUPPORT) {
		      this[offset + 3] = (value >>> 24);
		      this[offset + 2] = (value >>> 16);
		      this[offset + 1] = (value >>> 8);
		      this[offset] = (value & 0xff);
		    } else {
		      objectWriteUInt32$1(this, value, offset, true);
		    }
		    return offset + 4
		  };

		  Buffer$1.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
		    value = +value;
		    offset = offset | 0;
		    if (!noAssert) checkInt$1(this, value, offset, 4, 0xffffffff, 0);
		    if (Buffer$1.TYPED_ARRAY_SUPPORT) {
		      this[offset] = (value >>> 24);
		      this[offset + 1] = (value >>> 16);
		      this[offset + 2] = (value >>> 8);
		      this[offset + 3] = (value & 0xff);
		    } else {
		      objectWriteUInt32$1(this, value, offset, false);
		    }
		    return offset + 4
		  };

		  Buffer$1.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
		    value = +value;
		    offset = offset | 0;
		    if (!noAssert) {
		      var limit = Math.pow(2, 8 * byteLength - 1);

		      checkInt$1(this, value, offset, byteLength, limit - 1, -limit);
		    }

		    var i = 0;
		    var mul = 1;
		    var sub = 0;
		    this[offset] = value & 0xFF;
		    while (++i < byteLength && (mul *= 0x100)) {
		      if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
		        sub = 1;
		      }
		      this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
		    }

		    return offset + byteLength
		  };

		  Buffer$1.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
		    value = +value;
		    offset = offset | 0;
		    if (!noAssert) {
		      var limit = Math.pow(2, 8 * byteLength - 1);

		      checkInt$1(this, value, offset, byteLength, limit - 1, -limit);
		    }

		    var i = byteLength - 1;
		    var mul = 1;
		    var sub = 0;
		    this[offset + i] = value & 0xFF;
		    while (--i >= 0 && (mul *= 0x100)) {
		      if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
		        sub = 1;
		      }
		      this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
		    }

		    return offset + byteLength
		  };

		  Buffer$1.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
		    value = +value;
		    offset = offset | 0;
		    if (!noAssert) checkInt$1(this, value, offset, 1, 0x7f, -128);
		    if (!Buffer$1.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
		    if (value < 0) value = 0xff + value + 1;
		    this[offset] = (value & 0xff);
		    return offset + 1
		  };

		  Buffer$1.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
		    value = +value;
		    offset = offset | 0;
		    if (!noAssert) checkInt$1(this, value, offset, 2, 0x7fff, -32768);
		    if (Buffer$1.TYPED_ARRAY_SUPPORT) {
		      this[offset] = (value & 0xff);
		      this[offset + 1] = (value >>> 8);
		    } else {
		      objectWriteUInt16$1(this, value, offset, true);
		    }
		    return offset + 2
		  };

		  Buffer$1.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
		    value = +value;
		    offset = offset | 0;
		    if (!noAssert) checkInt$1(this, value, offset, 2, 0x7fff, -32768);
		    if (Buffer$1.TYPED_ARRAY_SUPPORT) {
		      this[offset] = (value >>> 8);
		      this[offset + 1] = (value & 0xff);
		    } else {
		      objectWriteUInt16$1(this, value, offset, false);
		    }
		    return offset + 2
		  };

		  Buffer$1.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
		    value = +value;
		    offset = offset | 0;
		    if (!noAssert) checkInt$1(this, value, offset, 4, 0x7fffffff, -2147483648);
		    if (Buffer$1.TYPED_ARRAY_SUPPORT) {
		      this[offset] = (value & 0xff);
		      this[offset + 1] = (value >>> 8);
		      this[offset + 2] = (value >>> 16);
		      this[offset + 3] = (value >>> 24);
		    } else {
		      objectWriteUInt32$1(this, value, offset, true);
		    }
		    return offset + 4
		  };

		  Buffer$1.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
		    value = +value;
		    offset = offset | 0;
		    if (!noAssert) checkInt$1(this, value, offset, 4, 0x7fffffff, -2147483648);
		    if (value < 0) value = 0xffffffff + value + 1;
		    if (Buffer$1.TYPED_ARRAY_SUPPORT) {
		      this[offset] = (value >>> 24);
		      this[offset + 1] = (value >>> 16);
		      this[offset + 2] = (value >>> 8);
		      this[offset + 3] = (value & 0xff);
		    } else {
		      objectWriteUInt32$1(this, value, offset, false);
		    }
		    return offset + 4
		  };

		  function checkIEEE754$1 (buf, value, offset, ext, max, min) {
		    if (offset + ext > buf.length) throw new RangeError('Index out of range')
		    if (offset < 0) throw new RangeError('Index out of range')
		  }

		  function writeFloat$1 (buf, value, offset, littleEndian, noAssert) {
		    if (!noAssert) {
		      checkIEEE754$1(buf, value, offset, 4);
		    }
		    write$1(buf, value, offset, littleEndian, 23, 4);
		    return offset + 4
		  }

		  Buffer$1.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
		    return writeFloat$1(this, value, offset, true, noAssert)
		  };

		  Buffer$1.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
		    return writeFloat$1(this, value, offset, false, noAssert)
		  };

		  function writeDouble$1 (buf, value, offset, littleEndian, noAssert) {
		    if (!noAssert) {
		      checkIEEE754$1(buf, value, offset, 8);
		    }
		    write$1(buf, value, offset, littleEndian, 52, 8);
		    return offset + 8
		  }

		  Buffer$1.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
		    return writeDouble$1(this, value, offset, true, noAssert)
		  };

		  Buffer$1.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
		    return writeDouble$1(this, value, offset, false, noAssert)
		  };

		  // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
		  Buffer$1.prototype.copy = function copy (target, targetStart, start, end) {
		    if (!start) start = 0;
		    if (!end && end !== 0) end = this.length;
		    if (targetStart >= target.length) targetStart = target.length;
		    if (!targetStart) targetStart = 0;
		    if (end > 0 && end < start) end = start;

		    // Copy 0 bytes; we're done
		    if (end === start) return 0
		    if (target.length === 0 || this.length === 0) return 0

		    // Fatal error conditions
		    if (targetStart < 0) {
		      throw new RangeError('targetStart out of bounds')
		    }
		    if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
		    if (end < 0) throw new RangeError('sourceEnd out of bounds')

		    // Are we oob?
		    if (end > this.length) end = this.length;
		    if (target.length - targetStart < end - start) {
		      end = target.length - targetStart + start;
		    }

		    var len = end - start;
		    var i;

		    if (this === target && start < targetStart && targetStart < end) {
		      // descending copy from end
		      for (i = len - 1; i >= 0; --i) {
		        target[i + targetStart] = this[i + start];
		      }
		    } else if (len < 1000 || !Buffer$1.TYPED_ARRAY_SUPPORT) {
		      // ascending copy from start
		      for (i = 0; i < len; ++i) {
		        target[i + targetStart] = this[i + start];
		      }
		    } else {
		      Uint8Array.prototype.set.call(
		        target,
		        this.subarray(start, start + len),
		        targetStart
		      );
		    }

		    return len
		  };

		  // Usage:
		  //    buffer.fill(number[, offset[, end]])
		  //    buffer.fill(buffer[, offset[, end]])
		  //    buffer.fill(string[, offset[, end]][, encoding])
		  Buffer$1.prototype.fill = function fill (val, start, end, encoding) {
		    // Handle string cases:
		    if (typeof val === 'string') {
		      if (typeof start === 'string') {
		        encoding = start;
		        start = 0;
		        end = this.length;
		      } else if (typeof end === 'string') {
		        encoding = end;
		        end = this.length;
		      }
		      if (val.length === 1) {
		        var code = val.charCodeAt(0);
		        if (code < 256) {
		          val = code;
		        }
		      }
		      if (encoding !== undefined && typeof encoding !== 'string') {
		        throw new TypeError('encoding must be a string')
		      }
		      if (typeof encoding === 'string' && !Buffer$1.isEncoding(encoding)) {
		        throw new TypeError('Unknown encoding: ' + encoding)
		      }
		    } else if (typeof val === 'number') {
		      val = val & 255;
		    }

		    // Invalid ranges are not set to a default, so can range check early.
		    if (start < 0 || this.length < start || this.length < end) {
		      throw new RangeError('Out of range index')
		    }

		    if (end <= start) {
		      return this
		    }

		    start = start >>> 0;
		    end = end === undefined ? this.length : end >>> 0;

		    if (!val) val = 0;

		    var i;
		    if (typeof val === 'number') {
		      for (i = start; i < end; ++i) {
		        this[i] = val;
		      }
		    } else {
		      var bytes = internalIsBuffer$1(val)
		        ? val
		        : utf8ToBytes$1(new Buffer$1(val, encoding).toString());
		      var len = bytes.length;
		      for (i = 0; i < end - start; ++i) {
		        this[i + start] = bytes[i % len];
		      }
		    }

		    return this
		  };

		  // HELPER FUNCTIONS
		  // ================

		  var INVALID_BASE64_RE$1 = /[^+\/0-9A-Za-z-_]/g;

		  function base64clean$1 (str) {
		    // Node strips out invalid characters like \n and \t from the string, base64-js does not
		    str = stringtrim$1(str).replace(INVALID_BASE64_RE$1, '');
		    // Node converts strings with length < 2 to ''
		    if (str.length < 2) return ''
		    // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
		    while (str.length % 4 !== 0) {
		      str = str + '=';
		    }
		    return str
		  }

		  function stringtrim$1 (str) {
		    if (str.trim) return str.trim()
		    return str.replace(/^\s+|\s+$/g, '')
		  }

		  function toHex$1 (n) {
		    if (n < 16) return '0' + n.toString(16)
		    return n.toString(16)
		  }

		  function utf8ToBytes$1 (string, units) {
		    units = units || Infinity;
		    var codePoint;
		    var length = string.length;
		    var leadSurrogate = null;
		    var bytes = [];

		    for (var i = 0; i < length; ++i) {
		      codePoint = string.charCodeAt(i);

		      // is surrogate component
		      if (codePoint > 0xD7FF && codePoint < 0xE000) {
		        // last char was a lead
		        if (!leadSurrogate) {
		          // no lead yet
		          if (codePoint > 0xDBFF) {
		            // unexpected trail
		            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
		            continue
		          } else if (i + 1 === length) {
		            // unpaired lead
		            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
		            continue
		          }

		          // valid lead
		          leadSurrogate = codePoint;

		          continue
		        }

		        // 2 leads in a row
		        if (codePoint < 0xDC00) {
		          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
		          leadSurrogate = codePoint;
		          continue
		        }

		        // valid surrogate pair
		        codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
		      } else if (leadSurrogate) {
		        // valid bmp char, but last char was a lead
		        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
		      }

		      leadSurrogate = null;

		      // encode utf8
		      if (codePoint < 0x80) {
		        if ((units -= 1) < 0) break
		        bytes.push(codePoint);
		      } else if (codePoint < 0x800) {
		        if ((units -= 2) < 0) break
		        bytes.push(
		          codePoint >> 0x6 | 0xC0,
		          codePoint & 0x3F | 0x80
		        );
		      } else if (codePoint < 0x10000) {
		        if ((units -= 3) < 0) break
		        bytes.push(
		          codePoint >> 0xC | 0xE0,
		          codePoint >> 0x6 & 0x3F | 0x80,
		          codePoint & 0x3F | 0x80
		        );
		      } else if (codePoint < 0x110000) {
		        if ((units -= 4) < 0) break
		        bytes.push(
		          codePoint >> 0x12 | 0xF0,
		          codePoint >> 0xC & 0x3F | 0x80,
		          codePoint >> 0x6 & 0x3F | 0x80,
		          codePoint & 0x3F | 0x80
		        );
		      } else {
		        throw new Error('Invalid code point')
		      }
		    }

		    return bytes
		  }

		  function asciiToBytes$1 (str) {
		    var byteArray = [];
		    for (var i = 0; i < str.length; ++i) {
		      // Node's code seems to be doing this and not & 0x7F..
		      byteArray.push(str.charCodeAt(i) & 0xFF);
		    }
		    return byteArray
		  }

		  function utf16leToBytes$1 (str, units) {
		    var c, hi, lo;
		    var byteArray = [];
		    for (var i = 0; i < str.length; ++i) {
		      if ((units -= 2) < 0) break

		      c = str.charCodeAt(i);
		      hi = c >> 8;
		      lo = c % 256;
		      byteArray.push(lo);
		      byteArray.push(hi);
		    }

		    return byteArray
		  }


		  function base64ToBytes$1 (str) {
		    return toByteArray$1(base64clean$1(str))
		  }

		  function blitBuffer$1 (src, dst, offset, length) {
		    for (var i = 0; i < length; ++i) {
		      if ((i + offset >= dst.length) || (i >= src.length)) break
		      dst[i + offset] = src[i];
		    }
		    return i
		  }

		  function isnan$1 (val) {
		    return val !== val // eslint-disable-line no-self-compare
		  }


		  // the following is from is-buffer, also by Feross Aboukhadijeh and with same lisence
		  // The _isBuffer check is for Safari 5-7 support, because it's missing
		  // Object.prototype.constructor. Remove this eventually
		  function isBuffer$2(obj) {
		    return obj != null && (!!obj._isBuffer || isFastBuffer$1(obj) || isSlowBuffer$1(obj))
		  }

		  function isFastBuffer$1 (obj) {
		    return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
		  }

		  // For Node v0.10 support. Remove this eventually.
		  function isSlowBuffer$1 (obj) {
		    return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isFastBuffer$1(obj.slice(0, 0))
		  }

		  // shim for using process in browser
		  // based off https://github.com/defunctzombie/node-process/blob/master/browser.js

		  function defaultSetTimout() {
		      throw new Error('setTimeout has not been defined');
		  }
		  function defaultClearTimeout () {
		      throw new Error('clearTimeout has not been defined');
		  }
		  var cachedSetTimeout = defaultSetTimout;
		  var cachedClearTimeout = defaultClearTimeout;
		  if (typeof global$2.setTimeout === 'function') {
		      cachedSetTimeout = setTimeout;
		  }
		  if (typeof global$2.clearTimeout === 'function') {
		      cachedClearTimeout = clearTimeout;
		  }

		  function runTimeout(fun) {
		      if (cachedSetTimeout === setTimeout) {
		          //normal enviroments in sane situations
		          return setTimeout(fun, 0);
		      }
		      // if setTimeout wasn't available but was latter defined
		      if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
		          cachedSetTimeout = setTimeout;
		          return setTimeout(fun, 0);
		      }
		      try {
		          // when when somebody has screwed with setTimeout but no I.E. maddness
		          return cachedSetTimeout(fun, 0);
		      } catch(e){
		          try {
		              // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
		              return cachedSetTimeout.call(null, fun, 0);
		          } catch(e){
		              // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
		              return cachedSetTimeout.call(this, fun, 0);
		          }
		      }


		  }
		  function runClearTimeout(marker) {
		      if (cachedClearTimeout === clearTimeout) {
		          //normal enviroments in sane situations
		          return clearTimeout(marker);
		      }
		      // if clearTimeout wasn't available but was latter defined
		      if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
		          cachedClearTimeout = clearTimeout;
		          return clearTimeout(marker);
		      }
		      try {
		          // when when somebody has screwed with setTimeout but no I.E. maddness
		          return cachedClearTimeout(marker);
		      } catch (e){
		          try {
		              // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
		              return cachedClearTimeout.call(null, marker);
		          } catch (e){
		              // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
		              // Some versions of I.E. have different rules for clearTimeout vs setTimeout
		              return cachedClearTimeout.call(this, marker);
		          }
		      }



		  }
		  var queue = [];
		  var draining = false;
		  var currentQueue;
		  var queueIndex = -1;

		  function cleanUpNextTick() {
		      if (!draining || !currentQueue) {
		          return;
		      }
		      draining = false;
		      if (currentQueue.length) {
		          queue = currentQueue.concat(queue);
		      } else {
		          queueIndex = -1;
		      }
		      if (queue.length) {
		          drainQueue();
		      }
		  }

		  function drainQueue() {
		      if (draining) {
		          return;
		      }
		      var timeout = runTimeout(cleanUpNextTick);
		      draining = true;

		      var len = queue.length;
		      while(len) {
		          currentQueue = queue;
		          queue = [];
		          while (++queueIndex < len) {
		              if (currentQueue) {
		                  currentQueue[queueIndex].run();
		              }
		          }
		          queueIndex = -1;
		          len = queue.length;
		      }
		      currentQueue = null;
		      draining = false;
		      runClearTimeout(timeout);
		  }
		  function nextTick(fun) {
		      var args = new Array(arguments.length - 1);
		      if (arguments.length > 1) {
		          for (var i = 1; i < arguments.length; i++) {
		              args[i - 1] = arguments[i];
		          }
		      }
		      queue.push(new Item(fun, args));
		      if (queue.length === 1 && !draining) {
		          runTimeout(drainQueue);
		      }
		  }
		  // v8 likes predictible objects
		  function Item(fun, array) {
		      this.fun = fun;
		      this.array = array;
		  }
		  Item.prototype.run = function () {
		      this.fun.apply(null, this.array);
		  };
		  var env = {};

		  // from https://github.com/kumavis/browser-process-hrtime/blob/master/index.js
		  var performance = global$2.performance || {};
		  performance.now        ||
		    performance.mozNow     ||
		    performance.msNow      ||
		    performance.oNow       ||
		    performance.webkitNow  ||
		    function(){ return (new Date()).getTime() };

		  var browser$1$1 = {
		    env: env};

		  var inherits$2;
		  if (typeof Object.create === 'function'){
		    inherits$2 = function inherits(ctor, superCtor) {
		      // implementation from standard node.js 'util' module
		      ctor.super_ = superCtor;
		      ctor.prototype = Object.create(superCtor.prototype, {
		        constructor: {
		          value: ctor,
		          enumerable: false,
		          writable: true,
		          configurable: true
		        }
		      });
		    };
		  } else {
		    inherits$2 = function inherits(ctor, superCtor) {
		      ctor.super_ = superCtor;
		      var TempCtor = function () {};
		      TempCtor.prototype = superCtor.prototype;
		      ctor.prototype = new TempCtor();
		      ctor.prototype.constructor = ctor;
		    };
		  }
		  var inherits$3 = inherits$2;

		  var formatRegExp = /%[sdj%]/g;
		  function format$1(f) {
		    if (!isString$1(f)) {
		      var objects = [];
		      for (var i = 0; i < arguments.length; i++) {
		        objects.push(inspect(arguments[i]));
		      }
		      return objects.join(' ');
		    }

		    var i = 1;
		    var args = arguments;
		    var len = args.length;
		    var str = String(f).replace(formatRegExp, function(x) {
		      if (x === '%%') return '%';
		      if (i >= len) return x;
		      switch (x) {
		        case '%s': return String(args[i++]);
		        case '%d': return Number(args[i++]);
		        case '%j':
		          try {
		            return JSON.stringify(args[i++]);
		          } catch (_) {
		            return '[Circular]';
		          }
		        default:
		          return x;
		      }
		    });
		    for (var x = args[i]; i < len; x = args[++i]) {
		      if (isNull(x) || !isObject(x)) {
		        str += ' ' + x;
		      } else {
		        str += ' ' + inspect(x);
		      }
		    }
		    return str;
		  }

		  // Mark that a method should not be used.
		  // Returns a modified function which warns once by default.
		  // If --no-deprecation is set, then it is a no-op.
		  function deprecate$1(fn, msg) {
		    // Allow for deprecating things in the process of starting up.
		    if (isUndefined(global$2.process)) {
		      return function() {
		        return deprecate$1(fn, msg).apply(this, arguments);
		      };
		    }

		    if (browser$1$1.noDeprecation === true) {
		      return fn;
		    }

		    var warned = false;
		    function deprecated() {
		      if (!warned) {
		        if (browser$1$1.throwDeprecation) {
		          throw new Error(msg);
		        } else if (browser$1$1.traceDeprecation) {
		          console.trace(msg);
		        } else {
		          console.error(msg);
		        }
		        warned = true;
		      }
		      return fn.apply(this, arguments);
		    }

		    return deprecated;
		  }

		  var debugs = {};
		  var debugEnviron;
		  function debuglog(set) {
		    if (isUndefined(debugEnviron))
		      debugEnviron = browser$1$1.env.NODE_DEBUG || '';
		    set = set.toUpperCase();
		    if (!debugs[set]) {
		      if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
		        var pid = 0;
		        debugs[set] = function() {
		          var msg = format$1.apply(null, arguments);
		          console.error('%s %d: %s', set, pid, msg);
		        };
		      } else {
		        debugs[set] = function() {};
		      }
		    }
		    return debugs[set];
		  }

		  /**
		   * Echos the value of a value. Trys to print the value out
		   * in the best way possible given the different types.
		   *
		   * @param {Object} obj The object to print out.
		   * @param {Object} opts Optional options object that alters the output.
		   */
		  /* legacy: obj, showHidden, depth, colors*/
		  function inspect(obj, opts) {
		    // default options
		    var ctx = {
		      seen: [],
		      stylize: stylizeNoColor
		    };
		    // legacy...
		    if (arguments.length >= 3) ctx.depth = arguments[2];
		    if (arguments.length >= 4) ctx.colors = arguments[3];
		    if (isBoolean(opts)) {
		      // legacy...
		      ctx.showHidden = opts;
		    } else if (opts) {
		      // got an "options" object
		      _extend(ctx, opts);
		    }
		    // set default options
		    if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
		    if (isUndefined(ctx.depth)) ctx.depth = 2;
		    if (isUndefined(ctx.colors)) ctx.colors = false;
		    if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
		    if (ctx.colors) ctx.stylize = stylizeWithColor;
		    return formatValue(ctx, obj, ctx.depth);
		  }

		  // http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
		  inspect.colors = {
		    'bold' : [1, 22],
		    'italic' : [3, 23],
		    'underline' : [4, 24],
		    'inverse' : [7, 27],
		    'white' : [37, 39],
		    'grey' : [90, 39],
		    'black' : [30, 39],
		    'blue' : [34, 39],
		    'cyan' : [36, 39],
		    'green' : [32, 39],
		    'magenta' : [35, 39],
		    'red' : [31, 39],
		    'yellow' : [33, 39]
		  };

		  // Don't use 'blue' not visible on cmd.exe
		  inspect.styles = {
		    'special': 'cyan',
		    'number': 'yellow',
		    'boolean': 'yellow',
		    'undefined': 'grey',
		    'null': 'bold',
		    'string': 'green',
		    'date': 'magenta',
		    // "name": intentionally not styling
		    'regexp': 'red'
		  };


		  function stylizeWithColor(str, styleType) {
		    var style = inspect.styles[styleType];

		    if (style) {
		      return '\u001b[' + inspect.colors[style][0] + 'm' + str +
		             '\u001b[' + inspect.colors[style][1] + 'm';
		    } else {
		      return str;
		    }
		  }


		  function stylizeNoColor(str, styleType) {
		    return str;
		  }


		  function arrayToHash(array) {
		    var hash = {};

		    array.forEach(function(val, idx) {
		      hash[val] = true;
		    });

		    return hash;
		  }


		  function formatValue(ctx, value, recurseTimes) {
		    // Provide a hook for user-specified inspect functions.
		    // Check that value is an object with an inspect function on it
		    if (ctx.customInspect &&
		        value &&
		        isFunction(value.inspect) &&
		        // Filter out the util module, it's inspect function is special
		        value.inspect !== inspect &&
		        // Also filter out any prototype objects using the circular check.
		        !(value.constructor && value.constructor.prototype === value)) {
		      var ret = value.inspect(recurseTimes, ctx);
		      if (!isString$1(ret)) {
		        ret = formatValue(ctx, ret, recurseTimes);
		      }
		      return ret;
		    }

		    // Primitive types cannot have properties
		    var primitive = formatPrimitive(ctx, value);
		    if (primitive) {
		      return primitive;
		    }

		    // Look up the keys of the object.
		    var keys = Object.keys(value);
		    var visibleKeys = arrayToHash(keys);

		    if (ctx.showHidden) {
		      keys = Object.getOwnPropertyNames(value);
		    }

		    // IE doesn't make error fields non-enumerable
		    // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
		    if (isError$1(value)
		        && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
		      return formatError(value);
		    }

		    // Some type of object without properties can be shortcutted.
		    if (keys.length === 0) {
		      if (isFunction(value)) {
		        var name = value.name ? ': ' + value.name : '';
		        return ctx.stylize('[Function' + name + ']', 'special');
		      }
		      if (isRegExp(value)) {
		        return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
		      }
		      if (isDate(value)) {
		        return ctx.stylize(Date.prototype.toString.call(value), 'date');
		      }
		      if (isError$1(value)) {
		        return formatError(value);
		      }
		    }

		    var base = '', array = false, braces = ['{', '}'];

		    // Make Array say that they are Array
		    if (isArray$1(value)) {
		      array = true;
		      braces = ['[', ']'];
		    }

		    // Make functions say that they are functions
		    if (isFunction(value)) {
		      var n = value.name ? ': ' + value.name : '';
		      base = ' [Function' + n + ']';
		    }

		    // Make RegExps say that they are RegExps
		    if (isRegExp(value)) {
		      base = ' ' + RegExp.prototype.toString.call(value);
		    }

		    // Make dates with properties first say the date
		    if (isDate(value)) {
		      base = ' ' + Date.prototype.toUTCString.call(value);
		    }

		    // Make error with message first say the error
		    if (isError$1(value)) {
		      base = ' ' + formatError(value);
		    }

		    if (keys.length === 0 && (!array || value.length == 0)) {
		      return braces[0] + base + braces[1];
		    }

		    if (recurseTimes < 0) {
		      if (isRegExp(value)) {
		        return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
		      } else {
		        return ctx.stylize('[Object]', 'special');
		      }
		    }

		    ctx.seen.push(value);

		    var output;
		    if (array) {
		      output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
		    } else {
		      output = keys.map(function(key) {
		        return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
		      });
		    }

		    ctx.seen.pop();

		    return reduceToSingleString(output, base, braces);
		  }


		  function formatPrimitive(ctx, value) {
		    if (isUndefined(value))
		      return ctx.stylize('undefined', 'undefined');
		    if (isString$1(value)) {
		      var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
		                                               .replace(/'/g, "\\'")
		                                               .replace(/\\"/g, '"') + '\'';
		      return ctx.stylize(simple, 'string');
		    }
		    if (isNumber(value))
		      return ctx.stylize('' + value, 'number');
		    if (isBoolean(value))
		      return ctx.stylize('' + value, 'boolean');
		    // For some reason typeof null is "object", so special case here.
		    if (isNull(value))
		      return ctx.stylize('null', 'null');
		  }


		  function formatError(value) {
		    return '[' + Error.prototype.toString.call(value) + ']';
		  }


		  function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
		    var output = [];
		    for (var i = 0, l = value.length; i < l; ++i) {
		      if (hasOwnProperty(value, String(i))) {
		        output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
		            String(i), true));
		      } else {
		        output.push('');
		      }
		    }
		    keys.forEach(function(key) {
		      if (!key.match(/^\d+$/)) {
		        output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
		            key, true));
		      }
		    });
		    return output;
		  }


		  function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
		    var name, str, desc;
		    desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
		    if (desc.get) {
		      if (desc.set) {
		        str = ctx.stylize('[Getter/Setter]', 'special');
		      } else {
		        str = ctx.stylize('[Getter]', 'special');
		      }
		    } else {
		      if (desc.set) {
		        str = ctx.stylize('[Setter]', 'special');
		      }
		    }
		    if (!hasOwnProperty(visibleKeys, key)) {
		      name = '[' + key + ']';
		    }
		    if (!str) {
		      if (ctx.seen.indexOf(desc.value) < 0) {
		        if (isNull(recurseTimes)) {
		          str = formatValue(ctx, desc.value, null);
		        } else {
		          str = formatValue(ctx, desc.value, recurseTimes - 1);
		        }
		        if (str.indexOf('\n') > -1) {
		          if (array) {
		            str = str.split('\n').map(function(line) {
		              return '  ' + line;
		            }).join('\n').substr(2);
		          } else {
		            str = '\n' + str.split('\n').map(function(line) {
		              return '   ' + line;
		            }).join('\n');
		          }
		        }
		      } else {
		        str = ctx.stylize('[Circular]', 'special');
		      }
		    }
		    if (isUndefined(name)) {
		      if (array && key.match(/^\d+$/)) {
		        return str;
		      }
		      name = JSON.stringify('' + key);
		      if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
		        name = name.substr(1, name.length - 2);
		        name = ctx.stylize(name, 'name');
		      } else {
		        name = name.replace(/'/g, "\\'")
		                   .replace(/\\"/g, '"')
		                   .replace(/(^"|"$)/g, "'");
		        name = ctx.stylize(name, 'string');
		      }
		    }

		    return name + ': ' + str;
		  }


		  function reduceToSingleString(output, base, braces) {
		    var length = output.reduce(function(prev, cur) {
		      if (cur.indexOf('\n') >= 0) ;
		      return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
		    }, 0);

		    if (length > 60) {
		      return braces[0] +
		             (base === '' ? '' : base + '\n ') +
		             ' ' +
		             output.join(',\n  ') +
		             ' ' +
		             braces[1];
		    }

		    return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
		  }


		  // NOTE: These type checking functions intentionally don't use `instanceof`
		  // because it is fragile and can be easily faked with `Object.create()`.
		  function isArray$1(ar) {
		    return Array.isArray(ar);
		  }

		  function isBoolean(arg) {
		    return typeof arg === 'boolean';
		  }

		  function isNull(arg) {
		    return arg === null;
		  }

		  function isNullOrUndefined(arg) {
		    return arg == null;
		  }

		  function isNumber(arg) {
		    return typeof arg === 'number';
		  }

		  function isString$1(arg) {
		    return typeof arg === 'string';
		  }

		  function isSymbol(arg) {
		    return typeof arg === 'symbol';
		  }

		  function isUndefined(arg) {
		    return arg === void 0;
		  }

		  function isRegExp(re) {
		    return isObject(re) && objectToString(re) === '[object RegExp]';
		  }

		  function isObject(arg) {
		    return typeof arg === 'object' && arg !== null;
		  }

		  function isDate(d) {
		    return isObject(d) && objectToString(d) === '[object Date]';
		  }

		  function isError$1(e) {
		    return isObject(e) &&
		        (objectToString(e) === '[object Error]' || e instanceof Error);
		  }

		  function isFunction(arg) {
		    return typeof arg === 'function';
		  }

		  function isPrimitive(arg) {
		    return arg === null ||
		           typeof arg === 'boolean' ||
		           typeof arg === 'number' ||
		           typeof arg === 'string' ||
		           typeof arg === 'symbol' ||  // ES6 symbol
		           typeof arg === 'undefined';
		  }

		  function isBuffer$1(maybeBuf) {
		    return Buffer$1.isBuffer(maybeBuf);
		  }

		  function objectToString(o) {
		    return Object.prototype.toString.call(o);
		  }


		  function pad(n) {
		    return n < 10 ? '0' + n.toString(10) : n.toString(10);
		  }


		  var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
		                'Oct', 'Nov', 'Dec'];

		  // 26 Feb 16:19:34
		  function timestamp() {
		    var d = new Date();
		    var time = [pad(d.getHours()),
		                pad(d.getMinutes()),
		                pad(d.getSeconds())].join(':');
		    return [d.getDate(), months[d.getMonth()], time].join(' ');
		  }


		  // log is just a thin wrapper to console.log that prepends a timestamp
		  function log() {
		    console.log('%s - %s', timestamp(), format$1.apply(null, arguments));
		  }

		  function _extend(origin, add) {
		    // Don't do anything if add isn't an object
		    if (!add || !isObject(add)) return origin;

		    var keys = Object.keys(add);
		    var i = keys.length;
		    while (i--) {
		      origin[keys[i]] = add[keys[i]];
		    }
		    return origin;
		  }
		  function hasOwnProperty(obj, prop) {
		    return Object.prototype.hasOwnProperty.call(obj, prop);
		  }

		  var _polyfillNode_util = {
		    inherits: inherits$3,
		    _extend: _extend,
		    log: log,
		    isBuffer: isBuffer$1,
		    isPrimitive: isPrimitive,
		    isFunction: isFunction,
		    isError: isError$1,
		    isDate: isDate,
		    isObject: isObject,
		    isRegExp: isRegExp,
		    isUndefined: isUndefined,
		    isSymbol: isSymbol,
		    isString: isString$1,
		    isNumber: isNumber,
		    isNullOrUndefined: isNullOrUndefined,
		    isNull: isNull,
		    isBoolean: isBoolean,
		    isArray: isArray$1,
		    inspect: inspect,
		    deprecate: deprecate$1,
		    format: format$1,
		    debuglog: debuglog
		  };

		  var _polyfillNode_util$1 = /*#__PURE__*/Object.freeze({
		    __proto__: null,
		    format: format$1,
		    deprecate: deprecate$1,
		    debuglog: debuglog,
		    inspect: inspect,
		    isArray: isArray$1,
		    isBoolean: isBoolean,
		    isNull: isNull,
		    isNullOrUndefined: isNullOrUndefined,
		    isNumber: isNumber,
		    isString: isString$1,
		    isSymbol: isSymbol,
		    isUndefined: isUndefined,
		    isRegExp: isRegExp,
		    isObject: isObject,
		    isDate: isDate,
		    isError: isError$1,
		    isFunction: isFunction,
		    isPrimitive: isPrimitive,
		    isBuffer: isBuffer$1,
		    log: log,
		    inherits: inherits$3,
		    _extend: _extend,
		    'default': _polyfillNode_util
		  });

		  function BufferList() {
		    this.head = null;
		    this.tail = null;
		    this.length = 0;
		  }

		  BufferList.prototype.push = function (v) {
		    var entry = { data: v, next: null };
		    if (this.length > 0) this.tail.next = entry;else this.head = entry;
		    this.tail = entry;
		    ++this.length;
		  };

		  BufferList.prototype.unshift = function (v) {
		    var entry = { data: v, next: this.head };
		    if (this.length === 0) this.tail = entry;
		    this.head = entry;
		    ++this.length;
		  };

		  BufferList.prototype.shift = function () {
		    if (this.length === 0) return;
		    var ret = this.head.data;
		    if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
		    --this.length;
		    return ret;
		  };

		  BufferList.prototype.clear = function () {
		    this.head = this.tail = null;
		    this.length = 0;
		  };

		  BufferList.prototype.join = function (s) {
		    if (this.length === 0) return '';
		    var p = this.head;
		    var ret = '' + p.data;
		    while (p = p.next) {
		      ret += s + p.data;
		    }return ret;
		  };

		  BufferList.prototype.concat = function (n) {
		    if (this.length === 0) return Buffer$1.alloc(0);
		    if (this.length === 1) return this.head.data;
		    var ret = Buffer$1.allocUnsafe(n >>> 0);
		    var p = this.head;
		    var i = 0;
		    while (p) {
		      p.data.copy(ret, i);
		      i += p.data.length;
		      p = p.next;
		    }
		    return ret;
		  };

		  // Copyright Joyent, Inc. and other Node contributors.
		  var isBufferEncoding = Buffer$1.isEncoding
		    || function(encoding) {
		         switch (encoding && encoding.toLowerCase()) {
		           case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;
		           default: return false;
		         }
		       };


		  function assertEncoding(encoding) {
		    if (encoding && !isBufferEncoding(encoding)) {
		      throw new Error('Unknown encoding: ' + encoding);
		    }
		  }

		  // StringDecoder provides an interface for efficiently splitting a series of
		  // buffers into a series of JS strings without breaking apart multi-byte
		  // characters. CESU-8 is handled as part of the UTF-8 encoding.
		  //
		  // @TODO Handling all encodings inside a single object makes it very difficult
		  // to reason about this code, so it should be split up in the future.
		  // @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
		  // points as used by CESU-8.
		  function StringDecoder(encoding) {
		    this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
		    assertEncoding(encoding);
		    switch (this.encoding) {
		      case 'utf8':
		        // CESU-8 represents each of Surrogate Pair by 3-bytes
		        this.surrogateSize = 3;
		        break;
		      case 'ucs2':
		      case 'utf16le':
		        // UTF-16 represents each of Surrogate Pair by 2-bytes
		        this.surrogateSize = 2;
		        this.detectIncompleteChar = utf16DetectIncompleteChar;
		        break;
		      case 'base64':
		        // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
		        this.surrogateSize = 3;
		        this.detectIncompleteChar = base64DetectIncompleteChar;
		        break;
		      default:
		        this.write = passThroughWrite;
		        return;
		    }

		    // Enough space to store all bytes of a single character. UTF-8 needs 4
		    // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).
		    this.charBuffer = new Buffer$1(6);
		    // Number of bytes received for the current incomplete multi-byte character.
		    this.charReceived = 0;
		    // Number of bytes expected for the current incomplete multi-byte character.
		    this.charLength = 0;
		  }

		  // write decodes the given buffer and returns it as JS string that is
		  // guaranteed to not contain any partial multi-byte characters. Any partial
		  // character found at the end of the buffer is buffered up, and will be
		  // returned when calling write again with the remaining bytes.
		  //
		  // Note: Converting a Buffer containing an orphan surrogate to a String
		  // currently works, but converting a String to a Buffer (via `new Buffer`, or
		  // Buffer#write) will replace incomplete surrogates with the unicode
		  // replacement character. See https://codereview.chromium.org/121173009/ .
		  StringDecoder.prototype.write = function(buffer) {
		    var charStr = '';
		    // if our last write ended with an incomplete multibyte character
		    while (this.charLength) {
		      // determine how many remaining bytes this buffer has to offer for this char
		      var available = (buffer.length >= this.charLength - this.charReceived) ?
		          this.charLength - this.charReceived :
		          buffer.length;

		      // add the new bytes to the char buffer
		      buffer.copy(this.charBuffer, this.charReceived, 0, available);
		      this.charReceived += available;

		      if (this.charReceived < this.charLength) {
		        // still not enough chars in this buffer? wait for more ...
		        return '';
		      }

		      // remove bytes belonging to the current character from the buffer
		      buffer = buffer.slice(available, buffer.length);

		      // get the character that was split
		      charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);

		      // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
		      var charCode = charStr.charCodeAt(charStr.length - 1);
		      if (charCode >= 0xD800 && charCode <= 0xDBFF) {
		        this.charLength += this.surrogateSize;
		        charStr = '';
		        continue;
		      }
		      this.charReceived = this.charLength = 0;

		      // if there are no more bytes in this buffer, just emit our char
		      if (buffer.length === 0) {
		        return charStr;
		      }
		      break;
		    }

		    // determine and set charLength / charReceived
		    this.detectIncompleteChar(buffer);

		    var end = buffer.length;
		    if (this.charLength) {
		      // buffer the incomplete character bytes we got
		      buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
		      end -= this.charReceived;
		    }

		    charStr += buffer.toString(this.encoding, 0, end);

		    var end = charStr.length - 1;
		    var charCode = charStr.charCodeAt(end);
		    // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
		    if (charCode >= 0xD800 && charCode <= 0xDBFF) {
		      var size = this.surrogateSize;
		      this.charLength += size;
		      this.charReceived += size;
		      this.charBuffer.copy(this.charBuffer, size, 0, size);
		      buffer.copy(this.charBuffer, 0, 0, size);
		      return charStr.substring(0, end);
		    }

		    // or just emit the charStr
		    return charStr;
		  };

		  // detectIncompleteChar determines if there is an incomplete UTF-8 character at
		  // the end of the given buffer. If so, it sets this.charLength to the byte
		  // length that character, and sets this.charReceived to the number of bytes
		  // that are available for this character.
		  StringDecoder.prototype.detectIncompleteChar = function(buffer) {
		    // determine how many bytes we have to check at the end of this buffer
		    var i = (buffer.length >= 3) ? 3 : buffer.length;

		    // Figure out if one of the last i bytes of our buffer announces an
		    // incomplete char.
		    for (; i > 0; i--) {
		      var c = buffer[buffer.length - i];

		      // See http://en.wikipedia.org/wiki/UTF-8#Description

		      // 110XXXXX
		      if (i == 1 && c >> 5 == 0x06) {
		        this.charLength = 2;
		        break;
		      }

		      // 1110XXXX
		      if (i <= 2 && c >> 4 == 0x0E) {
		        this.charLength = 3;
		        break;
		      }

		      // 11110XXX
		      if (i <= 3 && c >> 3 == 0x1E) {
		        this.charLength = 4;
		        break;
		      }
		    }
		    this.charReceived = i;
		  };

		  StringDecoder.prototype.end = function(buffer) {
		    var res = '';
		    if (buffer && buffer.length)
		      res = this.write(buffer);

		    if (this.charReceived) {
		      var cr = this.charReceived;
		      var buf = this.charBuffer;
		      var enc = this.encoding;
		      res += buf.slice(0, cr).toString(enc);
		    }

		    return res;
		  };

		  function passThroughWrite(buffer) {
		    return buffer.toString(this.encoding);
		  }

		  function utf16DetectIncompleteChar(buffer) {
		    this.charReceived = buffer.length % 2;
		    this.charLength = this.charReceived ? 2 : 0;
		  }

		  function base64DetectIncompleteChar(buffer) {
		    this.charReceived = buffer.length % 3;
		    this.charLength = this.charReceived ? 3 : 0;
		  }

		  Readable.ReadableState = ReadableState;

		  var debug$2 = debuglog('stream');
		  inherits$3(Readable, EventEmitter$2);

		  function prependListener(emitter, event, fn) {
		    // Sadly this is not cacheable as some libraries bundle their own
		    // event emitter implementation with them.
		    if (typeof emitter.prependListener === 'function') {
		      return emitter.prependListener(event, fn);
		    } else {
		      // This is a hack to make sure that our error handler is attached before any
		      // userland ones.  NEVER DO THIS. This is here only because this code needs
		      // to continue to work with older versions of Node.js that do not include
		      // the prependListener() method. The goal is to eventually remove this hack.
		      if (!emitter._events || !emitter._events[event])
		        emitter.on(event, fn);
		      else if (Array.isArray(emitter._events[event]))
		        emitter._events[event].unshift(fn);
		      else
		        emitter._events[event] = [fn, emitter._events[event]];
		    }
		  }
		  function listenerCount (emitter, type) {
		    return emitter.listeners(type).length;
		  }
		  function ReadableState(options, stream) {

		    options = options || {};

		    // object stream flag. Used to make read(n) ignore n and to
		    // make all the buffer merging and length checks go away
		    this.objectMode = !!options.objectMode;

		    if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

		    // the point at which it stops calling _read() to fill the buffer
		    // Note: 0 is a valid value, means "don't call _read preemptively ever"
		    var hwm = options.highWaterMark;
		    var defaultHwm = this.objectMode ? 16 : 16 * 1024;
		    this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

		    // cast to ints.
		    this.highWaterMark = ~ ~this.highWaterMark;

		    // A linked list is used to store data chunks instead of an array because the
		    // linked list can remove elements from the beginning faster than
		    // array.shift()
		    this.buffer = new BufferList();
		    this.length = 0;
		    this.pipes = null;
		    this.pipesCount = 0;
		    this.flowing = null;
		    this.ended = false;
		    this.endEmitted = false;
		    this.reading = false;

		    // a flag to be able to tell if the onwrite cb is called immediately,
		    // or on a later tick.  We set this to true at first, because any
		    // actions that shouldn't happen until "later" should generally also
		    // not happen before the first write call.
		    this.sync = true;

		    // whenever we return null, then we set a flag to say
		    // that we're awaiting a 'readable' event emission.
		    this.needReadable = false;
		    this.emittedReadable = false;
		    this.readableListening = false;
		    this.resumeScheduled = false;

		    // Crypto is kind of old and crusty.  Historically, its default string
		    // encoding is 'binary' so we have to make this configurable.
		    // Everything else in the universe uses 'utf8', though.
		    this.defaultEncoding = options.defaultEncoding || 'utf8';

		    // when piping, we only care about 'readable' events that happen
		    // after read()ing all the bytes and not getting any pushback.
		    this.ranOut = false;

		    // the number of writers that are awaiting a drain event in .pipe()s
		    this.awaitDrain = 0;

		    // if true, a maybeReadMore has been scheduled
		    this.readingMore = false;

		    this.decoder = null;
		    this.encoding = null;
		    if (options.encoding) {
		      this.decoder = new StringDecoder(options.encoding);
		      this.encoding = options.encoding;
		    }
		  }
		  function Readable(options) {

		    if (!(this instanceof Readable)) return new Readable(options);

		    this._readableState = new ReadableState(options, this);

		    // legacy
		    this.readable = true;

		    if (options && typeof options.read === 'function') this._read = options.read;

		    EventEmitter$2.call(this);
		  }

		  // Manually shove something into the read() buffer.
		  // This returns true if the highWaterMark has not been hit yet,
		  // similar to how Writable.write() returns true if you should
		  // write() some more.
		  Readable.prototype.push = function (chunk, encoding) {
		    var state = this._readableState;

		    if (!state.objectMode && typeof chunk === 'string') {
		      encoding = encoding || state.defaultEncoding;
		      if (encoding !== state.encoding) {
		        chunk = Buffer$1.from(chunk, encoding);
		        encoding = '';
		      }
		    }

		    return readableAddChunk(this, state, chunk, encoding, false);
		  };

		  // Unshift should *always* be something directly out of read()
		  Readable.prototype.unshift = function (chunk) {
		    var state = this._readableState;
		    return readableAddChunk(this, state, chunk, '', true);
		  };

		  Readable.prototype.isPaused = function () {
		    return this._readableState.flowing === false;
		  };

		  function readableAddChunk(stream, state, chunk, encoding, addToFront) {
		    var er = chunkInvalid(state, chunk);
		    if (er) {
		      stream.emit('error', er);
		    } else if (chunk === null) {
		      state.reading = false;
		      onEofChunk(stream, state);
		    } else if (state.objectMode || chunk && chunk.length > 0) {
		      if (state.ended && !addToFront) {
		        var e = new Error('stream.push() after EOF');
		        stream.emit('error', e);
		      } else if (state.endEmitted && addToFront) {
		        var _e = new Error('stream.unshift() after end event');
		        stream.emit('error', _e);
		      } else {
		        var skipAdd;
		        if (state.decoder && !addToFront && !encoding) {
		          chunk = state.decoder.write(chunk);
		          skipAdd = !state.objectMode && chunk.length === 0;
		        }

		        if (!addToFront) state.reading = false;

		        // Don't add to the buffer if we've decoded to an empty string chunk and
		        // we're not in object mode
		        if (!skipAdd) {
		          // if we want the data now, just emit it.
		          if (state.flowing && state.length === 0 && !state.sync) {
		            stream.emit('data', chunk);
		            stream.read(0);
		          } else {
		            // update the buffer info.
		            state.length += state.objectMode ? 1 : chunk.length;
		            if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);

		            if (state.needReadable) emitReadable(stream);
		          }
		        }

		        maybeReadMore(stream, state);
		      }
		    } else if (!addToFront) {
		      state.reading = false;
		    }

		    return needMoreData(state);
		  }

		  // if it's past the high water mark, we can push in some more.
		  // Also, if we have no data yet, we can stand some
		  // more bytes.  This is to work around cases where hwm=0,
		  // such as the repl.  Also, if the push() triggered a
		  // readable event, and the user called read(largeNumber) such that
		  // needReadable was set, then we ought to push more, so that another
		  // 'readable' event will be triggered.
		  function needMoreData(state) {
		    return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
		  }

		  // backwards compatibility.
		  Readable.prototype.setEncoding = function (enc) {
		    this._readableState.decoder = new StringDecoder(enc);
		    this._readableState.encoding = enc;
		    return this;
		  };

		  // Don't raise the hwm > 8MB
		  var MAX_HWM = 0x800000;
		  function computeNewHighWaterMark(n) {
		    if (n >= MAX_HWM) {
		      n = MAX_HWM;
		    } else {
		      // Get the next highest power of 2 to prevent increasing hwm excessively in
		      // tiny amounts
		      n--;
		      n |= n >>> 1;
		      n |= n >>> 2;
		      n |= n >>> 4;
		      n |= n >>> 8;
		      n |= n >>> 16;
		      n++;
		    }
		    return n;
		  }

		  // This function is designed to be inlinable, so please take care when making
		  // changes to the function body.
		  function howMuchToRead(n, state) {
		    if (n <= 0 || state.length === 0 && state.ended) return 0;
		    if (state.objectMode) return 1;
		    if (n !== n) {
		      // Only flow one buffer at a time
		      if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
		    }
		    // If we're asking for more than the current hwm, then raise the hwm.
		    if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
		    if (n <= state.length) return n;
		    // Don't have enough
		    if (!state.ended) {
		      state.needReadable = true;
		      return 0;
		    }
		    return state.length;
		  }

		  // you can override either this method, or the async _read(n) below.
		  Readable.prototype.read = function (n) {
		    debug$2('read', n);
		    n = parseInt(n, 10);
		    var state = this._readableState;
		    var nOrig = n;

		    if (n !== 0) state.emittedReadable = false;

		    // if we're doing read(0) to trigger a readable event, but we
		    // already have a bunch of data in the buffer, then just trigger
		    // the 'readable' event and move on.
		    if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
		      debug$2('read: emitReadable', state.length, state.ended);
		      if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
		      return null;
		    }

		    n = howMuchToRead(n, state);

		    // if we've ended, and we're now clear, then finish it up.
		    if (n === 0 && state.ended) {
		      if (state.length === 0) endReadable(this);
		      return null;
		    }

		    // All the actual chunk generation logic needs to be
		    // *below* the call to _read.  The reason is that in certain
		    // synthetic stream cases, such as passthrough streams, _read
		    // may be a completely synchronous operation which may change
		    // the state of the read buffer, providing enough data when
		    // before there was *not* enough.
		    //
		    // So, the steps are:
		    // 1. Figure out what the state of things will be after we do
		    // a read from the buffer.
		    //
		    // 2. If that resulting state will trigger a _read, then call _read.
		    // Note that this may be asynchronous, or synchronous.  Yes, it is
		    // deeply ugly to write APIs this way, but that still doesn't mean
		    // that the Readable class should behave improperly, as streams are
		    // designed to be sync/async agnostic.
		    // Take note if the _read call is sync or async (ie, if the read call
		    // has returned yet), so that we know whether or not it's safe to emit
		    // 'readable' etc.
		    //
		    // 3. Actually pull the requested chunks out of the buffer and return.

		    // if we need a readable event, then we need to do some reading.
		    var doRead = state.needReadable;
		    debug$2('need readable', doRead);

		    // if we currently have less than the highWaterMark, then also read some
		    if (state.length === 0 || state.length - n < state.highWaterMark) {
		      doRead = true;
		      debug$2('length less than watermark', doRead);
		    }

		    // however, if we've ended, then there's no point, and if we're already
		    // reading, then it's unnecessary.
		    if (state.ended || state.reading) {
		      doRead = false;
		      debug$2('reading or ended', doRead);
		    } else if (doRead) {
		      debug$2('do read');
		      state.reading = true;
		      state.sync = true;
		      // if the length is currently zero, then we *need* a readable event.
		      if (state.length === 0) state.needReadable = true;
		      // call internal read method
		      this._read(state.highWaterMark);
		      state.sync = false;
		      // If _read pushed data synchronously, then `reading` will be false,
		      // and we need to re-evaluate how much data we can return to the user.
		      if (!state.reading) n = howMuchToRead(nOrig, state);
		    }

		    var ret;
		    if (n > 0) ret = fromList(n, state);else ret = null;

		    if (ret === null) {
		      state.needReadable = true;
		      n = 0;
		    } else {
		      state.length -= n;
		    }

		    if (state.length === 0) {
		      // If we have nothing in the buffer, then we want to know
		      // as soon as we *do* get something into the buffer.
		      if (!state.ended) state.needReadable = true;

		      // If we tried to read() past the EOF, then emit end on the next tick.
		      if (nOrig !== n && state.ended) endReadable(this);
		    }

		    if (ret !== null) this.emit('data', ret);

		    return ret;
		  };

		  function chunkInvalid(state, chunk) {
		    var er = null;
		    if (!Buffer$1.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== null && chunk !== undefined && !state.objectMode) {
		      er = new TypeError('Invalid non-string/buffer chunk');
		    }
		    return er;
		  }

		  function onEofChunk(stream, state) {
		    if (state.ended) return;
		    if (state.decoder) {
		      var chunk = state.decoder.end();
		      if (chunk && chunk.length) {
		        state.buffer.push(chunk);
		        state.length += state.objectMode ? 1 : chunk.length;
		      }
		    }
		    state.ended = true;

		    // emit 'readable' now to make sure it gets picked up.
		    emitReadable(stream);
		  }

		  // Don't emit readable right away in sync mode, because this can trigger
		  // another read() call => stack overflow.  This way, it might trigger
		  // a nextTick recursion warning, but that's not so bad.
		  function emitReadable(stream) {
		    var state = stream._readableState;
		    state.needReadable = false;
		    if (!state.emittedReadable) {
		      debug$2('emitReadable', state.flowing);
		      state.emittedReadable = true;
		      if (state.sync) nextTick(emitReadable_, stream);else emitReadable_(stream);
		    }
		  }

		  function emitReadable_(stream) {
		    debug$2('emit readable');
		    stream.emit('readable');
		    flow(stream);
		  }

		  // at this point, the user has presumably seen the 'readable' event,
		  // and called read() to consume some data.  that may have triggered
		  // in turn another _read(n) call, in which case reading = true if
		  // it's in progress.
		  // However, if we're not ended, or reading, and the length < hwm,
		  // then go ahead and try to read some more preemptively.
		  function maybeReadMore(stream, state) {
		    if (!state.readingMore) {
		      state.readingMore = true;
		      nextTick(maybeReadMore_, stream, state);
		    }
		  }

		  function maybeReadMore_(stream, state) {
		    var len = state.length;
		    while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
		      debug$2('maybeReadMore read 0');
		      stream.read(0);
		      if (len === state.length)
		        // didn't get any data, stop spinning.
		        break;else len = state.length;
		    }
		    state.readingMore = false;
		  }

		  // abstract method.  to be overridden in specific implementation classes.
		  // call cb(er, data) where data is <= n in length.
		  // for virtual (non-string, non-buffer) streams, "length" is somewhat
		  // arbitrary, and perhaps not very meaningful.
		  Readable.prototype._read = function (n) {
		    this.emit('error', new Error('not implemented'));
		  };

		  Readable.prototype.pipe = function (dest, pipeOpts) {
		    var src = this;
		    var state = this._readableState;

		    switch (state.pipesCount) {
		      case 0:
		        state.pipes = dest;
		        break;
		      case 1:
		        state.pipes = [state.pipes, dest];
		        break;
		      default:
		        state.pipes.push(dest);
		        break;
		    }
		    state.pipesCount += 1;
		    debug$2('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

		    var doEnd = (!pipeOpts || pipeOpts.end !== false);

		    var endFn = doEnd ? onend : cleanup;
		    if (state.endEmitted) nextTick(endFn);else src.once('end', endFn);

		    dest.on('unpipe', onunpipe);
		    function onunpipe(readable) {
		      debug$2('onunpipe');
		      if (readable === src) {
		        cleanup();
		      }
		    }

		    function onend() {
		      debug$2('onend');
		      dest.end();
		    }

		    // when the dest drains, it reduces the awaitDrain counter
		    // on the source.  This would be more elegant with a .once()
		    // handler in flow(), but adding and removing repeatedly is
		    // too slow.
		    var ondrain = pipeOnDrain(src);
		    dest.on('drain', ondrain);

		    var cleanedUp = false;
		    function cleanup() {
		      debug$2('cleanup');
		      // cleanup event handlers once the pipe is broken
		      dest.removeListener('close', onclose);
		      dest.removeListener('finish', onfinish);
		      dest.removeListener('drain', ondrain);
		      dest.removeListener('error', onerror);
		      dest.removeListener('unpipe', onunpipe);
		      src.removeListener('end', onend);
		      src.removeListener('end', cleanup);
		      src.removeListener('data', ondata);

		      cleanedUp = true;

		      // if the reader is waiting for a drain event from this
		      // specific writer, then it would cause it to never start
		      // flowing again.
		      // So, if this is awaiting a drain, then we just call it now.
		      // If we don't know, then assume that we are waiting for one.
		      if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
		    }

		    // If the user pushes more data while we're writing to dest then we'll end up
		    // in ondata again. However, we only want to increase awaitDrain once because
		    // dest will only emit one 'drain' event for the multiple writes.
		    // => Introduce a guard on increasing awaitDrain.
		    var increasedAwaitDrain = false;
		    src.on('data', ondata);
		    function ondata(chunk) {
		      debug$2('ondata');
		      increasedAwaitDrain = false;
		      var ret = dest.write(chunk);
		      if (false === ret && !increasedAwaitDrain) {
		        // If the user unpiped during `dest.write()`, it is possible
		        // to get stuck in a permanently paused state if that write
		        // also returned false.
		        // => Check whether `dest` is still a piping destination.
		        if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
		          debug$2('false write response, pause', src._readableState.awaitDrain);
		          src._readableState.awaitDrain++;
		          increasedAwaitDrain = true;
		        }
		        src.pause();
		      }
		    }

		    // if the dest has an error, then stop piping into it.
		    // however, don't suppress the throwing behavior for this.
		    function onerror(er) {
		      debug$2('onerror', er);
		      unpipe();
		      dest.removeListener('error', onerror);
		      if (listenerCount(dest, 'error') === 0) dest.emit('error', er);
		    }

		    // Make sure our error handler is attached before userland ones.
		    prependListener(dest, 'error', onerror);

		    // Both close and finish should trigger unpipe, but only once.
		    function onclose() {
		      dest.removeListener('finish', onfinish);
		      unpipe();
		    }
		    dest.once('close', onclose);
		    function onfinish() {
		      debug$2('onfinish');
		      dest.removeListener('close', onclose);
		      unpipe();
		    }
		    dest.once('finish', onfinish);

		    function unpipe() {
		      debug$2('unpipe');
		      src.unpipe(dest);
		    }

		    // tell the dest that it's being piped to
		    dest.emit('pipe', src);

		    // start the flow if it hasn't been started already.
		    if (!state.flowing) {
		      debug$2('pipe resume');
		      src.resume();
		    }

		    return dest;
		  };

		  function pipeOnDrain(src) {
		    return function () {
		      var state = src._readableState;
		      debug$2('pipeOnDrain', state.awaitDrain);
		      if (state.awaitDrain) state.awaitDrain--;
		      if (state.awaitDrain === 0 && src.listeners('data').length) {
		        state.flowing = true;
		        flow(src);
		      }
		    };
		  }

		  Readable.prototype.unpipe = function (dest) {
		    var state = this._readableState;

		    // if we're not piping anywhere, then do nothing.
		    if (state.pipesCount === 0) return this;

		    // just one destination.  most common case.
		    if (state.pipesCount === 1) {
		      // passed in one, but it's not the right one.
		      if (dest && dest !== state.pipes) return this;

		      if (!dest) dest = state.pipes;

		      // got a match.
		      state.pipes = null;
		      state.pipesCount = 0;
		      state.flowing = false;
		      if (dest) dest.emit('unpipe', this);
		      return this;
		    }

		    // slow case. multiple pipe destinations.

		    if (!dest) {
		      // remove all.
		      var dests = state.pipes;
		      var len = state.pipesCount;
		      state.pipes = null;
		      state.pipesCount = 0;
		      state.flowing = false;

		      for (var _i = 0; _i < len; _i++) {
		        dests[_i].emit('unpipe', this);
		      }return this;
		    }

		    // try to find the right one.
		    var i = indexOf(state.pipes, dest);
		    if (i === -1) return this;

		    state.pipes.splice(i, 1);
		    state.pipesCount -= 1;
		    if (state.pipesCount === 1) state.pipes = state.pipes[0];

		    dest.emit('unpipe', this);

		    return this;
		  };

		  // set up data events if they are asked for
		  // Ensure readable listeners eventually get something
		  Readable.prototype.on = function (ev, fn) {
		    var res = EventEmitter$2.prototype.on.call(this, ev, fn);

		    if (ev === 'data') {
		      // Start flowing on next tick if stream isn't explicitly paused
		      if (this._readableState.flowing !== false) this.resume();
		    } else if (ev === 'readable') {
		      var state = this._readableState;
		      if (!state.endEmitted && !state.readableListening) {
		        state.readableListening = state.needReadable = true;
		        state.emittedReadable = false;
		        if (!state.reading) {
		          nextTick(nReadingNextTick, this);
		        } else if (state.length) {
		          emitReadable(this);
		        }
		      }
		    }

		    return res;
		  };
		  Readable.prototype.addListener = Readable.prototype.on;

		  function nReadingNextTick(self) {
		    debug$2('readable nexttick read 0');
		    self.read(0);
		  }

		  // pause() and resume() are remnants of the legacy readable stream API
		  // If the user uses them, then switch into old mode.
		  Readable.prototype.resume = function () {
		    var state = this._readableState;
		    if (!state.flowing) {
		      debug$2('resume');
		      state.flowing = true;
		      resume(this, state);
		    }
		    return this;
		  };

		  function resume(stream, state) {
		    if (!state.resumeScheduled) {
		      state.resumeScheduled = true;
		      nextTick(resume_, stream, state);
		    }
		  }

		  function resume_(stream, state) {
		    if (!state.reading) {
		      debug$2('resume read 0');
		      stream.read(0);
		    }

		    state.resumeScheduled = false;
		    state.awaitDrain = 0;
		    stream.emit('resume');
		    flow(stream);
		    if (state.flowing && !state.reading) stream.read(0);
		  }

		  Readable.prototype.pause = function () {
		    debug$2('call pause flowing=%j', this._readableState.flowing);
		    if (false !== this._readableState.flowing) {
		      debug$2('pause');
		      this._readableState.flowing = false;
		      this.emit('pause');
		    }
		    return this;
		  };

		  function flow(stream) {
		    var state = stream._readableState;
		    debug$2('flow', state.flowing);
		    while (state.flowing && stream.read() !== null) {}
		  }

		  // wrap an old-style stream as the async data source.
		  // This is *not* part of the readable stream interface.
		  // It is an ugly unfortunate mess of history.
		  Readable.prototype.wrap = function (stream) {
		    var state = this._readableState;
		    var paused = false;

		    var self = this;
		    stream.on('end', function () {
		      debug$2('wrapped end');
		      if (state.decoder && !state.ended) {
		        var chunk = state.decoder.end();
		        if (chunk && chunk.length) self.push(chunk);
		      }

		      self.push(null);
		    });

		    stream.on('data', function (chunk) {
		      debug$2('wrapped data');
		      if (state.decoder) chunk = state.decoder.write(chunk);

		      // don't skip over falsy values in objectMode
		      if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

		      var ret = self.push(chunk);
		      if (!ret) {
		        paused = true;
		        stream.pause();
		      }
		    });

		    // proxy all the other methods.
		    // important when wrapping filters and duplexes.
		    for (var i in stream) {
		      if (this[i] === undefined && typeof stream[i] === 'function') {
		        this[i] = function (method) {
		          return function () {
		            return stream[method].apply(stream, arguments);
		          };
		        }(i);
		      }
		    }

		    // proxy certain important events.
		    var events = ['error', 'close', 'destroy', 'pause', 'resume'];
		    forEach(events, function (ev) {
		      stream.on(ev, self.emit.bind(self, ev));
		    });

		    // when we try to consume some more bytes, simply unpause the
		    // underlying stream.
		    self._read = function (n) {
		      debug$2('wrapped _read', n);
		      if (paused) {
		        paused = false;
		        stream.resume();
		      }
		    };

		    return self;
		  };

		  // exposed for testing purposes only.
		  Readable._fromList = fromList;

		  // Pluck off n bytes from an array of buffers.
		  // Length is the combined lengths of all the buffers in the list.
		  // This function is designed to be inlinable, so please take care when making
		  // changes to the function body.
		  function fromList(n, state) {
		    // nothing buffered
		    if (state.length === 0) return null;

		    var ret;
		    if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
		      // read it all, truncate the list
		      if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
		      state.buffer.clear();
		    } else {
		      // read part of list
		      ret = fromListPartial(n, state.buffer, state.decoder);
		    }

		    return ret;
		  }

		  // Extracts only enough buffered data to satisfy the amount requested.
		  // This function is designed to be inlinable, so please take care when making
		  // changes to the function body.
		  function fromListPartial(n, list, hasStrings) {
		    var ret;
		    if (n < list.head.data.length) {
		      // slice is the same for buffers and strings
		      ret = list.head.data.slice(0, n);
		      list.head.data = list.head.data.slice(n);
		    } else if (n === list.head.data.length) {
		      // first chunk is a perfect match
		      ret = list.shift();
		    } else {
		      // result spans more than one buffer
		      ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
		    }
		    return ret;
		  }

		  // Copies a specified amount of characters from the list of buffered data
		  // chunks.
		  // This function is designed to be inlinable, so please take care when making
		  // changes to the function body.
		  function copyFromBufferString(n, list) {
		    var p = list.head;
		    var c = 1;
		    var ret = p.data;
		    n -= ret.length;
		    while (p = p.next) {
		      var str = p.data;
		      var nb = n > str.length ? str.length : n;
		      if (nb === str.length) ret += str;else ret += str.slice(0, n);
		      n -= nb;
		      if (n === 0) {
		        if (nb === str.length) {
		          ++c;
		          if (p.next) list.head = p.next;else list.head = list.tail = null;
		        } else {
		          list.head = p;
		          p.data = str.slice(nb);
		        }
		        break;
		      }
		      ++c;
		    }
		    list.length -= c;
		    return ret;
		  }

		  // Copies a specified amount of bytes from the list of buffered data chunks.
		  // This function is designed to be inlinable, so please take care when making
		  // changes to the function body.
		  function copyFromBuffer(n, list) {
		    var ret = Buffer$1.allocUnsafe(n);
		    var p = list.head;
		    var c = 1;
		    p.data.copy(ret);
		    n -= p.data.length;
		    while (p = p.next) {
		      var buf = p.data;
		      var nb = n > buf.length ? buf.length : n;
		      buf.copy(ret, ret.length - n, 0, nb);
		      n -= nb;
		      if (n === 0) {
		        if (nb === buf.length) {
		          ++c;
		          if (p.next) list.head = p.next;else list.head = list.tail = null;
		        } else {
		          list.head = p;
		          p.data = buf.slice(nb);
		        }
		        break;
		      }
		      ++c;
		    }
		    list.length -= c;
		    return ret;
		  }

		  function endReadable(stream) {
		    var state = stream._readableState;

		    // If we get here before consuming all the bytes, then that is a
		    // bug in node.  Should never happen.
		    if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

		    if (!state.endEmitted) {
		      state.ended = true;
		      nextTick(endReadableNT, state, stream);
		    }
		  }

		  function endReadableNT(state, stream) {
		    // Check that we didn't get one last unshift.
		    if (!state.endEmitted && state.length === 0) {
		      state.endEmitted = true;
		      stream.readable = false;
		      stream.emit('end');
		    }
		  }

		  function forEach(xs, f) {
		    for (var i = 0, l = xs.length; i < l; i++) {
		      f(xs[i], i);
		    }
		  }

		  function indexOf(xs, x) {
		    for (var i = 0, l = xs.length; i < l; i++) {
		      if (xs[i] === x) return i;
		    }
		    return -1;
		  }

		  // A bit simpler than readable streams.
		  Writable.WritableState = WritableState;
		  inherits$3(Writable, EventEmitter$2);

		  function nop() {}

		  function WriteReq(chunk, encoding, cb) {
		    this.chunk = chunk;
		    this.encoding = encoding;
		    this.callback = cb;
		    this.next = null;
		  }

		  function WritableState(options, stream) {
		    Object.defineProperty(this, 'buffer', {
		      get: deprecate$1(function () {
		        return this.getBuffer();
		      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.')
		    });
		    options = options || {};

		    // object stream flag to indicate whether or not this stream
		    // contains buffers or objects.
		    this.objectMode = !!options.objectMode;

		    if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

		    // the point at which write() starts returning false
		    // Note: 0 is a valid value, means that we always return false if
		    // the entire buffer is not flushed immediately on write()
		    var hwm = options.highWaterMark;
		    var defaultHwm = this.objectMode ? 16 : 16 * 1024;
		    this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

		    // cast to ints.
		    this.highWaterMark = ~ ~this.highWaterMark;

		    this.needDrain = false;
		    // at the start of calling end()
		    this.ending = false;
		    // when end() has been called, and returned
		    this.ended = false;
		    // when 'finish' is emitted
		    this.finished = false;

		    // should we decode strings into buffers before passing to _write?
		    // this is here so that some node-core streams can optimize string
		    // handling at a lower level.
		    var noDecode = options.decodeStrings === false;
		    this.decodeStrings = !noDecode;

		    // Crypto is kind of old and crusty.  Historically, its default string
		    // encoding is 'binary' so we have to make this configurable.
		    // Everything else in the universe uses 'utf8', though.
		    this.defaultEncoding = options.defaultEncoding || 'utf8';

		    // not an actual buffer we keep track of, but a measurement
		    // of how much we're waiting to get pushed to some underlying
		    // socket or file.
		    this.length = 0;

		    // a flag to see when we're in the middle of a write.
		    this.writing = false;

		    // when true all writes will be buffered until .uncork() call
		    this.corked = 0;

		    // a flag to be able to tell if the onwrite cb is called immediately,
		    // or on a later tick.  We set this to true at first, because any
		    // actions that shouldn't happen until "later" should generally also
		    // not happen before the first write call.
		    this.sync = true;

		    // a flag to know if we're processing previously buffered items, which
		    // may call the _write() callback in the same tick, so that we don't
		    // end up in an overlapped onwrite situation.
		    this.bufferProcessing = false;

		    // the callback that's passed to _write(chunk,cb)
		    this.onwrite = function (er) {
		      onwrite(stream, er);
		    };

		    // the callback that the user supplies to write(chunk,encoding,cb)
		    this.writecb = null;

		    // the amount that is being written when _write is called.
		    this.writelen = 0;

		    this.bufferedRequest = null;
		    this.lastBufferedRequest = null;

		    // number of pending user-supplied write callbacks
		    // this must be 0 before 'finish' can be emitted
		    this.pendingcb = 0;

		    // emit prefinish if the only thing we're waiting for is _write cbs
		    // This is relevant for synchronous Transform streams
		    this.prefinished = false;

		    // True if the error was already emitted and should not be thrown again
		    this.errorEmitted = false;

		    // count buffered requests
		    this.bufferedRequestCount = 0;

		    // allocate the first CorkedRequest, there is always
		    // one allocated and free to use, and we maintain at most two
		    this.corkedRequestsFree = new CorkedRequest(this);
		  }

		  WritableState.prototype.getBuffer = function writableStateGetBuffer() {
		    var current = this.bufferedRequest;
		    var out = [];
		    while (current) {
		      out.push(current);
		      current = current.next;
		    }
		    return out;
		  };
		  function Writable(options) {

		    // Writable ctor is applied to Duplexes, though they're not
		    // instanceof Writable, they're instanceof Readable.
		    if (!(this instanceof Writable) && !(this instanceof Duplex)) return new Writable(options);

		    this._writableState = new WritableState(options, this);

		    // legacy.
		    this.writable = true;

		    if (options) {
		      if (typeof options.write === 'function') this._write = options.write;

		      if (typeof options.writev === 'function') this._writev = options.writev;
		    }

		    EventEmitter$2.call(this);
		  }

		  // Otherwise people can pipe Writable streams, which is just wrong.
		  Writable.prototype.pipe = function () {
		    this.emit('error', new Error('Cannot pipe, not readable'));
		  };

		  function writeAfterEnd(stream, cb) {
		    var er = new Error('write after end');
		    // TODO: defer error events consistently everywhere, not just the cb
		    stream.emit('error', er);
		    nextTick(cb, er);
		  }

		  // If we get something that is not a buffer, string, null, or undefined,
		  // and we're not in objectMode, then that's an error.
		  // Otherwise stream chunks are all considered to be of length=1, and the
		  // watermarks determine how many objects to keep in the buffer, rather than
		  // how many bytes or characters.
		  function validChunk(stream, state, chunk, cb) {
		    var valid = true;
		    var er = false;
		    // Always throw error if a null is written
		    // if we are not in object mode then throw
		    // if it is not a buffer, string, or undefined.
		    if (chunk === null) {
		      er = new TypeError('May not write null values to stream');
		    } else if (!Buffer$1.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
		      er = new TypeError('Invalid non-string/buffer chunk');
		    }
		    if (er) {
		      stream.emit('error', er);
		      nextTick(cb, er);
		      valid = false;
		    }
		    return valid;
		  }

		  Writable.prototype.write = function (chunk, encoding, cb) {
		    var state = this._writableState;
		    var ret = false;

		    if (typeof encoding === 'function') {
		      cb = encoding;
		      encoding = null;
		    }

		    if (Buffer$1.isBuffer(chunk)) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;

		    if (typeof cb !== 'function') cb = nop;

		    if (state.ended) writeAfterEnd(this, cb);else if (validChunk(this, state, chunk, cb)) {
		      state.pendingcb++;
		      ret = writeOrBuffer(this, state, chunk, encoding, cb);
		    }

		    return ret;
		  };

		  Writable.prototype.cork = function () {
		    var state = this._writableState;

		    state.corked++;
		  };

		  Writable.prototype.uncork = function () {
		    var state = this._writableState;

		    if (state.corked) {
		      state.corked--;

		      if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
		    }
		  };

		  Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
		    // node::ParseEncoding() requires lower case.
		    if (typeof encoding === 'string') encoding = encoding.toLowerCase();
		    if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
		    this._writableState.defaultEncoding = encoding;
		    return this;
		  };

		  function decodeChunk(state, chunk, encoding) {
		    if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
		      chunk = Buffer$1.from(chunk, encoding);
		    }
		    return chunk;
		  }

		  // if we're already writing something, then just put this
		  // in the queue, and wait our turn.  Otherwise, call _write
		  // If we return false, then we need a drain event, so set that flag.
		  function writeOrBuffer(stream, state, chunk, encoding, cb) {
		    chunk = decodeChunk(state, chunk, encoding);

		    if (Buffer$1.isBuffer(chunk)) encoding = 'buffer';
		    var len = state.objectMode ? 1 : chunk.length;

		    state.length += len;

		    var ret = state.length < state.highWaterMark;
		    // we must ensure that previous needDrain will not be reset to false.
		    if (!ret) state.needDrain = true;

		    if (state.writing || state.corked) {
		      var last = state.lastBufferedRequest;
		      state.lastBufferedRequest = new WriteReq(chunk, encoding, cb);
		      if (last) {
		        last.next = state.lastBufferedRequest;
		      } else {
		        state.bufferedRequest = state.lastBufferedRequest;
		      }
		      state.bufferedRequestCount += 1;
		    } else {
		      doWrite(stream, state, false, len, chunk, encoding, cb);
		    }

		    return ret;
		  }

		  function doWrite(stream, state, writev, len, chunk, encoding, cb) {
		    state.writelen = len;
		    state.writecb = cb;
		    state.writing = true;
		    state.sync = true;
		    if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
		    state.sync = false;
		  }

		  function onwriteError(stream, state, sync, er, cb) {
		    --state.pendingcb;
		    if (sync) nextTick(cb, er);else cb(er);

		    stream._writableState.errorEmitted = true;
		    stream.emit('error', er);
		  }

		  function onwriteStateUpdate(state) {
		    state.writing = false;
		    state.writecb = null;
		    state.length -= state.writelen;
		    state.writelen = 0;
		  }

		  function onwrite(stream, er) {
		    var state = stream._writableState;
		    var sync = state.sync;
		    var cb = state.writecb;

		    onwriteStateUpdate(state);

		    if (er) onwriteError(stream, state, sync, er, cb);else {
		      // Check if we're actually ready to finish, but don't emit yet
		      var finished = needFinish(state);

		      if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
		        clearBuffer(stream, state);
		      }

		      if (sync) {
		        /*<replacement>*/
		          nextTick(afterWrite, stream, state, finished, cb);
		        /*</replacement>*/
		      } else {
		          afterWrite(stream, state, finished, cb);
		        }
		    }
		  }

		  function afterWrite(stream, state, finished, cb) {
		    if (!finished) onwriteDrain(stream, state);
		    state.pendingcb--;
		    cb();
		    finishMaybe(stream, state);
		  }

		  // Must force callback to be called on nextTick, so that we don't
		  // emit 'drain' before the write() consumer gets the 'false' return
		  // value, and has a chance to attach a 'drain' listener.
		  function onwriteDrain(stream, state) {
		    if (state.length === 0 && state.needDrain) {
		      state.needDrain = false;
		      stream.emit('drain');
		    }
		  }

		  // if there's something in the buffer waiting, then process it
		  function clearBuffer(stream, state) {
		    state.bufferProcessing = true;
		    var entry = state.bufferedRequest;

		    if (stream._writev && entry && entry.next) {
		      // Fast case, write everything using _writev()
		      var l = state.bufferedRequestCount;
		      var buffer = new Array(l);
		      var holder = state.corkedRequestsFree;
		      holder.entry = entry;

		      var count = 0;
		      while (entry) {
		        buffer[count] = entry;
		        entry = entry.next;
		        count += 1;
		      }

		      doWrite(stream, state, true, state.length, buffer, '', holder.finish);

		      // doWrite is almost always async, defer these to save a bit of time
		      // as the hot path ends with doWrite
		      state.pendingcb++;
		      state.lastBufferedRequest = null;
		      if (holder.next) {
		        state.corkedRequestsFree = holder.next;
		        holder.next = null;
		      } else {
		        state.corkedRequestsFree = new CorkedRequest(state);
		      }
		    } else {
		      // Slow case, write chunks one-by-one
		      while (entry) {
		        var chunk = entry.chunk;
		        var encoding = entry.encoding;
		        var cb = entry.callback;
		        var len = state.objectMode ? 1 : chunk.length;

		        doWrite(stream, state, false, len, chunk, encoding, cb);
		        entry = entry.next;
		        // if we didn't call the onwrite immediately, then
		        // it means that we need to wait until it does.
		        // also, that means that the chunk and cb are currently
		        // being processed, so move the buffer counter past them.
		        if (state.writing) {
		          break;
		        }
		      }

		      if (entry === null) state.lastBufferedRequest = null;
		    }

		    state.bufferedRequestCount = 0;
		    state.bufferedRequest = entry;
		    state.bufferProcessing = false;
		  }

		  Writable.prototype._write = function (chunk, encoding, cb) {
		    cb(new Error('not implemented'));
		  };

		  Writable.prototype._writev = null;

		  Writable.prototype.end = function (chunk, encoding, cb) {
		    var state = this._writableState;

		    if (typeof chunk === 'function') {
		      cb = chunk;
		      chunk = null;
		      encoding = null;
		    } else if (typeof encoding === 'function') {
		      cb = encoding;
		      encoding = null;
		    }

		    if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

		    // .end() fully uncorks
		    if (state.corked) {
		      state.corked = 1;
		      this.uncork();
		    }

		    // ignore unnecessary end() calls.
		    if (!state.ending && !state.finished) endWritable(this, state, cb);
		  };

		  function needFinish(state) {
		    return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
		  }

		  function prefinish(stream, state) {
		    if (!state.prefinished) {
		      state.prefinished = true;
		      stream.emit('prefinish');
		    }
		  }

		  function finishMaybe(stream, state) {
		    var need = needFinish(state);
		    if (need) {
		      if (state.pendingcb === 0) {
		        prefinish(stream, state);
		        state.finished = true;
		        stream.emit('finish');
		      } else {
		        prefinish(stream, state);
		      }
		    }
		    return need;
		  }

		  function endWritable(stream, state, cb) {
		    state.ending = true;
		    finishMaybe(stream, state);
		    if (cb) {
		      if (state.finished) nextTick(cb);else stream.once('finish', cb);
		    }
		    state.ended = true;
		    stream.writable = false;
		  }

		  // It seems a linked list but it is not
		  // there will be only 2 of these for each stream
		  function CorkedRequest(state) {
		    var _this = this;

		    this.next = null;
		    this.entry = null;

		    this.finish = function (err) {
		      var entry = _this.entry;
		      _this.entry = null;
		      while (entry) {
		        var cb = entry.callback;
		        state.pendingcb--;
		        cb(err);
		        entry = entry.next;
		      }
		      if (state.corkedRequestsFree) {
		        state.corkedRequestsFree.next = _this;
		      } else {
		        state.corkedRequestsFree = _this;
		      }
		    };
		  }

		  inherits$3(Duplex, Readable);

		  var keys = Object.keys(Writable.prototype);
		  for (var v = 0; v < keys.length; v++) {
		    var method = keys[v];
		    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
		  }
		  function Duplex(options) {
		    if (!(this instanceof Duplex)) return new Duplex(options);

		    Readable.call(this, options);
		    Writable.call(this, options);

		    if (options && options.readable === false) this.readable = false;

		    if (options && options.writable === false) this.writable = false;

		    this.allowHalfOpen = true;
		    if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

		    this.once('end', onend);
		  }

		  // the no-half-open enforcer
		  function onend() {
		    // if we allow half-open state, or if the writable side ended,
		    // then we're ok.
		    if (this.allowHalfOpen || this._writableState.ended) return;

		    // no more data can be written.
		    // But allow more writes to happen in this tick.
		    nextTick(onEndNT, this);
		  }

		  function onEndNT(self) {
		    self.end();
		  }

		  // a transform stream is a readable/writable stream where you do
		  inherits$3(Transform, Duplex);

		  function TransformState(stream) {
		    this.afterTransform = function (er, data) {
		      return afterTransform(stream, er, data);
		    };

		    this.needTransform = false;
		    this.transforming = false;
		    this.writecb = null;
		    this.writechunk = null;
		    this.writeencoding = null;
		  }

		  function afterTransform(stream, er, data) {
		    var ts = stream._transformState;
		    ts.transforming = false;

		    var cb = ts.writecb;

		    if (!cb) return stream.emit('error', new Error('no writecb in Transform class'));

		    ts.writechunk = null;
		    ts.writecb = null;

		    if (data !== null && data !== undefined) stream.push(data);

		    cb(er);

		    var rs = stream._readableState;
		    rs.reading = false;
		    if (rs.needReadable || rs.length < rs.highWaterMark) {
		      stream._read(rs.highWaterMark);
		    }
		  }
		  function Transform(options) {
		    if (!(this instanceof Transform)) return new Transform(options);

		    Duplex.call(this, options);

		    this._transformState = new TransformState(this);

		    // when the writable side finishes, then flush out anything remaining.
		    var stream = this;

		    // start out asking for a readable event once data is transformed.
		    this._readableState.needReadable = true;

		    // we have implemented the _read method, and done the other things
		    // that Readable wants before the first _read call, so unset the
		    // sync guard flag.
		    this._readableState.sync = false;

		    if (options) {
		      if (typeof options.transform === 'function') this._transform = options.transform;

		      if (typeof options.flush === 'function') this._flush = options.flush;
		    }

		    this.once('prefinish', function () {
		      if (typeof this._flush === 'function') this._flush(function (er) {
		        done(stream, er);
		      });else done(stream);
		    });
		  }

		  Transform.prototype.push = function (chunk, encoding) {
		    this._transformState.needTransform = false;
		    return Duplex.prototype.push.call(this, chunk, encoding);
		  };

		  // This is the part where you do stuff!
		  // override this function in implementation classes.
		  // 'chunk' is an input chunk.
		  //
		  // Call `push(newChunk)` to pass along transformed output
		  // to the readable side.  You may call 'push' zero or more times.
		  //
		  // Call `cb(err)` when you are done with this chunk.  If you pass
		  // an error, then that'll put the hurt on the whole operation.  If you
		  // never call cb(), then you'll never get another chunk.
		  Transform.prototype._transform = function (chunk, encoding, cb) {
		    throw new Error('Not implemented');
		  };

		  Transform.prototype._write = function (chunk, encoding, cb) {
		    var ts = this._transformState;
		    ts.writecb = cb;
		    ts.writechunk = chunk;
		    ts.writeencoding = encoding;
		    if (!ts.transforming) {
		      var rs = this._readableState;
		      if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
		    }
		  };

		  // Doesn't matter what the args are here.
		  // _transform does all the work.
		  // That we got here means that the readable side wants more data.
		  Transform.prototype._read = function (n) {
		    var ts = this._transformState;

		    if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
		      ts.transforming = true;
		      this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
		    } else {
		      // mark that we need a transform, so that any data that comes in
		      // will get processed, now that we've asked for it.
		      ts.needTransform = true;
		    }
		  };

		  function done(stream, er) {
		    if (er) return stream.emit('error', er);

		    // if there's nothing in the write buffer, then that means
		    // that nothing more will ever be provided
		    var ws = stream._writableState;
		    var ts = stream._transformState;

		    if (ws.length) throw new Error('Calling transform done when ws.length != 0');

		    if (ts.transforming) throw new Error('Calling transform done when still transforming');

		    return stream.push(null);
		  }

		  inherits$3(PassThrough, Transform);
		  function PassThrough(options) {
		    if (!(this instanceof PassThrough)) return new PassThrough(options);

		    Transform.call(this, options);
		  }

		  PassThrough.prototype._transform = function (chunk, encoding, cb) {
		    cb(null, chunk);
		  };

		  inherits$3(Stream, EventEmitter$2);
		  Stream.Readable = Readable;
		  Stream.Writable = Writable;
		  Stream.Duplex = Duplex;
		  Stream.Transform = Transform;
		  Stream.PassThrough = PassThrough;

		  // Backwards-compat with node 0.4.x
		  Stream.Stream = Stream;

		  // old-style streams.  Note that the pipe method (the only relevant
		  // part of this class) is overridden in the Readable class.

		  function Stream() {
		    EventEmitter$2.call(this);
		  }

		  Stream.prototype.pipe = function(dest, options) {
		    var source = this;

		    function ondata(chunk) {
		      if (dest.writable) {
		        if (false === dest.write(chunk) && source.pause) {
		          source.pause();
		        }
		      }
		    }

		    source.on('data', ondata);

		    function ondrain() {
		      if (source.readable && source.resume) {
		        source.resume();
		      }
		    }

		    dest.on('drain', ondrain);

		    // If the 'end' option is not supplied, dest.end() will be called when
		    // source gets the 'end' or 'close' events.  Only dest.end() once.
		    if (!dest._isStdio && (!options || options.end !== false)) {
		      source.on('end', onend);
		      source.on('close', onclose);
		    }

		    var didOnEnd = false;
		    function onend() {
		      if (didOnEnd) return;
		      didOnEnd = true;

		      dest.end();
		    }


		    function onclose() {
		      if (didOnEnd) return;
		      didOnEnd = true;

		      if (typeof dest.destroy === 'function') dest.destroy();
		    }

		    // don't leave dangling pipes when there are errors.
		    function onerror(er) {
		      cleanup();
		      if (EventEmitter$2.listenerCount(this, 'error') === 0) {
		        throw er; // Unhandled stream error in pipe.
		      }
		    }

		    source.on('error', onerror);
		    dest.on('error', onerror);

		    // remove all the event listeners that were added.
		    function cleanup() {
		      source.removeListener('data', ondata);
		      dest.removeListener('drain', ondrain);

		      source.removeListener('end', onend);
		      source.removeListener('close', onclose);

		      source.removeListener('error', onerror);
		      dest.removeListener('error', onerror);

		      source.removeListener('end', cleanup);
		      source.removeListener('close', cleanup);

		      dest.removeListener('close', cleanup);
		    }

		    source.on('end', cleanup);
		    source.on('close', cleanup);

		    dest.on('close', cleanup);

		    dest.emit('pipe', source);

		    // Allow for unix-like usage: A.pipe(B).pipe(C)
		    return dest;
		  };

		  var _polyfillNode_stream = /*#__PURE__*/Object.freeze({
		    __proto__: null,
		    'default': Stream,
		    Readable: Readable,
		    Writable: Writable,
		    Duplex: Duplex,
		    Transform: Transform,
		    PassThrough: PassThrough,
		    Stream: Stream
		  });

		  var require$$0$2 = /*@__PURE__*/getAugmentedNamespace(_polyfillNode_stream);

		  var require$$0$1 = /*@__PURE__*/getAugmentedNamespace(_polyfillNode_util$1);

		  var WritableStream = require$$0$2.Writable;
		  var inherits$1 = require$$0$1.inherits;

		  var browserStdout = BrowserStdout;


		  inherits$1(BrowserStdout, WritableStream);

		  function BrowserStdout(opts) {
		    if (!(this instanceof BrowserStdout)) return new BrowserStdout(opts)

		    opts = opts || {};
		    WritableStream.call(this, opts);
		    this.label = (opts.label !== undefined) ? opts.label : 'stdout';
		  }

		  BrowserStdout.prototype._write = function(chunks, encoding, cb) {
		    var output = chunks.toString ? chunks.toString() : chunks;
		    if (this.label === false) {
		      console.log(output);
		    } else {
		      console.log(this.label+':', output);
		    }
		    nextTick$1(cb);
		  };

		  /**
		   * Parse the given `qs`.
		   *
		   * @private
		   * @param {string} qs
		   * @return {Object<string, string>}
		   */
		  var parseQuery$1 = function parseQuery(qs) {
		    return qs
		      .replace('?', '')
		      .split('&')
		      .reduce(function (obj, pair) {
		        var i = pair.indexOf('=');
		        var key = pair.slice(0, i);
		        var val = pair.slice(++i);

		        // Due to how the URLSearchParams API treats spaces
		        obj[key] = decodeURIComponent(val.replace(/\+/g, '%20'));

		        return obj;
		      }, {});
		  };

		  /**
		   * Highlight the given string of `js`.
		   *
		   * @private
		   * @param {string} js
		   * @return {string}
		   */
		  function highlight(js) {
		    return js
		      .replace(/</g, '&lt;')
		      .replace(/>/g, '&gt;')
		      .replace(/\/\/(.*)/gm, '<span class="comment">//$1</span>')
		      .replace(/('.*?')/gm, '<span class="string">$1</span>')
		      .replace(/(\d+\.\d+)/gm, '<span class="number">$1</span>')
		      .replace(/(\d+)/gm, '<span class="number">$1</span>')
		      .replace(
		        /\bnew[ \t]+(\w+)/gm,
		        '<span class="keyword">new</span> <span class="init">$1</span>'
		      )
		      .replace(
		        /\b(function|new|throw|return|var|if|else)\b/gm,
		        '<span class="keyword">$1</span>'
		      );
		  }

		  /**
		   * Highlight the contents of tag `name`.
		   *
		   * @private
		   * @param {string} name
		   */
		  var highlightTags$1 = function highlightTags(name) {
		    var code = document.getElementById('mocha').getElementsByTagName(name);
		    for (var i = 0, len = code.length; i < len; ++i) {
		      code[i].innerHTML = highlight(code[i].innerHTML);
		    }
		  };

		  var mocha$1 = {exports: {}};

		  var escapeStringRegexp = string => {
		  	if (typeof string !== 'string') {
		  		throw new TypeError('Expected a string');
		  	}

		  	// Escape characters with special meaning either inside or outside character sets.
		  	// Use a simple backslash escape when it’s always valid, and a \unnnn escape when the simpler form would be disallowed by Unicode patterns’ stricter grammar.
		  	return string
		  		.replace(/[|\\{}()[\]^$+*?.]/g, '\\$&')
		  		.replace(/-/g, '\\x2d');
		  };

		  // Copyright Joyent, Inc. and other Node contributors.
		  //
		  // Permission is hereby granted, free of charge, to any person obtaining a
		  // copy of this software and associated documentation files (the
		  // "Software"), to deal in the Software without restriction, including
		  // without limitation the rights to use, copy, modify, merge, publish,
		  // distribute, sublicense, and/or sell copies of the Software, and to permit
		  // persons to whom the Software is furnished to do so, subject to the
		  // following conditions:
		  //
		  // The above copyright notice and this permission notice shall be included
		  // in all copies or substantial portions of the Software.
		  //
		  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
		  // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
		  // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
		  // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
		  // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
		  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
		  // USE OR OTHER DEALINGS IN THE SOFTWARE.

		  // resolves . and .. elements in a path array with directory names there
		  // must be no slashes, empty elements, or device names (c:\) in the array
		  // (so also no leading and trailing slashes - it does not distinguish
		  // relative and absolute paths)
		  function normalizeArray(parts, allowAboveRoot) {
		    // if the path tries to go above the root, `up` ends up > 0
		    var up = 0;
		    for (var i = parts.length - 1; i >= 0; i--) {
		      var last = parts[i];
		      if (last === '.') {
		        parts.splice(i, 1);
		      } else if (last === '..') {
		        parts.splice(i, 1);
		        up++;
		      } else if (up) {
		        parts.splice(i, 1);
		        up--;
		      }
		    }

		    // if the path is allowed to go above the root, restore leading ..s
		    if (allowAboveRoot) {
		      for (; up--; up) {
		        parts.unshift('..');
		      }
		    }

		    return parts;
		  }

		  // Split a filename into [root, dir, basename, ext], unix version
		  // 'root' is just a slash, or nothing.
		  var splitPathRe =
		      /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
		  var splitPath = function(filename) {
		    return splitPathRe.exec(filename).slice(1);
		  };

		  // path.resolve([from ...], to)
		  // posix version
		  function resolve() {
		    var resolvedPath = '',
		        resolvedAbsolute = false;

		    for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
		      var path = (i >= 0) ? arguments[i] : '/';

		      // Skip empty and invalid entries
		      if (typeof path !== 'string') {
		        throw new TypeError('Arguments to path.resolve must be strings');
		      } else if (!path) {
		        continue;
		      }

		      resolvedPath = path + '/' + resolvedPath;
		      resolvedAbsolute = path.charAt(0) === '/';
		    }

		    // At this point the path should be resolved to a full absolute path, but
		    // handle relative paths to be safe (might happen when process.cwd() fails)

		    // Normalize the path
		    resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
		      return !!p;
		    }), !resolvedAbsolute).join('/');

		    return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
		  }
		  // path.normalize(path)
		  // posix version
		  function normalize(path) {
		    var isPathAbsolute = isAbsolute(path),
		        trailingSlash = substr(path, -1) === '/';

		    // Normalize the path
		    path = normalizeArray(filter(path.split('/'), function(p) {
		      return !!p;
		    }), !isPathAbsolute).join('/');

		    if (!path && !isPathAbsolute) {
		      path = '.';
		    }
		    if (path && trailingSlash) {
		      path += '/';
		    }

		    return (isPathAbsolute ? '/' : '') + path;
		  }
		  // posix version
		  function isAbsolute(path) {
		    return path.charAt(0) === '/';
		  }

		  // posix version
		  function join() {
		    var paths = Array.prototype.slice.call(arguments, 0);
		    return normalize(filter(paths, function(p, index) {
		      if (typeof p !== 'string') {
		        throw new TypeError('Arguments to path.join must be strings');
		      }
		      return p;
		    }).join('/'));
		  }


		  // path.relative(from, to)
		  // posix version
		  function relative(from, to) {
		    from = resolve(from).substr(1);
		    to = resolve(to).substr(1);

		    function trim(arr) {
		      var start = 0;
		      for (; start < arr.length; start++) {
		        if (arr[start] !== '') break;
		      }

		      var end = arr.length - 1;
		      for (; end >= 0; end--) {
		        if (arr[end] !== '') break;
		      }

		      if (start > end) return [];
		      return arr.slice(start, end - start + 1);
		    }

		    var fromParts = trim(from.split('/'));
		    var toParts = trim(to.split('/'));

		    var length = Math.min(fromParts.length, toParts.length);
		    var samePartsLength = length;
		    for (var i = 0; i < length; i++) {
		      if (fromParts[i] !== toParts[i]) {
		        samePartsLength = i;
		        break;
		      }
		    }

		    var outputParts = [];
		    for (var i = samePartsLength; i < fromParts.length; i++) {
		      outputParts.push('..');
		    }

		    outputParts = outputParts.concat(toParts.slice(samePartsLength));

		    return outputParts.join('/');
		  }

		  var sep = '/';
		  var delimiter = ':';

		  function dirname(path) {
		    var result = splitPath(path),
		        root = result[0],
		        dir = result[1];

		    if (!root && !dir) {
		      // No dirname whatsoever
		      return '.';
		    }

		    if (dir) {
		      // It has a dirname, strip trailing slash
		      dir = dir.substr(0, dir.length - 1);
		    }

		    return root + dir;
		  }

		  function basename(path, ext) {
		    var f = splitPath(path)[2];
		    // TODO: make this comparison case-insensitive on windows?
		    if (ext && f.substr(-1 * ext.length) === ext) {
		      f = f.substr(0, f.length - ext.length);
		    }
		    return f;
		  }


		  function extname(path) {
		    return splitPath(path)[3];
		  }
		  var _polyfillNode_path = {
		    extname: extname,
		    basename: basename,
		    dirname: dirname,
		    sep: sep,
		    delimiter: delimiter,
		    relative: relative,
		    join: join,
		    isAbsolute: isAbsolute,
		    normalize: normalize,
		    resolve: resolve
		  };
		  function filter (xs, f) {
		      if (xs.filter) return xs.filter(f);
		      var res = [];
		      for (var i = 0; i < xs.length; i++) {
		          if (f(xs[i], i, xs)) res.push(xs[i]);
		      }
		      return res;
		  }

		  // String.prototype.substr - negative index don't work in IE8
		  var substr = 'ab'.substr(-1) === 'b' ?
		      function (str, start, len) { return str.substr(start, len) } :
		      function (str, start, len) {
		          if (start < 0) start = str.length + start;
		          return str.substr(start, len);
		      }
		  ;

		  var _polyfillNode_path$1 = /*#__PURE__*/Object.freeze({
		    __proto__: null,
		    resolve: resolve,
		    normalize: normalize,
		    isAbsolute: isAbsolute,
		    join: join,
		    relative: relative,
		    sep: sep,
		    delimiter: delimiter,
		    dirname: dirname,
		    basename: basename,
		    extname: extname,
		    'default': _polyfillNode_path
		  });

		  var require$$1 = /*@__PURE__*/getAugmentedNamespace(_polyfillNode_path$1);

		  var reporters = {};

		  var base$1 = {exports: {}};

		  var lib = {};

		  var base = {};

		  /*istanbul ignore start*/

		  (function (exports) {

		  Object.defineProperty(exports, "__esModule", {
		    value: true
		  });
		  exports["default"] = Diff;

		  /*istanbul ignore end*/
		  function Diff() {}

		  Diff.prototype = {
		    /*istanbul ignore start*/

		    /*istanbul ignore end*/
		    diff: function diff(oldString, newString) {
		      /*istanbul ignore start*/
		      var _options$timeout;

		      var
		      /*istanbul ignore end*/
		      options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
		      var callback = options.callback;

		      if (typeof options === 'function') {
		        callback = options;
		        options = {};
		      }

		      this.options = options;
		      var self = this;

		      function done(value) {
		        if (callback) {
		          setTimeout(function () {
		            callback(undefined, value);
		          }, 0);
		          return true;
		        } else {
		          return value;
		        }
		      } // Allow subclasses to massage the input prior to running


		      oldString = this.castInput(oldString);
		      newString = this.castInput(newString);
		      oldString = this.removeEmpty(this.tokenize(oldString));
		      newString = this.removeEmpty(this.tokenize(newString));
		      var newLen = newString.length,
		          oldLen = oldString.length;
		      var editLength = 1;
		      var maxEditLength = newLen + oldLen;

		      if (options.maxEditLength) {
		        maxEditLength = Math.min(maxEditLength, options.maxEditLength);
		      }

		      var maxExecutionTime =
		      /*istanbul ignore start*/
		      (_options$timeout =
		      /*istanbul ignore end*/
		      options.timeout) !== null && _options$timeout !== void 0 ? _options$timeout : Infinity;
		      var abortAfterTimestamp = Date.now() + maxExecutionTime;
		      var bestPath = [{
		        oldPos: -1,
		        lastComponent: undefined
		      }]; // Seed editLength = 0, i.e. the content starts with the same values

		      var newPos = this.extractCommon(bestPath[0], newString, oldString, 0);

		      if (bestPath[0].oldPos + 1 >= oldLen && newPos + 1 >= newLen) {
		        // Identity per the equality and tokenizer
		        return done([{
		          value: this.join(newString),
		          count: newString.length
		        }]);
		      } // Once we hit the right edge of the edit graph on some diagonal k, we can
		      // definitely reach the end of the edit graph in no more than k edits, so
		      // there's no point in considering any moves to diagonal k+1 any more (from
		      // which we're guaranteed to need at least k+1 more edits).
		      // Similarly, once we've reached the bottom of the edit graph, there's no
		      // point considering moves to lower diagonals.
		      // We record this fact by setting minDiagonalToConsider and
		      // maxDiagonalToConsider to some finite value once we've hit the edge of
		      // the edit graph.
		      // This optimization is not faithful to the original algorithm presented in
		      // Myers's paper, which instead pointlessly extends D-paths off the end of
		      // the edit graph - see page 7 of Myers's paper which notes this point
		      // explicitly and illustrates it with a diagram. This has major performance
		      // implications for some common scenarios. For instance, to compute a diff
		      // where the new text simply appends d characters on the end of the
		      // original text of length n, the true Myers algorithm will take O(n+d^2)
		      // time while this optimization needs only O(n+d) time.


		      var minDiagonalToConsider = -Infinity,
		          maxDiagonalToConsider = Infinity; // Main worker method. checks all permutations of a given edit length for acceptance.

		      function execEditLength() {
		        for (var diagonalPath = Math.max(minDiagonalToConsider, -editLength); diagonalPath <= Math.min(maxDiagonalToConsider, editLength); diagonalPath += 2) {
		          var basePath =
		          /*istanbul ignore start*/
		          void 0
		          /*istanbul ignore end*/
		          ;
		          var removePath = bestPath[diagonalPath - 1],
		              addPath = bestPath[diagonalPath + 1];

		          if (removePath) {
		            // No one else is going to attempt to use this value, clear it
		            bestPath[diagonalPath - 1] = undefined;
		          }

		          var canAdd = false;

		          if (addPath) {
		            // what newPos will be after we do an insertion:
		            var addPathNewPos = addPath.oldPos - diagonalPath;
		            canAdd = addPath && 0 <= addPathNewPos && addPathNewPos < newLen;
		          }

		          var canRemove = removePath && removePath.oldPos + 1 < oldLen;

		          if (!canAdd && !canRemove) {
		            // If this path is a terminal then prune
		            bestPath[diagonalPath] = undefined;
		            continue;
		          } // Select the diagonal that we want to branch from. We select the prior
		          // path whose position in the old string is the farthest from the origin
		          // and does not pass the bounds of the diff graph
		          // TODO: Remove the `+ 1` here to make behavior match Myers algorithm
		          //       and prefer to order removals before insertions.


		          if (!canRemove || canAdd && removePath.oldPos + 1 < addPath.oldPos) {
		            basePath = self.addToPath(addPath, true, undefined, 0);
		          } else {
		            basePath = self.addToPath(removePath, undefined, true, 1);
		          }

		          newPos = self.extractCommon(basePath, newString, oldString, diagonalPath);

		          if (basePath.oldPos + 1 >= oldLen && newPos + 1 >= newLen) {
		            // If we have hit the end of both strings, then we are done
		            return done(buildValues(self, basePath.lastComponent, newString, oldString, self.useLongestToken));
		          } else {
		            bestPath[diagonalPath] = basePath;

		            if (basePath.oldPos + 1 >= oldLen) {
		              maxDiagonalToConsider = Math.min(maxDiagonalToConsider, diagonalPath - 1);
		            }

		            if (newPos + 1 >= newLen) {
		              minDiagonalToConsider = Math.max(minDiagonalToConsider, diagonalPath + 1);
		            }
		          }
		        }

		        editLength++;
		      } // Performs the length of edit iteration. Is a bit fugly as this has to support the
		      // sync and async mode which is never fun. Loops over execEditLength until a value
		      // is produced, or until the edit length exceeds options.maxEditLength (if given),
		      // in which case it will return undefined.


		      if (callback) {
		        (function exec() {
		          setTimeout(function () {
		            if (editLength > maxEditLength || Date.now() > abortAfterTimestamp) {
		              return callback();
		            }

		            if (!execEditLength()) {
		              exec();
		            }
		          }, 0);
		        })();
		      } else {
		        while (editLength <= maxEditLength && Date.now() <= abortAfterTimestamp) {
		          var ret = execEditLength();

		          if (ret) {
		            return ret;
		          }
		        }
		      }
		    },

		    /*istanbul ignore start*/

		    /*istanbul ignore end*/
		    addToPath: function addToPath(path, added, removed, oldPosInc) {
		      var last = path.lastComponent;

		      if (last && last.added === added && last.removed === removed) {
		        return {
		          oldPos: path.oldPos + oldPosInc,
		          lastComponent: {
		            count: last.count + 1,
		            added: added,
		            removed: removed,
		            previousComponent: last.previousComponent
		          }
		        };
		      } else {
		        return {
		          oldPos: path.oldPos + oldPosInc,
		          lastComponent: {
		            count: 1,
		            added: added,
		            removed: removed,
		            previousComponent: last
		          }
		        };
		      }
		    },

		    /*istanbul ignore start*/

		    /*istanbul ignore end*/
		    extractCommon: function extractCommon(basePath, newString, oldString, diagonalPath) {
		      var newLen = newString.length,
		          oldLen = oldString.length,
		          oldPos = basePath.oldPos,
		          newPos = oldPos - diagonalPath,
		          commonCount = 0;

		      while (newPos + 1 < newLen && oldPos + 1 < oldLen && this.equals(newString[newPos + 1], oldString[oldPos + 1])) {
		        newPos++;
		        oldPos++;
		        commonCount++;
		      }

		      if (commonCount) {
		        basePath.lastComponent = {
		          count: commonCount,
		          previousComponent: basePath.lastComponent
		        };
		      }

		      basePath.oldPos = oldPos;
		      return newPos;
		    },

		    /*istanbul ignore start*/

		    /*istanbul ignore end*/
		    equals: function equals(left, right) {
		      if (this.options.comparator) {
		        return this.options.comparator(left, right);
		      } else {
		        return left === right || this.options.ignoreCase && left.toLowerCase() === right.toLowerCase();
		      }
		    },

		    /*istanbul ignore start*/

		    /*istanbul ignore end*/
		    removeEmpty: function removeEmpty(array) {
		      var ret = [];

		      for (var i = 0; i < array.length; i++) {
		        if (array[i]) {
		          ret.push(array[i]);
		        }
		      }

		      return ret;
		    },

		    /*istanbul ignore start*/

		    /*istanbul ignore end*/
		    castInput: function castInput(value) {
		      return value;
		    },

		    /*istanbul ignore start*/

		    /*istanbul ignore end*/
		    tokenize: function tokenize(value) {
		      return value.split('');
		    },

		    /*istanbul ignore start*/

		    /*istanbul ignore end*/
		    join: function join(chars) {
		      return chars.join('');
		    }
		  };

		  function buildValues(diff, lastComponent, newString, oldString, useLongestToken) {
		    // First we convert our linked list of components in reverse order to an
		    // array in the right order:
		    var components = [];
		    var nextComponent;

		    while (lastComponent) {
		      components.push(lastComponent);
		      nextComponent = lastComponent.previousComponent;
		      delete lastComponent.previousComponent;
		      lastComponent = nextComponent;
		    }

		    components.reverse();
		    var componentPos = 0,
		        componentLen = components.length,
		        newPos = 0,
		        oldPos = 0;

		    for (; componentPos < componentLen; componentPos++) {
		      var component = components[componentPos];

		      if (!component.removed) {
		        if (!component.added && useLongestToken) {
		          var value = newString.slice(newPos, newPos + component.count);
		          value = value.map(function (value, i) {
		            var oldValue = oldString[oldPos + i];
		            return oldValue.length > value.length ? oldValue : value;
		          });
		          component.value = diff.join(value);
		        } else {
		          component.value = diff.join(newString.slice(newPos, newPos + component.count));
		        }

		        newPos += component.count; // Common case

		        if (!component.added) {
		          oldPos += component.count;
		        }
		      } else {
		        component.value = diff.join(oldString.slice(oldPos, oldPos + component.count));
		        oldPos += component.count; // Reverse add and remove so removes are output first to match common convention
		        // The diffing algorithm is tied to add then remove output and this is the simplest
		        // route to get the desired output with minimal overhead.

		        if (componentPos && components[componentPos - 1].added) {
		          var tmp = components[componentPos - 1];
		          components[componentPos - 1] = components[componentPos];
		          components[componentPos] = tmp;
		        }
		      }
		    } // Special case handle for when one terminal is ignored (i.e. whitespace).
		    // For this case we merge the terminal into the prior string and drop the change.
		    // This is only available for string mode.


		    var finalComponent = components[componentLen - 1];

		    if (componentLen > 1 && typeof finalComponent.value === 'string' && (finalComponent.added || finalComponent.removed) && diff.equals('', finalComponent.value)) {
		      components[componentLen - 2].value += finalComponent.value;
		      components.pop();
		    }

		    return components;
		  }

		  }(base));

		  var character = {};

		  /*istanbul ignore start*/

		  Object.defineProperty(character, "__esModule", {
		    value: true
		  });
		  character.diffChars = diffChars;
		  character.characterDiff = void 0;

		  /*istanbul ignore end*/
		  var
		  /*istanbul ignore start*/
		  _base$6 = _interopRequireDefault$7(base)
		  /*istanbul ignore end*/
		  ;

		  /*istanbul ignore start*/ function _interopRequireDefault$7(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

		  /*istanbul ignore end*/
		  var characterDiff = new
		  /*istanbul ignore start*/
		  _base$6
		  /*istanbul ignore end*/
		  [
		  /*istanbul ignore start*/
		  "default"
		  /*istanbul ignore end*/
		  ]();

		  /*istanbul ignore start*/
		  character.characterDiff = characterDiff;

		  /*istanbul ignore end*/
		  function diffChars(oldStr, newStr, options) {
		    return characterDiff.diff(oldStr, newStr, options);
		  }

		  var word = {};

		  var params = {};

		  /*istanbul ignore start*/

		  Object.defineProperty(params, "__esModule", {
		    value: true
		  });
		  params.generateOptions = generateOptions;

		  /*istanbul ignore end*/
		  function generateOptions(options, defaults) {
		    if (typeof options === 'function') {
		      defaults.callback = options;
		    } else if (options) {
		      for (var name in options) {
		        /* istanbul ignore else */
		        if (options.hasOwnProperty(name)) {
		          defaults[name] = options[name];
		        }
		      }
		    }

		    return defaults;
		  }

		  /*istanbul ignore start*/

		  Object.defineProperty(word, "__esModule", {
		    value: true
		  });
		  word.diffWords = diffWords;
		  word.diffWordsWithSpace = diffWordsWithSpace;
		  word.wordDiff = void 0;

		  /*istanbul ignore end*/
		  var
		  /*istanbul ignore start*/
		  _base$5 = _interopRequireDefault$6(base)
		  /*istanbul ignore end*/
		  ;

		  var
		  /*istanbul ignore start*/
		  _params$1 = params
		  /*istanbul ignore end*/
		  ;

		  /*istanbul ignore start*/ function _interopRequireDefault$6(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

		  /*istanbul ignore end*/
		  // Based on https://en.wikipedia.org/wiki/Latin_script_in_Unicode
		  //
		  // Ranges and exceptions:
		  // Latin-1 Supplement, 0080–00FF
		  //  - U+00D7  × Multiplication sign
		  //  - U+00F7  ÷ Division sign
		  // Latin Extended-A, 0100–017F
		  // Latin Extended-B, 0180–024F
		  // IPA Extensions, 0250–02AF
		  // Spacing Modifier Letters, 02B0–02FF
		  //  - U+02C7  ˇ &#711;  Caron
		  //  - U+02D8  ˘ &#728;  Breve
		  //  - U+02D9  ˙ &#729;  Dot Above
		  //  - U+02DA  ˚ &#730;  Ring Above
		  //  - U+02DB  ˛ &#731;  Ogonek
		  //  - U+02DC  ˜ &#732;  Small Tilde
		  //  - U+02DD  ˝ &#733;  Double Acute Accent
		  // Latin Extended Additional, 1E00–1EFF
		  var extendedWordChars = /^[A-Za-z\xC0-\u02C6\u02C8-\u02D7\u02DE-\u02FF\u1E00-\u1EFF]+$/;
		  var reWhitespace = /\S/;
		  var wordDiff = new
		  /*istanbul ignore start*/
		  _base$5
		  /*istanbul ignore end*/
		  [
		  /*istanbul ignore start*/
		  "default"
		  /*istanbul ignore end*/
		  ]();

		  /*istanbul ignore start*/
		  word.wordDiff = wordDiff;

		  /*istanbul ignore end*/
		  wordDiff.equals = function (left, right) {
		    if (this.options.ignoreCase) {
		      left = left.toLowerCase();
		      right = right.toLowerCase();
		    }

		    return left === right || this.options.ignoreWhitespace && !reWhitespace.test(left) && !reWhitespace.test(right);
		  };

		  wordDiff.tokenize = function (value) {
		    // All whitespace symbols except newline group into one token, each newline - in separate token
		    var tokens = value.split(/([^\S\r\n]+|[()[\]{}'"\r\n]|\b)/); // Join the boundary splits that we do not consider to be boundaries. This is primarily the extended Latin character set.

		    for (var i = 0; i < tokens.length - 1; i++) {
		      // If we have an empty string in the next field and we have only word chars before and after, merge
		      if (!tokens[i + 1] && tokens[i + 2] && extendedWordChars.test(tokens[i]) && extendedWordChars.test(tokens[i + 2])) {
		        tokens[i] += tokens[i + 2];
		        tokens.splice(i + 1, 2);
		        i--;
		      }
		    }

		    return tokens;
		  };

		  function diffWords(oldStr, newStr, options) {
		    options =
		    /*istanbul ignore start*/
		    (/*istanbul ignore end*/

		    /*istanbul ignore start*/
		    0, _params$1
		    /*istanbul ignore end*/
		    .
		    /*istanbul ignore start*/
		    generateOptions)
		    /*istanbul ignore end*/
		    (options, {
		      ignoreWhitespace: true
		    });
		    return wordDiff.diff(oldStr, newStr, options);
		  }

		  function diffWordsWithSpace(oldStr, newStr, options) {
		    return wordDiff.diff(oldStr, newStr, options);
		  }

		  var line = {};

		  /*istanbul ignore start*/

		  Object.defineProperty(line, "__esModule", {
		    value: true
		  });
		  line.diffLines = diffLines;
		  line.diffTrimmedLines = diffTrimmedLines;
		  line.lineDiff = void 0;

		  /*istanbul ignore end*/
		  var
		  /*istanbul ignore start*/
		  _base$4 = _interopRequireDefault$5(base)
		  /*istanbul ignore end*/
		  ;

		  var
		  /*istanbul ignore start*/
		  _params = params
		  /*istanbul ignore end*/
		  ;

		  /*istanbul ignore start*/ function _interopRequireDefault$5(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

		  /*istanbul ignore end*/
		  var lineDiff = new
		  /*istanbul ignore start*/
		  _base$4
		  /*istanbul ignore end*/
		  [
		  /*istanbul ignore start*/
		  "default"
		  /*istanbul ignore end*/
		  ]();

		  /*istanbul ignore start*/
		  line.lineDiff = lineDiff;

		  /*istanbul ignore end*/
		  lineDiff.tokenize = function (value) {
		    if (this.options.stripTrailingCr) {
		      // remove one \r before \n to match GNU diff's --strip-trailing-cr behavior
		      value = value.replace(/\r\n/g, '\n');
		    }

		    var retLines = [],
		        linesAndNewlines = value.split(/(\n|\r\n)/); // Ignore the final empty token that occurs if the string ends with a new line

		    if (!linesAndNewlines[linesAndNewlines.length - 1]) {
		      linesAndNewlines.pop();
		    } // Merge the content and line separators into single tokens


		    for (var i = 0; i < linesAndNewlines.length; i++) {
		      var line = linesAndNewlines[i];

		      if (i % 2 && !this.options.newlineIsToken) {
		        retLines[retLines.length - 1] += line;
		      } else {
		        if (this.options.ignoreWhitespace) {
		          line = line.trim();
		        }

		        retLines.push(line);
		      }
		    }

		    return retLines;
		  };

		  function diffLines(oldStr, newStr, callback) {
		    return lineDiff.diff(oldStr, newStr, callback);
		  }

		  function diffTrimmedLines(oldStr, newStr, callback) {
		    var options =
		    /*istanbul ignore start*/
		    (/*istanbul ignore end*/

		    /*istanbul ignore start*/
		    0, _params
		    /*istanbul ignore end*/
		    .
		    /*istanbul ignore start*/
		    generateOptions)
		    /*istanbul ignore end*/
		    (callback, {
		      ignoreWhitespace: true
		    });
		    return lineDiff.diff(oldStr, newStr, options);
		  }

		  var sentence = {};

		  /*istanbul ignore start*/

		  Object.defineProperty(sentence, "__esModule", {
		    value: true
		  });
		  sentence.diffSentences = diffSentences;
		  sentence.sentenceDiff = void 0;

		  /*istanbul ignore end*/
		  var
		  /*istanbul ignore start*/
		  _base$3 = _interopRequireDefault$4(base)
		  /*istanbul ignore end*/
		  ;

		  /*istanbul ignore start*/ function _interopRequireDefault$4(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

		  /*istanbul ignore end*/
		  var sentenceDiff = new
		  /*istanbul ignore start*/
		  _base$3
		  /*istanbul ignore end*/
		  [
		  /*istanbul ignore start*/
		  "default"
		  /*istanbul ignore end*/
		  ]();

		  /*istanbul ignore start*/
		  sentence.sentenceDiff = sentenceDiff;

		  /*istanbul ignore end*/
		  sentenceDiff.tokenize = function (value) {
		    return value.split(/(\S.+?[.!?])(?=\s+|$)/);
		  };

		  function diffSentences(oldStr, newStr, callback) {
		    return sentenceDiff.diff(oldStr, newStr, callback);
		  }

		  var css = {};

		  /*istanbul ignore start*/

		  Object.defineProperty(css, "__esModule", {
		    value: true
		  });
		  css.diffCss = diffCss;
		  css.cssDiff = void 0;

		  /*istanbul ignore end*/
		  var
		  /*istanbul ignore start*/
		  _base$2 = _interopRequireDefault$3(base)
		  /*istanbul ignore end*/
		  ;

		  /*istanbul ignore start*/ function _interopRequireDefault$3(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

		  /*istanbul ignore end*/
		  var cssDiff = new
		  /*istanbul ignore start*/
		  _base$2
		  /*istanbul ignore end*/
		  [
		  /*istanbul ignore start*/
		  "default"
		  /*istanbul ignore end*/
		  ]();

		  /*istanbul ignore start*/
		  css.cssDiff = cssDiff;

		  /*istanbul ignore end*/
		  cssDiff.tokenize = function (value) {
		    return value.split(/([{}:;,]|\s+)/);
		  };

		  function diffCss(oldStr, newStr, callback) {
		    return cssDiff.diff(oldStr, newStr, callback);
		  }

		  var json$1 = {};

		  /*istanbul ignore start*/

		  Object.defineProperty(json$1, "__esModule", {
		    value: true
		  });
		  json$1.diffJson = diffJson;
		  json$1.canonicalize = canonicalize;
		  json$1.jsonDiff = void 0;

		  /*istanbul ignore end*/
		  var
		  /*istanbul ignore start*/
		  _base$1 = _interopRequireDefault$2(base)
		  /*istanbul ignore end*/
		  ;

		  var
		  /*istanbul ignore start*/
		  _line$1 = line
		  /*istanbul ignore end*/
		  ;

		  /*istanbul ignore start*/ function _interopRequireDefault$2(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

		  function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

		  /*istanbul ignore end*/
		  var objectPrototypeToString = Object.prototype.toString;
		  var jsonDiff = new
		  /*istanbul ignore start*/
		  _base$1
		  /*istanbul ignore end*/
		  [
		  /*istanbul ignore start*/
		  "default"
		  /*istanbul ignore end*/
		  ](); // Discriminate between two lines of pretty-printed, serialized JSON where one of them has a
		  // dangling comma and the other doesn't. Turns out including the dangling comma yields the nicest output:

		  /*istanbul ignore start*/
		  json$1.jsonDiff = jsonDiff;

		  /*istanbul ignore end*/
		  jsonDiff.useLongestToken = true;
		  jsonDiff.tokenize =
		  /*istanbul ignore start*/
		  _line$1
		  /*istanbul ignore end*/
		  .
		  /*istanbul ignore start*/
		  lineDiff
		  /*istanbul ignore end*/
		  .tokenize;

		  jsonDiff.castInput = function (value) {
		    /*istanbul ignore start*/
		    var _this$options =
		    /*istanbul ignore end*/
		    this.options,
		        undefinedReplacement = _this$options.undefinedReplacement,
		        _this$options$stringi = _this$options.stringifyReplacer,
		        stringifyReplacer = _this$options$stringi === void 0 ? function (k, v)
		    /*istanbul ignore start*/
		    {
		      return (
		        /*istanbul ignore end*/
		        typeof v === 'undefined' ? undefinedReplacement : v
		      );
		    } : _this$options$stringi;
		    return typeof value === 'string' ? value : JSON.stringify(canonicalize(value, null, null, stringifyReplacer), stringifyReplacer, '  ');
		  };

		  jsonDiff.equals = function (left, right) {
		    return (
		      /*istanbul ignore start*/
		      _base$1
		      /*istanbul ignore end*/
		      [
		      /*istanbul ignore start*/
		      "default"
		      /*istanbul ignore end*/
		      ].prototype.equals.call(jsonDiff, left.replace(/,([\r\n])/g, '$1'), right.replace(/,([\r\n])/g, '$1'))
		    );
		  };

		  function diffJson(oldObj, newObj, options) {
		    return jsonDiff.diff(oldObj, newObj, options);
		  } // This function handles the presence of circular references by bailing out when encountering an
		  // object that is already on the "stack" of items being processed. Accepts an optional replacer


		  function canonicalize(obj, stack, replacementStack, replacer, key) {
		    stack = stack || [];
		    replacementStack = replacementStack || [];

		    if (replacer) {
		      obj = replacer(key, obj);
		    }

		    var i;

		    for (i = 0; i < stack.length; i += 1) {
		      if (stack[i] === obj) {
		        return replacementStack[i];
		      }
		    }

		    var canonicalizedObj;

		    if ('[object Array]' === objectPrototypeToString.call(obj)) {
		      stack.push(obj);
		      canonicalizedObj = new Array(obj.length);
		      replacementStack.push(canonicalizedObj);

		      for (i = 0; i < obj.length; i += 1) {
		        canonicalizedObj[i] = canonicalize(obj[i], stack, replacementStack, replacer, key);
		      }

		      stack.pop();
		      replacementStack.pop();
		      return canonicalizedObj;
		    }

		    if (obj && obj.toJSON) {
		      obj = obj.toJSON();
		    }

		    if (
		    /*istanbul ignore start*/
		    _typeof(
		    /*istanbul ignore end*/
		    obj) === 'object' && obj !== null) {
		      stack.push(obj);
		      canonicalizedObj = {};
		      replacementStack.push(canonicalizedObj);

		      var sortedKeys = [],
		          _key;

		      for (_key in obj) {
		        /* istanbul ignore else */
		        if (obj.hasOwnProperty(_key)) {
		          sortedKeys.push(_key);
		        }
		      }

		      sortedKeys.sort();

		      for (i = 0; i < sortedKeys.length; i += 1) {
		        _key = sortedKeys[i];
		        canonicalizedObj[_key] = canonicalize(obj[_key], stack, replacementStack, replacer, _key);
		      }

		      stack.pop();
		      replacementStack.pop();
		    } else {
		      canonicalizedObj = obj;
		    }

		    return canonicalizedObj;
		  }

		  var array$1 = {};

		  /*istanbul ignore start*/

		  Object.defineProperty(array$1, "__esModule", {
		    value: true
		  });
		  array$1.diffArrays = diffArrays;
		  array$1.arrayDiff = void 0;

		  /*istanbul ignore end*/
		  var
		  /*istanbul ignore start*/
		  _base = _interopRequireDefault$1(base)
		  /*istanbul ignore end*/
		  ;

		  /*istanbul ignore start*/ function _interopRequireDefault$1(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

		  /*istanbul ignore end*/
		  var arrayDiff = new
		  /*istanbul ignore start*/
		  _base
		  /*istanbul ignore end*/
		  [
		  /*istanbul ignore start*/
		  "default"
		  /*istanbul ignore end*/
		  ]();

		  /*istanbul ignore start*/
		  array$1.arrayDiff = arrayDiff;

		  /*istanbul ignore end*/
		  arrayDiff.tokenize = function (value) {
		    return value.slice();
		  };

		  arrayDiff.join = arrayDiff.removeEmpty = function (value) {
		    return value;
		  };

		  function diffArrays(oldArr, newArr, callback) {
		    return arrayDiff.diff(oldArr, newArr, callback);
		  }

		  var apply = {};

		  var parse$2 = {};

		  /*istanbul ignore start*/

		  Object.defineProperty(parse$2, "__esModule", {
		    value: true
		  });
		  parse$2.parsePatch = parsePatch;

		  /*istanbul ignore end*/
		  function parsePatch(uniDiff) {
		    /*istanbul ignore start*/
		    var
		    /*istanbul ignore end*/
		    options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
		    var diffstr = uniDiff.split(/\r\n|[\n\v\f\r\x85]/),
		        delimiters = uniDiff.match(/\r\n|[\n\v\f\r\x85]/g) || [],
		        list = [],
		        i = 0;

		    function parseIndex() {
		      var index = {};
		      list.push(index); // Parse diff metadata

		      while (i < diffstr.length) {
		        var line = diffstr[i]; // File header found, end parsing diff metadata

		        if (/^(\-\-\-|\+\+\+|@@)\s/.test(line)) {
		          break;
		        } // Diff index


		        var header = /^(?:Index:|diff(?: -r \w+)+)\s+(.+?)\s*$/.exec(line);

		        if (header) {
		          index.index = header[1];
		        }

		        i++;
		      } // Parse file headers if they are defined. Unified diff requires them, but
		      // there's no technical issues to have an isolated hunk without file header


		      parseFileHeader(index);
		      parseFileHeader(index); // Parse hunks

		      index.hunks = [];

		      while (i < diffstr.length) {
		        var _line = diffstr[i];

		        if (/^(Index:|diff|\-\-\-|\+\+\+)\s/.test(_line)) {
		          break;
		        } else if (/^@@/.test(_line)) {
		          index.hunks.push(parseHunk());
		        } else if (_line && options.strict) {
		          // Ignore unexpected content unless in strict mode
		          throw new Error('Unknown line ' + (i + 1) + ' ' + JSON.stringify(_line));
		        } else {
		          i++;
		        }
		      }
		    } // Parses the --- and +++ headers, if none are found, no lines
		    // are consumed.


		    function parseFileHeader(index) {
		      var fileHeader = /^(---|\+\+\+)\s+(.*)$/.exec(diffstr[i]);

		      if (fileHeader) {
		        var keyPrefix = fileHeader[1] === '---' ? 'old' : 'new';
		        var data = fileHeader[2].split('\t', 2);
		        var fileName = data[0].replace(/\\\\/g, '\\');

		        if (/^".*"$/.test(fileName)) {
		          fileName = fileName.substr(1, fileName.length - 2);
		        }

		        index[keyPrefix + 'FileName'] = fileName;
		        index[keyPrefix + 'Header'] = (data[1] || '').trim();
		        i++;
		      }
		    } // Parses a hunk
		    // This assumes that we are at the start of a hunk.


		    function parseHunk() {
		      var chunkHeaderIndex = i,
		          chunkHeaderLine = diffstr[i++],
		          chunkHeader = chunkHeaderLine.split(/@@ -(\d+)(?:,(\d+))? \+(\d+)(?:,(\d+))? @@/);
		      var hunk = {
		        oldStart: +chunkHeader[1],
		        oldLines: typeof chunkHeader[2] === 'undefined' ? 1 : +chunkHeader[2],
		        newStart: +chunkHeader[3],
		        newLines: typeof chunkHeader[4] === 'undefined' ? 1 : +chunkHeader[4],
		        lines: [],
		        linedelimiters: []
		      }; // Unified Diff Format quirk: If the chunk size is 0,
		      // the first number is one lower than one would expect.
		      // https://www.artima.com/weblogs/viewpost.jsp?thread=164293

		      if (hunk.oldLines === 0) {
		        hunk.oldStart += 1;
		      }

		      if (hunk.newLines === 0) {
		        hunk.newStart += 1;
		      }

		      var addCount = 0,
		          removeCount = 0;

		      for (; i < diffstr.length; i++) {
		        // Lines starting with '---' could be mistaken for the "remove line" operation
		        // But they could be the header for the next file. Therefore prune such cases out.
		        if (diffstr[i].indexOf('--- ') === 0 && i + 2 < diffstr.length && diffstr[i + 1].indexOf('+++ ') === 0 && diffstr[i + 2].indexOf('@@') === 0) {
		          break;
		        }

		        var operation = diffstr[i].length == 0 && i != diffstr.length - 1 ? ' ' : diffstr[i][0];

		        if (operation === '+' || operation === '-' || operation === ' ' || operation === '\\') {
		          hunk.lines.push(diffstr[i]);
		          hunk.linedelimiters.push(delimiters[i] || '\n');

		          if (operation === '+') {
		            addCount++;
		          } else if (operation === '-') {
		            removeCount++;
		          } else if (operation === ' ') {
		            addCount++;
		            removeCount++;
		          }
		        } else {
		          break;
		        }
		      } // Handle the empty block count case


		      if (!addCount && hunk.newLines === 1) {
		        hunk.newLines = 0;
		      }

		      if (!removeCount && hunk.oldLines === 1) {
		        hunk.oldLines = 0;
		      } // Perform optional sanity checking


		      if (options.strict) {
		        if (addCount !== hunk.newLines) {
		          throw new Error('Added line count did not match for hunk at line ' + (chunkHeaderIndex + 1));
		        }

		        if (removeCount !== hunk.oldLines) {
		          throw new Error('Removed line count did not match for hunk at line ' + (chunkHeaderIndex + 1));
		        }
		      }

		      return hunk;
		    }

		    while (i < diffstr.length) {
		      parseIndex();
		    }

		    return list;
		  }

		  var distanceIterator = {};

		  /*istanbul ignore start*/

		  (function (exports) {

		  Object.defineProperty(exports, "__esModule", {
		    value: true
		  });
		  exports["default"] = _default;

		  /*istanbul ignore end*/
		  // Iterator that traverses in the range of [min, max], stepping
		  // by distance from a given start position. I.e. for [0, 4], with
		  // start of 2, this will iterate 2, 3, 1, 4, 0.
		  function
		  /*istanbul ignore start*/
		  _default
		  /*istanbul ignore end*/
		  (start, minLine, maxLine) {
		    var wantForward = true,
		        backwardExhausted = false,
		        forwardExhausted = false,
		        localOffset = 1;
		    return function iterator() {
		      if (wantForward && !forwardExhausted) {
		        if (backwardExhausted) {
		          localOffset++;
		        } else {
		          wantForward = false;
		        } // Check if trying to fit beyond text length, and if not, check it fits
		        // after offset location (or desired location on first iteration)


		        if (start + localOffset <= maxLine) {
		          return localOffset;
		        }

		        forwardExhausted = true;
		      }

		      if (!backwardExhausted) {
		        if (!forwardExhausted) {
		          wantForward = true;
		        } // Check if trying to fit before text beginning, and if not, check it fits
		        // before offset location


		        if (minLine <= start - localOffset) {
		          return -localOffset++;
		        }

		        backwardExhausted = true;
		        return iterator();
		      } // We tried to fit hunk before text beginning and beyond text length, then
		      // hunk can't fit on the text. Return undefined

		    };
		  }

		  }(distanceIterator));

		  /*istanbul ignore start*/

		  Object.defineProperty(apply, "__esModule", {
		    value: true
		  });
		  apply.applyPatch = applyPatch;
		  apply.applyPatches = applyPatches;

		  /*istanbul ignore end*/
		  var
		  /*istanbul ignore start*/
		  _parse$1 = parse$2
		  /*istanbul ignore end*/
		  ;

		  var
		  /*istanbul ignore start*/
		  _distanceIterator = _interopRequireDefault(distanceIterator)
		  /*istanbul ignore end*/
		  ;

		  /*istanbul ignore start*/ function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

		  /*istanbul ignore end*/
		  function applyPatch(source, uniDiff) {
		    /*istanbul ignore start*/
		    var
		    /*istanbul ignore end*/
		    options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

		    if (typeof uniDiff === 'string') {
		      uniDiff =
		      /*istanbul ignore start*/
		      (/*istanbul ignore end*/

		      /*istanbul ignore start*/
		      0, _parse$1
		      /*istanbul ignore end*/
		      .
		      /*istanbul ignore start*/
		      parsePatch)
		      /*istanbul ignore end*/
		      (uniDiff);
		    }

		    if (Array.isArray(uniDiff)) {
		      if (uniDiff.length > 1) {
		        throw new Error('applyPatch only works with a single input.');
		      }

		      uniDiff = uniDiff[0];
		    } // Apply the diff to the input


		    var lines = source.split(/\r\n|[\n\v\f\r\x85]/),
		        delimiters = source.match(/\r\n|[\n\v\f\r\x85]/g) || [],
		        hunks = uniDiff.hunks,
		        compareLine = options.compareLine || function (lineNumber, line, operation, patchContent)
		    /*istanbul ignore start*/
		    {
		      return (
		        /*istanbul ignore end*/
		        line === patchContent
		      );
		    },
		        errorCount = 0,
		        fuzzFactor = options.fuzzFactor || 0,
		        minLine = 0,
		        offset = 0,
		        removeEOFNL,
		        addEOFNL;
		    /**
		     * Checks if the hunk exactly fits on the provided location
		     */


		    function hunkFits(hunk, toPos) {
		      for (var j = 0; j < hunk.lines.length; j++) {
		        var line = hunk.lines[j],
		            operation = line.length > 0 ? line[0] : ' ',
		            content = line.length > 0 ? line.substr(1) : line;

		        if (operation === ' ' || operation === '-') {
		          // Context sanity check
		          if (!compareLine(toPos + 1, lines[toPos], operation, content)) {
		            errorCount++;

		            if (errorCount > fuzzFactor) {
		              return false;
		            }
		          }

		          toPos++;
		        }
		      }

		      return true;
		    } // Search best fit offsets for each hunk based on the previous ones


		    for (var i = 0; i < hunks.length; i++) {
		      var hunk = hunks[i],
		          maxLine = lines.length - hunk.oldLines,
		          localOffset = 0,
		          toPos = offset + hunk.oldStart - 1;
		      var iterator =
		      /*istanbul ignore start*/
		      (/*istanbul ignore end*/

		      /*istanbul ignore start*/
		      0, _distanceIterator
		      /*istanbul ignore end*/
		      [
		      /*istanbul ignore start*/
		      "default"
		      /*istanbul ignore end*/
		      ])(toPos, minLine, maxLine);

		      for (; localOffset !== undefined; localOffset = iterator()) {
		        if (hunkFits(hunk, toPos + localOffset)) {
		          hunk.offset = offset += localOffset;
		          break;
		        }
		      }

		      if (localOffset === undefined) {
		        return false;
		      } // Set lower text limit to end of the current hunk, so next ones don't try
		      // to fit over already patched text


		      minLine = hunk.offset + hunk.oldStart + hunk.oldLines;
		    } // Apply patch hunks


		    var diffOffset = 0;

		    for (var _i = 0; _i < hunks.length; _i++) {
		      var _hunk = hunks[_i],
		          _toPos = _hunk.oldStart + _hunk.offset + diffOffset - 1;

		      diffOffset += _hunk.newLines - _hunk.oldLines;

		      for (var j = 0; j < _hunk.lines.length; j++) {
		        var line = _hunk.lines[j],
		            operation = line.length > 0 ? line[0] : ' ',
		            content = line.length > 0 ? line.substr(1) : line,
		            delimiter = _hunk.linedelimiters && _hunk.linedelimiters[j] || '\n';

		        if (operation === ' ') {
		          _toPos++;
		        } else if (operation === '-') {
		          lines.splice(_toPos, 1);
		          delimiters.splice(_toPos, 1);
		          /* istanbul ignore else */
		        } else if (operation === '+') {
		          lines.splice(_toPos, 0, content);
		          delimiters.splice(_toPos, 0, delimiter);
		          _toPos++;
		        } else if (operation === '\\') {
		          var previousOperation = _hunk.lines[j - 1] ? _hunk.lines[j - 1][0] : null;

		          if (previousOperation === '+') {
		            removeEOFNL = true;
		          } else if (previousOperation === '-') {
		            addEOFNL = true;
		          }
		        }
		      }
		    } // Handle EOFNL insertion/removal


		    if (removeEOFNL) {
		      while (!lines[lines.length - 1]) {
		        lines.pop();
		        delimiters.pop();
		      }
		    } else if (addEOFNL) {
		      lines.push('');
		      delimiters.push('\n');
		    }

		    for (var _k = 0; _k < lines.length - 1; _k++) {
		      lines[_k] = lines[_k] + delimiters[_k];
		    }

		    return lines.join('');
		  } // Wrapper that supports multiple file patches via callbacks.


		  function applyPatches(uniDiff, options) {
		    if (typeof uniDiff === 'string') {
		      uniDiff =
		      /*istanbul ignore start*/
		      (/*istanbul ignore end*/

		      /*istanbul ignore start*/
		      0, _parse$1
		      /*istanbul ignore end*/
		      .
		      /*istanbul ignore start*/
		      parsePatch)
		      /*istanbul ignore end*/
		      (uniDiff);
		    }

		    var currentIndex = 0;

		    function processIndex() {
		      var index = uniDiff[currentIndex++];

		      if (!index) {
		        return options.complete();
		      }

		      options.loadFile(index, function (err, data) {
		        if (err) {
		          return options.complete(err);
		        }

		        var updatedContent = applyPatch(data, index, options);
		        options.patched(index, updatedContent, function (err) {
		          if (err) {
		            return options.complete(err);
		          }

		          processIndex();
		        });
		      });
		    }

		    processIndex();
		  }

		  var merge$1 = {};

		  var create = {};

		  /*istanbul ignore start*/

		  Object.defineProperty(create, "__esModule", {
		    value: true
		  });
		  create.structuredPatch = structuredPatch;
		  create.formatPatch = formatPatch;
		  create.createTwoFilesPatch = createTwoFilesPatch;
		  create.createPatch = createPatch;

		  /*istanbul ignore end*/
		  var
		  /*istanbul ignore start*/
		  _line = line
		  /*istanbul ignore end*/
		  ;

		  /*istanbul ignore start*/ function _toConsumableArray$1(arr) { return _arrayWithoutHoles$1(arr) || _iterableToArray$1(arr) || _unsupportedIterableToArray$1(arr) || _nonIterableSpread$1(); }

		  function _nonIterableSpread$1() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

		  function _unsupportedIterableToArray$1(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray$1(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$1(o, minLen); }

		  function _iterableToArray$1(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

		  function _arrayWithoutHoles$1(arr) { if (Array.isArray(arr)) return _arrayLikeToArray$1(arr); }

		  function _arrayLikeToArray$1(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

		  /*istanbul ignore end*/
		  function structuredPatch(oldFileName, newFileName, oldStr, newStr, oldHeader, newHeader, options) {
		    if (!options) {
		      options = {};
		    }

		    if (typeof options.context === 'undefined') {
		      options.context = 4;
		    }

		    var diff =
		    /*istanbul ignore start*/
		    (/*istanbul ignore end*/

		    /*istanbul ignore start*/
		    0, _line
		    /*istanbul ignore end*/
		    .
		    /*istanbul ignore start*/
		    diffLines)
		    /*istanbul ignore end*/
		    (oldStr, newStr, options);

		    if (!diff) {
		      return;
		    }

		    diff.push({
		      value: '',
		      lines: []
		    }); // Append an empty value to make cleanup easier

		    function contextLines(lines) {
		      return lines.map(function (entry) {
		        return ' ' + entry;
		      });
		    }

		    var hunks = [];
		    var oldRangeStart = 0,
		        newRangeStart = 0,
		        curRange = [],
		        oldLine = 1,
		        newLine = 1;

		    /*istanbul ignore start*/
		    var _loop = function _loop(
		    /*istanbul ignore end*/
		    i) {
		      var current = diff[i],
		          lines = current.lines || current.value.replace(/\n$/, '').split('\n');
		      current.lines = lines;

		      if (current.added || current.removed) {
		        /*istanbul ignore start*/
		        var _curRange;

		        /*istanbul ignore end*/
		        // If we have previous context, start with that
		        if (!oldRangeStart) {
		          var prev = diff[i - 1];
		          oldRangeStart = oldLine;
		          newRangeStart = newLine;

		          if (prev) {
		            curRange = options.context > 0 ? contextLines(prev.lines.slice(-options.context)) : [];
		            oldRangeStart -= curRange.length;
		            newRangeStart -= curRange.length;
		          }
		        } // Output our changes


		        /*istanbul ignore start*/

		        /*istanbul ignore end*/

		        /*istanbul ignore start*/
		        (_curRange =
		        /*istanbul ignore end*/
		        curRange).push.apply(
		        /*istanbul ignore start*/
		        _curRange
		        /*istanbul ignore end*/
		        ,
		        /*istanbul ignore start*/
		        _toConsumableArray$1(
		        /*istanbul ignore end*/
		        lines.map(function (entry) {
		          return (current.added ? '+' : '-') + entry;
		        }))); // Track the updated file position


		        if (current.added) {
		          newLine += lines.length;
		        } else {
		          oldLine += lines.length;
		        }
		      } else {
		        // Identical context lines. Track line changes
		        if (oldRangeStart) {
		          // Close out any changes that have been output (or join overlapping)
		          if (lines.length <= options.context * 2 && i < diff.length - 2) {
		            /*istanbul ignore start*/
		            var _curRange2;

		            /*istanbul ignore end*/
		            // Overlapping

		            /*istanbul ignore start*/

		            /*istanbul ignore end*/

		            /*istanbul ignore start*/
		            (_curRange2 =
		            /*istanbul ignore end*/
		            curRange).push.apply(
		            /*istanbul ignore start*/
		            _curRange2
		            /*istanbul ignore end*/
		            ,
		            /*istanbul ignore start*/
		            _toConsumableArray$1(
		            /*istanbul ignore end*/
		            contextLines(lines)));
		          } else {
		            /*istanbul ignore start*/
		            var _curRange3;

		            /*istanbul ignore end*/
		            // end the range and output
		            var contextSize = Math.min(lines.length, options.context);

		            /*istanbul ignore start*/

		            /*istanbul ignore end*/

		            /*istanbul ignore start*/
		            (_curRange3 =
		            /*istanbul ignore end*/
		            curRange).push.apply(
		            /*istanbul ignore start*/
		            _curRange3
		            /*istanbul ignore end*/
		            ,
		            /*istanbul ignore start*/
		            _toConsumableArray$1(
		            /*istanbul ignore end*/
		            contextLines(lines.slice(0, contextSize))));

		            var hunk = {
		              oldStart: oldRangeStart,
		              oldLines: oldLine - oldRangeStart + contextSize,
		              newStart: newRangeStart,
		              newLines: newLine - newRangeStart + contextSize,
		              lines: curRange
		            };

		            if (i >= diff.length - 2 && lines.length <= options.context) {
		              // EOF is inside this hunk
		              var oldEOFNewline = /\n$/.test(oldStr);
		              var newEOFNewline = /\n$/.test(newStr);
		              var noNlBeforeAdds = lines.length == 0 && curRange.length > hunk.oldLines;

		              if (!oldEOFNewline && noNlBeforeAdds && oldStr.length > 0) {
		                // special case: old has no eol and no trailing context; no-nl can end up before adds
		                // however, if the old file is empty, do not output the no-nl line
		                curRange.splice(hunk.oldLines, 0, '\\ No newline at end of file');
		              }

		              if (!oldEOFNewline && !noNlBeforeAdds || !newEOFNewline) {
		                curRange.push('\\ No newline at end of file');
		              }
		            }

		            hunks.push(hunk);
		            oldRangeStart = 0;
		            newRangeStart = 0;
		            curRange = [];
		          }
		        }

		        oldLine += lines.length;
		        newLine += lines.length;
		      }
		    };

		    for (var i = 0; i < diff.length; i++) {
		      /*istanbul ignore start*/
		      _loop(
		      /*istanbul ignore end*/
		      i);
		    }

		    return {
		      oldFileName: oldFileName,
		      newFileName: newFileName,
		      oldHeader: oldHeader,
		      newHeader: newHeader,
		      hunks: hunks
		    };
		  }

		  function formatPatch(diff) {
		    if (Array.isArray(diff)) {
		      return diff.map(formatPatch).join('\n');
		    }

		    var ret = [];

		    if (diff.oldFileName == diff.newFileName) {
		      ret.push('Index: ' + diff.oldFileName);
		    }

		    ret.push('===================================================================');
		    ret.push('--- ' + diff.oldFileName + (typeof diff.oldHeader === 'undefined' ? '' : '\t' + diff.oldHeader));
		    ret.push('+++ ' + diff.newFileName + (typeof diff.newHeader === 'undefined' ? '' : '\t' + diff.newHeader));

		    for (var i = 0; i < diff.hunks.length; i++) {
		      var hunk = diff.hunks[i]; // Unified Diff Format quirk: If the chunk size is 0,
		      // the first number is one lower than one would expect.
		      // https://www.artima.com/weblogs/viewpost.jsp?thread=164293

		      if (hunk.oldLines === 0) {
		        hunk.oldStart -= 1;
		      }

		      if (hunk.newLines === 0) {
		        hunk.newStart -= 1;
		      }

		      ret.push('@@ -' + hunk.oldStart + ',' + hunk.oldLines + ' +' + hunk.newStart + ',' + hunk.newLines + ' @@');
		      ret.push.apply(ret, hunk.lines);
		    }

		    return ret.join('\n') + '\n';
		  }

		  function createTwoFilesPatch(oldFileName, newFileName, oldStr, newStr, oldHeader, newHeader, options) {
		    return formatPatch(structuredPatch(oldFileName, newFileName, oldStr, newStr, oldHeader, newHeader, options));
		  }

		  function createPatch(fileName, oldStr, newStr, oldHeader, newHeader, options) {
		    return createTwoFilesPatch(fileName, fileName, oldStr, newStr, oldHeader, newHeader, options);
		  }

		  var array = {};

		  /*istanbul ignore start*/

		  Object.defineProperty(array, "__esModule", {
		    value: true
		  });
		  array.arrayEqual = arrayEqual;
		  array.arrayStartsWith = arrayStartsWith;

		  /*istanbul ignore end*/
		  function arrayEqual(a, b) {
		    if (a.length !== b.length) {
		      return false;
		    }

		    return arrayStartsWith(a, b);
		  }

		  function arrayStartsWith(array, start) {
		    if (start.length > array.length) {
		      return false;
		    }

		    for (var i = 0; i < start.length; i++) {
		      if (start[i] !== array[i]) {
		        return false;
		      }
		    }

		    return true;
		  }

		  /*istanbul ignore start*/

		  Object.defineProperty(merge$1, "__esModule", {
		    value: true
		  });
		  merge$1.calcLineCount = calcLineCount;
		  merge$1.merge = merge;

		  /*istanbul ignore end*/
		  var
		  /*istanbul ignore start*/
		  _create = create
		  /*istanbul ignore end*/
		  ;

		  var
		  /*istanbul ignore start*/
		  _parse = parse$2
		  /*istanbul ignore end*/
		  ;

		  var
		  /*istanbul ignore start*/
		  _array = array
		  /*istanbul ignore end*/
		  ;

		  /*istanbul ignore start*/ function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

		  function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

		  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

		  function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

		  function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

		  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

		  /*istanbul ignore end*/
		  function calcLineCount(hunk) {
		    /*istanbul ignore start*/
		    var _calcOldNewLineCount =
		    /*istanbul ignore end*/
		    calcOldNewLineCount(hunk.lines),
		        oldLines = _calcOldNewLineCount.oldLines,
		        newLines = _calcOldNewLineCount.newLines;

		    if (oldLines !== undefined) {
		      hunk.oldLines = oldLines;
		    } else {
		      delete hunk.oldLines;
		    }

		    if (newLines !== undefined) {
		      hunk.newLines = newLines;
		    } else {
		      delete hunk.newLines;
		    }
		  }

		  function merge(mine, theirs, base) {
		    mine = loadPatch(mine, base);
		    theirs = loadPatch(theirs, base);
		    var ret = {}; // For index we just let it pass through as it doesn't have any necessary meaning.
		    // Leaving sanity checks on this to the API consumer that may know more about the
		    // meaning in their own context.

		    if (mine.index || theirs.index) {
		      ret.index = mine.index || theirs.index;
		    }

		    if (mine.newFileName || theirs.newFileName) {
		      if (!fileNameChanged(mine)) {
		        // No header or no change in ours, use theirs (and ours if theirs does not exist)
		        ret.oldFileName = theirs.oldFileName || mine.oldFileName;
		        ret.newFileName = theirs.newFileName || mine.newFileName;
		        ret.oldHeader = theirs.oldHeader || mine.oldHeader;
		        ret.newHeader = theirs.newHeader || mine.newHeader;
		      } else if (!fileNameChanged(theirs)) {
		        // No header or no change in theirs, use ours
		        ret.oldFileName = mine.oldFileName;
		        ret.newFileName = mine.newFileName;
		        ret.oldHeader = mine.oldHeader;
		        ret.newHeader = mine.newHeader;
		      } else {
		        // Both changed... figure it out
		        ret.oldFileName = selectField(ret, mine.oldFileName, theirs.oldFileName);
		        ret.newFileName = selectField(ret, mine.newFileName, theirs.newFileName);
		        ret.oldHeader = selectField(ret, mine.oldHeader, theirs.oldHeader);
		        ret.newHeader = selectField(ret, mine.newHeader, theirs.newHeader);
		      }
		    }

		    ret.hunks = [];
		    var mineIndex = 0,
		        theirsIndex = 0,
		        mineOffset = 0,
		        theirsOffset = 0;

		    while (mineIndex < mine.hunks.length || theirsIndex < theirs.hunks.length) {
		      var mineCurrent = mine.hunks[mineIndex] || {
		        oldStart: Infinity
		      },
		          theirsCurrent = theirs.hunks[theirsIndex] || {
		        oldStart: Infinity
		      };

		      if (hunkBefore(mineCurrent, theirsCurrent)) {
		        // This patch does not overlap with any of the others, yay.
		        ret.hunks.push(cloneHunk(mineCurrent, mineOffset));
		        mineIndex++;
		        theirsOffset += mineCurrent.newLines - mineCurrent.oldLines;
		      } else if (hunkBefore(theirsCurrent, mineCurrent)) {
		        // This patch does not overlap with any of the others, yay.
		        ret.hunks.push(cloneHunk(theirsCurrent, theirsOffset));
		        theirsIndex++;
		        mineOffset += theirsCurrent.newLines - theirsCurrent.oldLines;
		      } else {
		        // Overlap, merge as best we can
		        var mergedHunk = {
		          oldStart: Math.min(mineCurrent.oldStart, theirsCurrent.oldStart),
		          oldLines: 0,
		          newStart: Math.min(mineCurrent.newStart + mineOffset, theirsCurrent.oldStart + theirsOffset),
		          newLines: 0,
		          lines: []
		        };
		        mergeLines(mergedHunk, mineCurrent.oldStart, mineCurrent.lines, theirsCurrent.oldStart, theirsCurrent.lines);
		        theirsIndex++;
		        mineIndex++;
		        ret.hunks.push(mergedHunk);
		      }
		    }

		    return ret;
		  }

		  function loadPatch(param, base) {
		    if (typeof param === 'string') {
		      if (/^@@/m.test(param) || /^Index:/m.test(param)) {
		        return (
		          /*istanbul ignore start*/
		          (/*istanbul ignore end*/

		          /*istanbul ignore start*/
		          0, _parse
		          /*istanbul ignore end*/
		          .
		          /*istanbul ignore start*/
		          parsePatch)
		          /*istanbul ignore end*/
		          (param)[0]
		        );
		      }

		      if (!base) {
		        throw new Error('Must provide a base reference or pass in a patch');
		      }

		      return (
		        /*istanbul ignore start*/
		        (/*istanbul ignore end*/

		        /*istanbul ignore start*/
		        0, _create
		        /*istanbul ignore end*/
		        .
		        /*istanbul ignore start*/
		        structuredPatch)
		        /*istanbul ignore end*/
		        (undefined, undefined, base, param)
		      );
		    }

		    return param;
		  }

		  function fileNameChanged(patch) {
		    return patch.newFileName && patch.newFileName !== patch.oldFileName;
		  }

		  function selectField(index, mine, theirs) {
		    if (mine === theirs) {
		      return mine;
		    } else {
		      index.conflict = true;
		      return {
		        mine: mine,
		        theirs: theirs
		      };
		    }
		  }

		  function hunkBefore(test, check) {
		    return test.oldStart < check.oldStart && test.oldStart + test.oldLines < check.oldStart;
		  }

		  function cloneHunk(hunk, offset) {
		    return {
		      oldStart: hunk.oldStart,
		      oldLines: hunk.oldLines,
		      newStart: hunk.newStart + offset,
		      newLines: hunk.newLines,
		      lines: hunk.lines
		    };
		  }

		  function mergeLines(hunk, mineOffset, mineLines, theirOffset, theirLines) {
		    // This will generally result in a conflicted hunk, but there are cases where the context
		    // is the only overlap where we can successfully merge the content here.
		    var mine = {
		      offset: mineOffset,
		      lines: mineLines,
		      index: 0
		    },
		        their = {
		      offset: theirOffset,
		      lines: theirLines,
		      index: 0
		    }; // Handle any leading content

		    insertLeading(hunk, mine, their);
		    insertLeading(hunk, their, mine); // Now in the overlap content. Scan through and select the best changes from each.

		    while (mine.index < mine.lines.length && their.index < their.lines.length) {
		      var mineCurrent = mine.lines[mine.index],
		          theirCurrent = their.lines[their.index];

		      if ((mineCurrent[0] === '-' || mineCurrent[0] === '+') && (theirCurrent[0] === '-' || theirCurrent[0] === '+')) {
		        // Both modified ...
		        mutualChange(hunk, mine, their);
		      } else if (mineCurrent[0] === '+' && theirCurrent[0] === ' ') {
		        /*istanbul ignore start*/
		        var _hunk$lines;

		        /*istanbul ignore end*/
		        // Mine inserted

		        /*istanbul ignore start*/

		        /*istanbul ignore end*/

		        /*istanbul ignore start*/
		        (_hunk$lines =
		        /*istanbul ignore end*/
		        hunk.lines).push.apply(
		        /*istanbul ignore start*/
		        _hunk$lines
		        /*istanbul ignore end*/
		        ,
		        /*istanbul ignore start*/
		        _toConsumableArray(
		        /*istanbul ignore end*/
		        collectChange(mine)));
		      } else if (theirCurrent[0] === '+' && mineCurrent[0] === ' ') {
		        /*istanbul ignore start*/
		        var _hunk$lines2;

		        /*istanbul ignore end*/
		        // Theirs inserted

		        /*istanbul ignore start*/

		        /*istanbul ignore end*/

		        /*istanbul ignore start*/
		        (_hunk$lines2 =
		        /*istanbul ignore end*/
		        hunk.lines).push.apply(
		        /*istanbul ignore start*/
		        _hunk$lines2
		        /*istanbul ignore end*/
		        ,
		        /*istanbul ignore start*/
		        _toConsumableArray(
		        /*istanbul ignore end*/
		        collectChange(their)));
		      } else if (mineCurrent[0] === '-' && theirCurrent[0] === ' ') {
		        // Mine removed or edited
		        removal(hunk, mine, their);
		      } else if (theirCurrent[0] === '-' && mineCurrent[0] === ' ') {
		        // Their removed or edited
		        removal(hunk, their, mine, true);
		      } else if (mineCurrent === theirCurrent) {
		        // Context identity
		        hunk.lines.push(mineCurrent);
		        mine.index++;
		        their.index++;
		      } else {
		        // Context mismatch
		        conflict(hunk, collectChange(mine), collectChange(their));
		      }
		    } // Now push anything that may be remaining


		    insertTrailing(hunk, mine);
		    insertTrailing(hunk, their);
		    calcLineCount(hunk);
		  }

		  function mutualChange(hunk, mine, their) {
		    var myChanges = collectChange(mine),
		        theirChanges = collectChange(their);

		    if (allRemoves(myChanges) && allRemoves(theirChanges)) {
		      // Special case for remove changes that are supersets of one another
		      if (
		      /*istanbul ignore start*/
		      (/*istanbul ignore end*/

		      /*istanbul ignore start*/
		      0, _array
		      /*istanbul ignore end*/
		      .
		      /*istanbul ignore start*/
		      arrayStartsWith)
		      /*istanbul ignore end*/
		      (myChanges, theirChanges) && skipRemoveSuperset(their, myChanges, myChanges.length - theirChanges.length)) {
		        /*istanbul ignore start*/
		        var _hunk$lines3;

		        /*istanbul ignore end*/

		        /*istanbul ignore start*/

		        /*istanbul ignore end*/

		        /*istanbul ignore start*/
		        (_hunk$lines3 =
		        /*istanbul ignore end*/
		        hunk.lines).push.apply(
		        /*istanbul ignore start*/
		        _hunk$lines3
		        /*istanbul ignore end*/
		        ,
		        /*istanbul ignore start*/
		        _toConsumableArray(
		        /*istanbul ignore end*/
		        myChanges));

		        return;
		      } else if (
		      /*istanbul ignore start*/
		      (/*istanbul ignore end*/

		      /*istanbul ignore start*/
		      0, _array
		      /*istanbul ignore end*/
		      .
		      /*istanbul ignore start*/
		      arrayStartsWith)
		      /*istanbul ignore end*/
		      (theirChanges, myChanges) && skipRemoveSuperset(mine, theirChanges, theirChanges.length - myChanges.length)) {
		        /*istanbul ignore start*/
		        var _hunk$lines4;

		        /*istanbul ignore end*/

		        /*istanbul ignore start*/

		        /*istanbul ignore end*/

		        /*istanbul ignore start*/
		        (_hunk$lines4 =
		        /*istanbul ignore end*/
		        hunk.lines).push.apply(
		        /*istanbul ignore start*/
		        _hunk$lines4
		        /*istanbul ignore end*/
		        ,
		        /*istanbul ignore start*/
		        _toConsumableArray(
		        /*istanbul ignore end*/
		        theirChanges));

		        return;
		      }
		    } else if (
		    /*istanbul ignore start*/
		    (/*istanbul ignore end*/

		    /*istanbul ignore start*/
		    0, _array
		    /*istanbul ignore end*/
		    .
		    /*istanbul ignore start*/
		    arrayEqual)
		    /*istanbul ignore end*/
		    (myChanges, theirChanges)) {
		      /*istanbul ignore start*/
		      var _hunk$lines5;

		      /*istanbul ignore end*/

		      /*istanbul ignore start*/

		      /*istanbul ignore end*/

		      /*istanbul ignore start*/
		      (_hunk$lines5 =
		      /*istanbul ignore end*/
		      hunk.lines).push.apply(
		      /*istanbul ignore start*/
		      _hunk$lines5
		      /*istanbul ignore end*/
		      ,
		      /*istanbul ignore start*/
		      _toConsumableArray(
		      /*istanbul ignore end*/
		      myChanges));

		      return;
		    }

		    conflict(hunk, myChanges, theirChanges);
		  }

		  function removal(hunk, mine, their, swap) {
		    var myChanges = collectChange(mine),
		        theirChanges = collectContext(their, myChanges);

		    if (theirChanges.merged) {
		      /*istanbul ignore start*/
		      var _hunk$lines6;

		      /*istanbul ignore end*/

		      /*istanbul ignore start*/

		      /*istanbul ignore end*/

		      /*istanbul ignore start*/
		      (_hunk$lines6 =
		      /*istanbul ignore end*/
		      hunk.lines).push.apply(
		      /*istanbul ignore start*/
		      _hunk$lines6
		      /*istanbul ignore end*/
		      ,
		      /*istanbul ignore start*/
		      _toConsumableArray(
		      /*istanbul ignore end*/
		      theirChanges.merged));
		    } else {
		      conflict(hunk, swap ? theirChanges : myChanges, swap ? myChanges : theirChanges);
		    }
		  }

		  function conflict(hunk, mine, their) {
		    hunk.conflict = true;
		    hunk.lines.push({
		      conflict: true,
		      mine: mine,
		      theirs: their
		    });
		  }

		  function insertLeading(hunk, insert, their) {
		    while (insert.offset < their.offset && insert.index < insert.lines.length) {
		      var line = insert.lines[insert.index++];
		      hunk.lines.push(line);
		      insert.offset++;
		    }
		  }

		  function insertTrailing(hunk, insert) {
		    while (insert.index < insert.lines.length) {
		      var line = insert.lines[insert.index++];
		      hunk.lines.push(line);
		    }
		  }

		  function collectChange(state) {
		    var ret = [],
		        operation = state.lines[state.index][0];

		    while (state.index < state.lines.length) {
		      var line = state.lines[state.index]; // Group additions that are immediately after subtractions and treat them as one "atomic" modify change.

		      if (operation === '-' && line[0] === '+') {
		        operation = '+';
		      }

		      if (operation === line[0]) {
		        ret.push(line);
		        state.index++;
		      } else {
		        break;
		      }
		    }

		    return ret;
		  }

		  function collectContext(state, matchChanges) {
		    var changes = [],
		        merged = [],
		        matchIndex = 0,
		        contextChanges = false,
		        conflicted = false;

		    while (matchIndex < matchChanges.length && state.index < state.lines.length) {
		      var change = state.lines[state.index],
		          match = matchChanges[matchIndex]; // Once we've hit our add, then we are done

		      if (match[0] === '+') {
		        break;
		      }

		      contextChanges = contextChanges || change[0] !== ' ';
		      merged.push(match);
		      matchIndex++; // Consume any additions in the other block as a conflict to attempt
		      // to pull in the remaining context after this

		      if (change[0] === '+') {
		        conflicted = true;

		        while (change[0] === '+') {
		          changes.push(change);
		          change = state.lines[++state.index];
		        }
		      }

		      if (match.substr(1) === change.substr(1)) {
		        changes.push(change);
		        state.index++;
		      } else {
		        conflicted = true;
		      }
		    }

		    if ((matchChanges[matchIndex] || '')[0] === '+' && contextChanges) {
		      conflicted = true;
		    }

		    if (conflicted) {
		      return changes;
		    }

		    while (matchIndex < matchChanges.length) {
		      merged.push(matchChanges[matchIndex++]);
		    }

		    return {
		      merged: merged,
		      changes: changes
		    };
		  }

		  function allRemoves(changes) {
		    return changes.reduce(function (prev, change) {
		      return prev && change[0] === '-';
		    }, true);
		  }

		  function skipRemoveSuperset(state, removeChanges, delta) {
		    for (var i = 0; i < delta; i++) {
		      var changeContent = removeChanges[removeChanges.length - delta + i].substr(1);

		      if (state.lines[state.index + i] !== ' ' + changeContent) {
		        return false;
		      }
		    }

		    state.index += delta;
		    return true;
		  }

		  function calcOldNewLineCount(lines) {
		    var oldLines = 0;
		    var newLines = 0;
		    lines.forEach(function (line) {
		      if (typeof line !== 'string') {
		        var myCount = calcOldNewLineCount(line.mine);
		        var theirCount = calcOldNewLineCount(line.theirs);

		        if (oldLines !== undefined) {
		          if (myCount.oldLines === theirCount.oldLines) {
		            oldLines += myCount.oldLines;
		          } else {
		            oldLines = undefined;
		          }
		        }

		        if (newLines !== undefined) {
		          if (myCount.newLines === theirCount.newLines) {
		            newLines += myCount.newLines;
		          } else {
		            newLines = undefined;
		          }
		        }
		      } else {
		        if (newLines !== undefined && (line[0] === '+' || line[0] === ' ')) {
		          newLines++;
		        }

		        if (oldLines !== undefined && (line[0] === '-' || line[0] === ' ')) {
		          oldLines++;
		        }
		      }
		    });
		    return {
		      oldLines: oldLines,
		      newLines: newLines
		    };
		  }

		  var reverse = {};

		  /*istanbul ignore start*/

		  Object.defineProperty(reverse, "__esModule", {
		    value: true
		  });
		  reverse.reversePatch = reversePatch;

		  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

		  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

		  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

		  /*istanbul ignore end*/
		  function reversePatch(structuredPatch) {
		    if (Array.isArray(structuredPatch)) {
		      return structuredPatch.map(reversePatch).reverse();
		    }

		    return (
		      /*istanbul ignore start*/
		      _objectSpread(_objectSpread({},
		      /*istanbul ignore end*/
		      structuredPatch), {}, {
		        oldFileName: structuredPatch.newFileName,
		        oldHeader: structuredPatch.newHeader,
		        newFileName: structuredPatch.oldFileName,
		        newHeader: structuredPatch.oldHeader,
		        hunks: structuredPatch.hunks.map(function (hunk) {
		          return {
		            oldLines: hunk.newLines,
		            oldStart: hunk.newStart,
		            newLines: hunk.oldLines,
		            newStart: hunk.oldStart,
		            linedelimiters: hunk.linedelimiters,
		            lines: hunk.lines.map(function (l) {
		              if (l.startsWith('-')) {
		                return (
		                  /*istanbul ignore start*/
		                  "+".concat(
		                  /*istanbul ignore end*/
		                  l.slice(1))
		                );
		              }

		              if (l.startsWith('+')) {
		                return (
		                  /*istanbul ignore start*/
		                  "-".concat(
		                  /*istanbul ignore end*/
		                  l.slice(1))
		                );
		              }

		              return l;
		            })
		          };
		        })
		      })
		    );
		  }

		  var dmp = {};

		  /*istanbul ignore start*/

		  Object.defineProperty(dmp, "__esModule", {
		    value: true
		  });
		  dmp.convertChangesToDMP = convertChangesToDMP;

		  /*istanbul ignore end*/
		  // See: http://code.google.com/p/google-diff-match-patch/wiki/API
		  function convertChangesToDMP(changes) {
		    var ret = [],
		        change,
		        operation;

		    for (var i = 0; i < changes.length; i++) {
		      change = changes[i];

		      if (change.added) {
		        operation = 1;
		      } else if (change.removed) {
		        operation = -1;
		      } else {
		        operation = 0;
		      }

		      ret.push([operation, change.value]);
		    }

		    return ret;
		  }

		  var xml = {};

		  /*istanbul ignore start*/

		  Object.defineProperty(xml, "__esModule", {
		    value: true
		  });
		  xml.convertChangesToXML = convertChangesToXML;

		  /*istanbul ignore end*/
		  function convertChangesToXML(changes) {
		    var ret = [];

		    for (var i = 0; i < changes.length; i++) {
		      var change = changes[i];

		      if (change.added) {
		        ret.push('<ins>');
		      } else if (change.removed) {
		        ret.push('<del>');
		      }

		      ret.push(escapeHTML(change.value));

		      if (change.added) {
		        ret.push('</ins>');
		      } else if (change.removed) {
		        ret.push('</del>');
		      }
		    }

		    return ret.join('');
		  }

		  function escapeHTML(s) {
		    var n = s;
		    n = n.replace(/&/g, '&amp;');
		    n = n.replace(/</g, '&lt;');
		    n = n.replace(/>/g, '&gt;');
		    n = n.replace(/"/g, '&quot;');
		    return n;
		  }

		  /*istanbul ignore start*/

		  (function (exports) {

		  Object.defineProperty(exports, "__esModule", {
		    value: true
		  });
		  Object.defineProperty(exports, "Diff", {
		    enumerable: true,
		    get: function get() {
		      return _base["default"];
		    }
		  });
		  Object.defineProperty(exports, "diffChars", {
		    enumerable: true,
		    get: function get() {
		      return _character.diffChars;
		    }
		  });
		  Object.defineProperty(exports, "diffWords", {
		    enumerable: true,
		    get: function get() {
		      return _word.diffWords;
		    }
		  });
		  Object.defineProperty(exports, "diffWordsWithSpace", {
		    enumerable: true,
		    get: function get() {
		      return _word.diffWordsWithSpace;
		    }
		  });
		  Object.defineProperty(exports, "diffLines", {
		    enumerable: true,
		    get: function get() {
		      return _line.diffLines;
		    }
		  });
		  Object.defineProperty(exports, "diffTrimmedLines", {
		    enumerable: true,
		    get: function get() {
		      return _line.diffTrimmedLines;
		    }
		  });
		  Object.defineProperty(exports, "diffSentences", {
		    enumerable: true,
		    get: function get() {
		      return _sentence.diffSentences;
		    }
		  });
		  Object.defineProperty(exports, "diffCss", {
		    enumerable: true,
		    get: function get() {
		      return _css.diffCss;
		    }
		  });
		  Object.defineProperty(exports, "diffJson", {
		    enumerable: true,
		    get: function get() {
		      return _json.diffJson;
		    }
		  });
		  Object.defineProperty(exports, "canonicalize", {
		    enumerable: true,
		    get: function get() {
		      return _json.canonicalize;
		    }
		  });
		  Object.defineProperty(exports, "diffArrays", {
		    enumerable: true,
		    get: function get() {
		      return _array.diffArrays;
		    }
		  });
		  Object.defineProperty(exports, "applyPatch", {
		    enumerable: true,
		    get: function get() {
		      return _apply.applyPatch;
		    }
		  });
		  Object.defineProperty(exports, "applyPatches", {
		    enumerable: true,
		    get: function get() {
		      return _apply.applyPatches;
		    }
		  });
		  Object.defineProperty(exports, "parsePatch", {
		    enumerable: true,
		    get: function get() {
		      return _parse.parsePatch;
		    }
		  });
		  Object.defineProperty(exports, "merge", {
		    enumerable: true,
		    get: function get() {
		      return _merge.merge;
		    }
		  });
		  Object.defineProperty(exports, "reversePatch", {
		    enumerable: true,
		    get: function get() {
		      return _reverse.reversePatch;
		    }
		  });
		  Object.defineProperty(exports, "structuredPatch", {
		    enumerable: true,
		    get: function get() {
		      return _create.structuredPatch;
		    }
		  });
		  Object.defineProperty(exports, "createTwoFilesPatch", {
		    enumerable: true,
		    get: function get() {
		      return _create.createTwoFilesPatch;
		    }
		  });
		  Object.defineProperty(exports, "createPatch", {
		    enumerable: true,
		    get: function get() {
		      return _create.createPatch;
		    }
		  });
		  Object.defineProperty(exports, "formatPatch", {
		    enumerable: true,
		    get: function get() {
		      return _create.formatPatch;
		    }
		  });
		  Object.defineProperty(exports, "convertChangesToDMP", {
		    enumerable: true,
		    get: function get() {
		      return _dmp.convertChangesToDMP;
		    }
		  });
		  Object.defineProperty(exports, "convertChangesToXML", {
		    enumerable: true,
		    get: function get() {
		      return _xml.convertChangesToXML;
		    }
		  });

		  /*istanbul ignore end*/
		  var
		  /*istanbul ignore start*/
		  _base = _interopRequireDefault(base)
		  /*istanbul ignore end*/
		  ;

		  var
		  /*istanbul ignore start*/
		  _character = character
		  /*istanbul ignore end*/
		  ;

		  var
		  /*istanbul ignore start*/
		  _word = word
		  /*istanbul ignore end*/
		  ;

		  var
		  /*istanbul ignore start*/
		  _line = line
		  /*istanbul ignore end*/
		  ;

		  var
		  /*istanbul ignore start*/
		  _sentence = sentence
		  /*istanbul ignore end*/
		  ;

		  var
		  /*istanbul ignore start*/
		  _css = css
		  /*istanbul ignore end*/
		  ;

		  var
		  /*istanbul ignore start*/
		  _json = json$1
		  /*istanbul ignore end*/
		  ;

		  var
		  /*istanbul ignore start*/
		  _array = array$1
		  /*istanbul ignore end*/
		  ;

		  var
		  /*istanbul ignore start*/
		  _apply = apply
		  /*istanbul ignore end*/
		  ;

		  var
		  /*istanbul ignore start*/
		  _parse = parse$2
		  /*istanbul ignore end*/
		  ;

		  var
		  /*istanbul ignore start*/
		  _merge = merge$1
		  /*istanbul ignore end*/
		  ;

		  var
		  /*istanbul ignore start*/
		  _reverse = reverse
		  /*istanbul ignore end*/
		  ;

		  var
		  /*istanbul ignore start*/
		  _create = create
		  /*istanbul ignore end*/
		  ;

		  var
		  /*istanbul ignore start*/
		  _dmp = dmp
		  /*istanbul ignore end*/
		  ;

		  var
		  /*istanbul ignore start*/
		  _xml = xml
		  /*istanbul ignore end*/
		  ;

		  /*istanbul ignore start*/ function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

		  /*istanbul ignore end*/

		  }(lib));

		  /**
		   * Helpers.
		   */

		  var s$1 = 1000;
		  var m$1 = s$1 * 60;
		  var h$1 = m$1 * 60;
		  var d$1 = h$1 * 24;
		  var w$1 = d$1 * 7;
		  var y$1 = d$1 * 365.25;

		  /**
		   * Parse or format the given `val`.
		   *
		   * Options:
		   *
		   *  - `long` verbose formatting [false]
		   *
		   * @param {String|Number} val
		   * @param {Object} [options]
		   * @throws {Error} throw an error if val is not a non-empty string or a number
		   * @return {String|Number}
		   * @api public
		   */

		  var ms$1 = function (val, options) {
		    options = options || {};
		    var type = typeof val;
		    if (type === 'string' && val.length > 0) {
		      return parse$1(val);
		    } else if (type === 'number' && isFinite(val)) {
		      return options.long ? fmtLong$1(val) : fmtShort$1(val);
		    }
		    throw new Error(
		      'val is not a non-empty string or a valid number. val=' +
		        JSON.stringify(val)
		    );
		  };

		  /**
		   * Parse the given `str` and return milliseconds.
		   *
		   * @param {String} str
		   * @return {Number}
		   * @api private
		   */

		  function parse$1(str) {
		    str = String(str);
		    if (str.length > 100) {
		      return;
		    }
		    var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
		      str
		    );
		    if (!match) {
		      return;
		    }
		    var n = parseFloat(match[1]);
		    var type = (match[2] || 'ms').toLowerCase();
		    switch (type) {
		      case 'years':
		      case 'year':
		      case 'yrs':
		      case 'yr':
		      case 'y':
		        return n * y$1;
		      case 'weeks':
		      case 'week':
		      case 'w':
		        return n * w$1;
		      case 'days':
		      case 'day':
		      case 'd':
		        return n * d$1;
		      case 'hours':
		      case 'hour':
		      case 'hrs':
		      case 'hr':
		      case 'h':
		        return n * h$1;
		      case 'minutes':
		      case 'minute':
		      case 'mins':
		      case 'min':
		      case 'm':
		        return n * m$1;
		      case 'seconds':
		      case 'second':
		      case 'secs':
		      case 'sec':
		      case 's':
		        return n * s$1;
		      case 'milliseconds':
		      case 'millisecond':
		      case 'msecs':
		      case 'msec':
		      case 'ms':
		        return n;
		      default:
		        return undefined;
		    }
		  }

		  /**
		   * Short format for `ms`.
		   *
		   * @param {Number} ms
		   * @return {String}
		   * @api private
		   */

		  function fmtShort$1(ms) {
		    var msAbs = Math.abs(ms);
		    if (msAbs >= d$1) {
		      return Math.round(ms / d$1) + 'd';
		    }
		    if (msAbs >= h$1) {
		      return Math.round(ms / h$1) + 'h';
		    }
		    if (msAbs >= m$1) {
		      return Math.round(ms / m$1) + 'm';
		    }
		    if (msAbs >= s$1) {
		      return Math.round(ms / s$1) + 's';
		    }
		    return ms + 'ms';
		  }

		  /**
		   * Long format for `ms`.
		   *
		   * @param {Number} ms
		   * @return {String}
		   * @api private
		   */

		  function fmtLong$1(ms) {
		    var msAbs = Math.abs(ms);
		    if (msAbs >= d$1) {
		      return plural$1(ms, msAbs, d$1, 'day');
		    }
		    if (msAbs >= h$1) {
		      return plural$1(ms, msAbs, h$1, 'hour');
		    }
		    if (msAbs >= m$1) {
		      return plural$1(ms, msAbs, m$1, 'minute');
		    }
		    if (msAbs >= s$1) {
		      return plural$1(ms, msAbs, s$1, 'second');
		    }
		    return ms + ' ms';
		  }

		  /**
		   * Pluralization helper.
		   */

		  function plural$1(ms, msAbs, n, name) {
		    var isPlural = msAbs >= n * 1.5;
		    return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');
		  }

		  var lookup = [];
		  var revLookup = [];
		  var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
		  var inited = false;
		  function init () {
		    inited = true;
		    var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
		    for (var i = 0, len = code.length; i < len; ++i) {
		      lookup[i] = code[i];
		      revLookup[code.charCodeAt(i)] = i;
		    }

		    revLookup['-'.charCodeAt(0)] = 62;
		    revLookup['_'.charCodeAt(0)] = 63;
		  }

		  function toByteArray (b64) {
		    if (!inited) {
		      init();
		    }
		    var i, j, l, tmp, placeHolders, arr;
		    var len = b64.length;

		    if (len % 4 > 0) {
		      throw new Error('Invalid string. Length must be a multiple of 4')
		    }

		    // the number of equal signs (place holders)
		    // if there are two placeholders, than the two characters before it
		    // represent one byte
		    // if there is only one, then the three characters before it represent 2 bytes
		    // this is just a cheap hack to not do indexOf twice
		    placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0;

		    // base64 is 4/3 + up to two characters of the original data
		    arr = new Arr(len * 3 / 4 - placeHolders);

		    // if there are placeholders, only get up to the last complete 4 chars
		    l = placeHolders > 0 ? len - 4 : len;

		    var L = 0;

		    for (i = 0, j = 0; i < l; i += 4, j += 3) {
		      tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)];
		      arr[L++] = (tmp >> 16) & 0xFF;
		      arr[L++] = (tmp >> 8) & 0xFF;
		      arr[L++] = tmp & 0xFF;
		    }

		    if (placeHolders === 2) {
		      tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4);
		      arr[L++] = tmp & 0xFF;
		    } else if (placeHolders === 1) {
		      tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2);
		      arr[L++] = (tmp >> 8) & 0xFF;
		      arr[L++] = tmp & 0xFF;
		    }

		    return arr
		  }

		  function tripletToBase64 (num) {
		    return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
		  }

		  function encodeChunk (uint8, start, end) {
		    var tmp;
		    var output = [];
		    for (var i = start; i < end; i += 3) {
		      tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2]);
		      output.push(tripletToBase64(tmp));
		    }
		    return output.join('')
		  }

		  function fromByteArray (uint8) {
		    if (!inited) {
		      init();
		    }
		    var tmp;
		    var len = uint8.length;
		    var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
		    var output = '';
		    var parts = [];
		    var maxChunkLength = 16383; // must be multiple of 3

		    // go through the array every three bytes, we'll deal with trailing stuff later
		    for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
		      parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)));
		    }

		    // pad the end with zeros, but make sure to not forget the extra bytes
		    if (extraBytes === 1) {
		      tmp = uint8[len - 1];
		      output += lookup[tmp >> 2];
		      output += lookup[(tmp << 4) & 0x3F];
		      output += '==';
		    } else if (extraBytes === 2) {
		      tmp = (uint8[len - 2] << 8) + (uint8[len - 1]);
		      output += lookup[tmp >> 10];
		      output += lookup[(tmp >> 4) & 0x3F];
		      output += lookup[(tmp << 2) & 0x3F];
		      output += '=';
		    }

		    parts.push(output);

		    return parts.join('')
		  }

		  function read (buffer, offset, isLE, mLen, nBytes) {
		    var e, m;
		    var eLen = nBytes * 8 - mLen - 1;
		    var eMax = (1 << eLen) - 1;
		    var eBias = eMax >> 1;
		    var nBits = -7;
		    var i = isLE ? (nBytes - 1) : 0;
		    var d = isLE ? -1 : 1;
		    var s = buffer[offset + i];

		    i += d;

		    e = s & ((1 << (-nBits)) - 1);
		    s >>= (-nBits);
		    nBits += eLen;
		    for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

		    m = e & ((1 << (-nBits)) - 1);
		    e >>= (-nBits);
		    nBits += mLen;
		    for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

		    if (e === 0) {
		      e = 1 - eBias;
		    } else if (e === eMax) {
		      return m ? NaN : ((s ? -1 : 1) * Infinity)
		    } else {
		      m = m + Math.pow(2, mLen);
		      e = e - eBias;
		    }
		    return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
		  }

		  function write (buffer, value, offset, isLE, mLen, nBytes) {
		    var e, m, c;
		    var eLen = nBytes * 8 - mLen - 1;
		    var eMax = (1 << eLen) - 1;
		    var eBias = eMax >> 1;
		    var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0);
		    var i = isLE ? 0 : (nBytes - 1);
		    var d = isLE ? 1 : -1;
		    var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

		    value = Math.abs(value);

		    if (isNaN(value) || value === Infinity) {
		      m = isNaN(value) ? 1 : 0;
		      e = eMax;
		    } else {
		      e = Math.floor(Math.log(value) / Math.LN2);
		      if (value * (c = Math.pow(2, -e)) < 1) {
		        e--;
		        c *= 2;
		      }
		      if (e + eBias >= 1) {
		        value += rt / c;
		      } else {
		        value += rt * Math.pow(2, 1 - eBias);
		      }
		      if (value * c >= 2) {
		        e++;
		        c /= 2;
		      }

		      if (e + eBias >= eMax) {
		        m = 0;
		        e = eMax;
		      } else if (e + eBias >= 1) {
		        m = (value * c - 1) * Math.pow(2, mLen);
		        e = e + eBias;
		      } else {
		        m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
		        e = 0;
		      }
		    }

		    for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

		    e = (e << mLen) | m;
		    eLen += mLen;
		    for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

		    buffer[offset + i - d] |= s * 128;
		  }

		  var toString$1 = {}.toString;

		  var isArray = Array.isArray || function (arr) {
		    return toString$1.call(arr) == '[object Array]';
		  };

		  var INSPECT_MAX_BYTES = 50;

		  /**
		   * If `Buffer.TYPED_ARRAY_SUPPORT`:
		   *   === true    Use Uint8Array implementation (fastest)
		   *   === false   Use Object implementation (most compatible, even IE6)
		   *
		   * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
		   * Opera 11.6+, iOS 4.2+.
		   *
		   * Due to various browser bugs, sometimes the Object implementation will be used even
		   * when the browser supports typed arrays.
		   *
		   * Note:
		   *
		   *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
		   *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
		   *
		   *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
		   *
		   *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
		   *     incorrect length in some situations.

		   * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
		   * get the Object implementation, which is slower but behaves correctly.
		   */
		  Buffer.TYPED_ARRAY_SUPPORT = global$1.TYPED_ARRAY_SUPPORT !== undefined
		    ? global$1.TYPED_ARRAY_SUPPORT
		    : true;

		  /*
		   * Export kMaxLength after typed array support is determined.
		   */
		  kMaxLength();

		  function kMaxLength () {
		    return Buffer.TYPED_ARRAY_SUPPORT
		      ? 0x7fffffff
		      : 0x3fffffff
		  }

		  function createBuffer (that, length) {
		    if (kMaxLength() < length) {
		      throw new RangeError('Invalid typed array length')
		    }
		    if (Buffer.TYPED_ARRAY_SUPPORT) {
		      // Return an augmented `Uint8Array` instance, for best performance
		      that = new Uint8Array(length);
		      that.__proto__ = Buffer.prototype;
		    } else {
		      // Fallback: Return an object instance of the Buffer class
		      if (that === null) {
		        that = new Buffer(length);
		      }
		      that.length = length;
		    }

		    return that
		  }

		  /**
		   * The Buffer constructor returns instances of `Uint8Array` that have their
		   * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
		   * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
		   * and the `Uint8Array` methods. Square bracket notation works as expected -- it
		   * returns a single octet.
		   *
		   * The `Uint8Array` prototype remains unmodified.
		   */

		  function Buffer (arg, encodingOrOffset, length) {
		    if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
		      return new Buffer(arg, encodingOrOffset, length)
		    }

		    // Common case.
		    if (typeof arg === 'number') {
		      if (typeof encodingOrOffset === 'string') {
		        throw new Error(
		          'If encoding is specified then the first argument must be a string'
		        )
		      }
		      return allocUnsafe(this, arg)
		    }
		    return from(this, arg, encodingOrOffset, length)
		  }

		  Buffer.poolSize = 8192; // not used by this implementation

		  // TODO: Legacy, not needed anymore. Remove in next major version.
		  Buffer._augment = function (arr) {
		    arr.__proto__ = Buffer.prototype;
		    return arr
		  };

		  function from (that, value, encodingOrOffset, length) {
		    if (typeof value === 'number') {
		      throw new TypeError('"value" argument must not be a number')
		    }

		    if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
		      return fromArrayBuffer(that, value, encodingOrOffset, length)
		    }

		    if (typeof value === 'string') {
		      return fromString(that, value, encodingOrOffset)
		    }

		    return fromObject(that, value)
		  }

		  /**
		   * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
		   * if value is a number.
		   * Buffer.from(str[, encoding])
		   * Buffer.from(array)
		   * Buffer.from(buffer)
		   * Buffer.from(arrayBuffer[, byteOffset[, length]])
		   **/
		  Buffer.from = function (value, encodingOrOffset, length) {
		    return from(null, value, encodingOrOffset, length)
		  };

		  if (Buffer.TYPED_ARRAY_SUPPORT) {
		    Buffer.prototype.__proto__ = Uint8Array.prototype;
		    Buffer.__proto__ = Uint8Array;
		    if (typeof Symbol !== 'undefined' && Symbol.species &&
		        Buffer[Symbol.species] === Buffer) ;
		  }

		  function assertSize (size) {
		    if (typeof size !== 'number') {
		      throw new TypeError('"size" argument must be a number')
		    } else if (size < 0) {
		      throw new RangeError('"size" argument must not be negative')
		    }
		  }

		  function alloc (that, size, fill, encoding) {
		    assertSize(size);
		    if (size <= 0) {
		      return createBuffer(that, size)
		    }
		    if (fill !== undefined) {
		      // Only pay attention to encoding if it's a string. This
		      // prevents accidentally sending in a number that would
		      // be interpretted as a start offset.
		      return typeof encoding === 'string'
		        ? createBuffer(that, size).fill(fill, encoding)
		        : createBuffer(that, size).fill(fill)
		    }
		    return createBuffer(that, size)
		  }

		  /**
		   * Creates a new filled Buffer instance.
		   * alloc(size[, fill[, encoding]])
		   **/
		  Buffer.alloc = function (size, fill, encoding) {
		    return alloc(null, size, fill, encoding)
		  };

		  function allocUnsafe (that, size) {
		    assertSize(size);
		    that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);
		    if (!Buffer.TYPED_ARRAY_SUPPORT) {
		      for (var i = 0; i < size; ++i) {
		        that[i] = 0;
		      }
		    }
		    return that
		  }

		  /**
		   * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
		   * */
		  Buffer.allocUnsafe = function (size) {
		    return allocUnsafe(null, size)
		  };
		  /**
		   * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
		   */
		  Buffer.allocUnsafeSlow = function (size) {
		    return allocUnsafe(null, size)
		  };

		  function fromString (that, string, encoding) {
		    if (typeof encoding !== 'string' || encoding === '') {
		      encoding = 'utf8';
		    }

		    if (!Buffer.isEncoding(encoding)) {
		      throw new TypeError('"encoding" must be a valid string encoding')
		    }

		    var length = byteLength(string, encoding) | 0;
		    that = createBuffer(that, length);

		    var actual = that.write(string, encoding);

		    if (actual !== length) {
		      // Writing a hex string, for example, that contains invalid characters will
		      // cause everything after the first invalid character to be ignored. (e.g.
		      // 'abxxcd' will be treated as 'ab')
		      that = that.slice(0, actual);
		    }

		    return that
		  }

		  function fromArrayLike (that, array) {
		    var length = array.length < 0 ? 0 : checked(array.length) | 0;
		    that = createBuffer(that, length);
		    for (var i = 0; i < length; i += 1) {
		      that[i] = array[i] & 255;
		    }
		    return that
		  }

		  function fromArrayBuffer (that, array, byteOffset, length) {
		    array.byteLength; // this throws if `array` is not a valid ArrayBuffer

		    if (byteOffset < 0 || array.byteLength < byteOffset) {
		      throw new RangeError('\'offset\' is out of bounds')
		    }

		    if (array.byteLength < byteOffset + (length || 0)) {
		      throw new RangeError('\'length\' is out of bounds')
		    }

		    if (byteOffset === undefined && length === undefined) {
		      array = new Uint8Array(array);
		    } else if (length === undefined) {
		      array = new Uint8Array(array, byteOffset);
		    } else {
		      array = new Uint8Array(array, byteOffset, length);
		    }

		    if (Buffer.TYPED_ARRAY_SUPPORT) {
		      // Return an augmented `Uint8Array` instance, for best performance
		      that = array;
		      that.__proto__ = Buffer.prototype;
		    } else {
		      // Fallback: Return an object instance of the Buffer class
		      that = fromArrayLike(that, array);
		    }
		    return that
		  }

		  function fromObject (that, obj) {
		    if (internalIsBuffer(obj)) {
		      var len = checked(obj.length) | 0;
		      that = createBuffer(that, len);

		      if (that.length === 0) {
		        return that
		      }

		      obj.copy(that, 0, 0, len);
		      return that
		    }

		    if (obj) {
		      if ((typeof ArrayBuffer !== 'undefined' &&
		          obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
		        if (typeof obj.length !== 'number' || isnan(obj.length)) {
		          return createBuffer(that, 0)
		        }
		        return fromArrayLike(that, obj)
		      }

		      if (obj.type === 'Buffer' && isArray(obj.data)) {
		        return fromArrayLike(that, obj.data)
		      }
		    }

		    throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
		  }

		  function checked (length) {
		    // Note: cannot use `length < kMaxLength()` here because that fails when
		    // length is NaN (which is otherwise coerced to zero.)
		    if (length >= kMaxLength()) {
		      throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
		                           'size: 0x' + kMaxLength().toString(16) + ' bytes')
		    }
		    return length | 0
		  }
		  Buffer.isBuffer = isBuffer;
		  function internalIsBuffer (b) {
		    return !!(b != null && b._isBuffer)
		  }

		  Buffer.compare = function compare (a, b) {
		    if (!internalIsBuffer(a) || !internalIsBuffer(b)) {
		      throw new TypeError('Arguments must be Buffers')
		    }

		    if (a === b) return 0

		    var x = a.length;
		    var y = b.length;

		    for (var i = 0, len = Math.min(x, y); i < len; ++i) {
		      if (a[i] !== b[i]) {
		        x = a[i];
		        y = b[i];
		        break
		      }
		    }

		    if (x < y) return -1
		    if (y < x) return 1
		    return 0
		  };

		  Buffer.isEncoding = function isEncoding (encoding) {
		    switch (String(encoding).toLowerCase()) {
		      case 'hex':
		      case 'utf8':
		      case 'utf-8':
		      case 'ascii':
		      case 'latin1':
		      case 'binary':
		      case 'base64':
		      case 'ucs2':
		      case 'ucs-2':
		      case 'utf16le':
		      case 'utf-16le':
		        return true
		      default:
		        return false
		    }
		  };

		  Buffer.concat = function concat (list, length) {
		    if (!isArray(list)) {
		      throw new TypeError('"list" argument must be an Array of Buffers')
		    }

		    if (list.length === 0) {
		      return Buffer.alloc(0)
		    }

		    var i;
		    if (length === undefined) {
		      length = 0;
		      for (i = 0; i < list.length; ++i) {
		        length += list[i].length;
		      }
		    }

		    var buffer = Buffer.allocUnsafe(length);
		    var pos = 0;
		    for (i = 0; i < list.length; ++i) {
		      var buf = list[i];
		      if (!internalIsBuffer(buf)) {
		        throw new TypeError('"list" argument must be an Array of Buffers')
		      }
		      buf.copy(buffer, pos);
		      pos += buf.length;
		    }
		    return buffer
		  };

		  function byteLength (string, encoding) {
		    if (internalIsBuffer(string)) {
		      return string.length
		    }
		    if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
		        (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
		      return string.byteLength
		    }
		    if (typeof string !== 'string') {
		      string = '' + string;
		    }

		    var len = string.length;
		    if (len === 0) return 0

		    // Use a for loop to avoid recursion
		    var loweredCase = false;
		    for (;;) {
		      switch (encoding) {
		        case 'ascii':
		        case 'latin1':
		        case 'binary':
		          return len
		        case 'utf8':
		        case 'utf-8':
		        case undefined:
		          return utf8ToBytes(string).length
		        case 'ucs2':
		        case 'ucs-2':
		        case 'utf16le':
		        case 'utf-16le':
		          return len * 2
		        case 'hex':
		          return len >>> 1
		        case 'base64':
		          return base64ToBytes(string).length
		        default:
		          if (loweredCase) return utf8ToBytes(string).length // assume utf8
		          encoding = ('' + encoding).toLowerCase();
		          loweredCase = true;
		      }
		    }
		  }
		  Buffer.byteLength = byteLength;

		  function slowToString (encoding, start, end) {
		    var loweredCase = false;

		    // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
		    // property of a typed array.

		    // This behaves neither like String nor Uint8Array in that we set start/end
		    // to their upper/lower bounds if the value passed is out of range.
		    // undefined is handled specially as per ECMA-262 6th Edition,
		    // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
		    if (start === undefined || start < 0) {
		      start = 0;
		    }
		    // Return early if start > this.length. Done here to prevent potential uint32
		    // coercion fail below.
		    if (start > this.length) {
		      return ''
		    }

		    if (end === undefined || end > this.length) {
		      end = this.length;
		    }

		    if (end <= 0) {
		      return ''
		    }

		    // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
		    end >>>= 0;
		    start >>>= 0;

		    if (end <= start) {
		      return ''
		    }

		    if (!encoding) encoding = 'utf8';

		    while (true) {
		      switch (encoding) {
		        case 'hex':
		          return hexSlice(this, start, end)

		        case 'utf8':
		        case 'utf-8':
		          return utf8Slice(this, start, end)

		        case 'ascii':
		          return asciiSlice(this, start, end)

		        case 'latin1':
		        case 'binary':
		          return latin1Slice(this, start, end)

		        case 'base64':
		          return base64Slice(this, start, end)

		        case 'ucs2':
		        case 'ucs-2':
		        case 'utf16le':
		        case 'utf-16le':
		          return utf16leSlice(this, start, end)

		        default:
		          if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
		          encoding = (encoding + '').toLowerCase();
		          loweredCase = true;
		      }
		    }
		  }

		  // The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
		  // Buffer instances.
		  Buffer.prototype._isBuffer = true;

		  function swap (b, n, m) {
		    var i = b[n];
		    b[n] = b[m];
		    b[m] = i;
		  }

		  Buffer.prototype.swap16 = function swap16 () {
		    var len = this.length;
		    if (len % 2 !== 0) {
		      throw new RangeError('Buffer size must be a multiple of 16-bits')
		    }
		    for (var i = 0; i < len; i += 2) {
		      swap(this, i, i + 1);
		    }
		    return this
		  };

		  Buffer.prototype.swap32 = function swap32 () {
		    var len = this.length;
		    if (len % 4 !== 0) {
		      throw new RangeError('Buffer size must be a multiple of 32-bits')
		    }
		    for (var i = 0; i < len; i += 4) {
		      swap(this, i, i + 3);
		      swap(this, i + 1, i + 2);
		    }
		    return this
		  };

		  Buffer.prototype.swap64 = function swap64 () {
		    var len = this.length;
		    if (len % 8 !== 0) {
		      throw new RangeError('Buffer size must be a multiple of 64-bits')
		    }
		    for (var i = 0; i < len; i += 8) {
		      swap(this, i, i + 7);
		      swap(this, i + 1, i + 6);
		      swap(this, i + 2, i + 5);
		      swap(this, i + 3, i + 4);
		    }
		    return this
		  };

		  Buffer.prototype.toString = function toString () {
		    var length = this.length | 0;
		    if (length === 0) return ''
		    if (arguments.length === 0) return utf8Slice(this, 0, length)
		    return slowToString.apply(this, arguments)
		  };

		  Buffer.prototype.equals = function equals (b) {
		    if (!internalIsBuffer(b)) throw new TypeError('Argument must be a Buffer')
		    if (this === b) return true
		    return Buffer.compare(this, b) === 0
		  };

		  Buffer.prototype.inspect = function inspect () {
		    var str = '';
		    var max = INSPECT_MAX_BYTES;
		    if (this.length > 0) {
		      str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');
		      if (this.length > max) str += ' ... ';
		    }
		    return '<Buffer ' + str + '>'
		  };

		  Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
		    if (!internalIsBuffer(target)) {
		      throw new TypeError('Argument must be a Buffer')
		    }

		    if (start === undefined) {
		      start = 0;
		    }
		    if (end === undefined) {
		      end = target ? target.length : 0;
		    }
		    if (thisStart === undefined) {
		      thisStart = 0;
		    }
		    if (thisEnd === undefined) {
		      thisEnd = this.length;
		    }

		    if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
		      throw new RangeError('out of range index')
		    }

		    if (thisStart >= thisEnd && start >= end) {
		      return 0
		    }
		    if (thisStart >= thisEnd) {
		      return -1
		    }
		    if (start >= end) {
		      return 1
		    }

		    start >>>= 0;
		    end >>>= 0;
		    thisStart >>>= 0;
		    thisEnd >>>= 0;

		    if (this === target) return 0

		    var x = thisEnd - thisStart;
		    var y = end - start;
		    var len = Math.min(x, y);

		    var thisCopy = this.slice(thisStart, thisEnd);
		    var targetCopy = target.slice(start, end);

		    for (var i = 0; i < len; ++i) {
		      if (thisCopy[i] !== targetCopy[i]) {
		        x = thisCopy[i];
		        y = targetCopy[i];
		        break
		      }
		    }

		    if (x < y) return -1
		    if (y < x) return 1
		    return 0
		  };

		  // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
		  // OR the last index of `val` in `buffer` at offset <= `byteOffset`.
		  //
		  // Arguments:
		  // - buffer - a Buffer to search
		  // - val - a string, Buffer, or number
		  // - byteOffset - an index into `buffer`; will be clamped to an int32
		  // - encoding - an optional encoding, relevant is val is a string
		  // - dir - true for indexOf, false for lastIndexOf
		  function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
		    // Empty buffer means no match
		    if (buffer.length === 0) return -1

		    // Normalize byteOffset
		    if (typeof byteOffset === 'string') {
		      encoding = byteOffset;
		      byteOffset = 0;
		    } else if (byteOffset > 0x7fffffff) {
		      byteOffset = 0x7fffffff;
		    } else if (byteOffset < -2147483648) {
		      byteOffset = -2147483648;
		    }
		    byteOffset = +byteOffset;  // Coerce to Number.
		    if (isNaN(byteOffset)) {
		      // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
		      byteOffset = dir ? 0 : (buffer.length - 1);
		    }

		    // Normalize byteOffset: negative offsets start from the end of the buffer
		    if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
		    if (byteOffset >= buffer.length) {
		      if (dir) return -1
		      else byteOffset = buffer.length - 1;
		    } else if (byteOffset < 0) {
		      if (dir) byteOffset = 0;
		      else return -1
		    }

		    // Normalize val
		    if (typeof val === 'string') {
		      val = Buffer.from(val, encoding);
		    }

		    // Finally, search either indexOf (if dir is true) or lastIndexOf
		    if (internalIsBuffer(val)) {
		      // Special case: looking for empty string/buffer always fails
		      if (val.length === 0) {
		        return -1
		      }
		      return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
		    } else if (typeof val === 'number') {
		      val = val & 0xFF; // Search for a byte value [0-255]
		      if (Buffer.TYPED_ARRAY_SUPPORT &&
		          typeof Uint8Array.prototype.indexOf === 'function') {
		        if (dir) {
		          return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
		        } else {
		          return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
		        }
		      }
		      return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
		    }

		    throw new TypeError('val must be string, number or Buffer')
		  }

		  function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
		    var indexSize = 1;
		    var arrLength = arr.length;
		    var valLength = val.length;

		    if (encoding !== undefined) {
		      encoding = String(encoding).toLowerCase();
		      if (encoding === 'ucs2' || encoding === 'ucs-2' ||
		          encoding === 'utf16le' || encoding === 'utf-16le') {
		        if (arr.length < 2 || val.length < 2) {
		          return -1
		        }
		        indexSize = 2;
		        arrLength /= 2;
		        valLength /= 2;
		        byteOffset /= 2;
		      }
		    }

		    function read (buf, i) {
		      if (indexSize === 1) {
		        return buf[i]
		      } else {
		        return buf.readUInt16BE(i * indexSize)
		      }
		    }

		    var i;
		    if (dir) {
		      var foundIndex = -1;
		      for (i = byteOffset; i < arrLength; i++) {
		        if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
		          if (foundIndex === -1) foundIndex = i;
		          if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
		        } else {
		          if (foundIndex !== -1) i -= i - foundIndex;
		          foundIndex = -1;
		        }
		      }
		    } else {
		      if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
		      for (i = byteOffset; i >= 0; i--) {
		        var found = true;
		        for (var j = 0; j < valLength; j++) {
		          if (read(arr, i + j) !== read(val, j)) {
		            found = false;
		            break
		          }
		        }
		        if (found) return i
		      }
		    }

		    return -1
		  }

		  Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
		    return this.indexOf(val, byteOffset, encoding) !== -1
		  };

		  Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
		    return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
		  };

		  Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
		    return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
		  };

		  function hexWrite (buf, string, offset, length) {
		    offset = Number(offset) || 0;
		    var remaining = buf.length - offset;
		    if (!length) {
		      length = remaining;
		    } else {
		      length = Number(length);
		      if (length > remaining) {
		        length = remaining;
		      }
		    }

		    // must be an even number of digits
		    var strLen = string.length;
		    if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

		    if (length > strLen / 2) {
		      length = strLen / 2;
		    }
		    for (var i = 0; i < length; ++i) {
		      var parsed = parseInt(string.substr(i * 2, 2), 16);
		      if (isNaN(parsed)) return i
		      buf[offset + i] = parsed;
		    }
		    return i
		  }

		  function utf8Write (buf, string, offset, length) {
		    return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
		  }

		  function asciiWrite (buf, string, offset, length) {
		    return blitBuffer(asciiToBytes(string), buf, offset, length)
		  }

		  function latin1Write (buf, string, offset, length) {
		    return asciiWrite(buf, string, offset, length)
		  }

		  function base64Write (buf, string, offset, length) {
		    return blitBuffer(base64ToBytes(string), buf, offset, length)
		  }

		  function ucs2Write (buf, string, offset, length) {
		    return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
		  }

		  Buffer.prototype.write = function write (string, offset, length, encoding) {
		    // Buffer#write(string)
		    if (offset === undefined) {
		      encoding = 'utf8';
		      length = this.length;
		      offset = 0;
		    // Buffer#write(string, encoding)
		    } else if (length === undefined && typeof offset === 'string') {
		      encoding = offset;
		      length = this.length;
		      offset = 0;
		    // Buffer#write(string, offset[, length][, encoding])
		    } else if (isFinite(offset)) {
		      offset = offset | 0;
		      if (isFinite(length)) {
		        length = length | 0;
		        if (encoding === undefined) encoding = 'utf8';
		      } else {
		        encoding = length;
		        length = undefined;
		      }
		    // legacy write(string, encoding, offset, length) - remove in v0.13
		    } else {
		      throw new Error(
		        'Buffer.write(string, encoding, offset[, length]) is no longer supported'
		      )
		    }

		    var remaining = this.length - offset;
		    if (length === undefined || length > remaining) length = remaining;

		    if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
		      throw new RangeError('Attempt to write outside buffer bounds')
		    }

		    if (!encoding) encoding = 'utf8';

		    var loweredCase = false;
		    for (;;) {
		      switch (encoding) {
		        case 'hex':
		          return hexWrite(this, string, offset, length)

		        case 'utf8':
		        case 'utf-8':
		          return utf8Write(this, string, offset, length)

		        case 'ascii':
		          return asciiWrite(this, string, offset, length)

		        case 'latin1':
		        case 'binary':
		          return latin1Write(this, string, offset, length)

		        case 'base64':
		          // Warning: maxLength not taken into account in base64Write
		          return base64Write(this, string, offset, length)

		        case 'ucs2':
		        case 'ucs-2':
		        case 'utf16le':
		        case 'utf-16le':
		          return ucs2Write(this, string, offset, length)

		        default:
		          if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
		          encoding = ('' + encoding).toLowerCase();
		          loweredCase = true;
		      }
		    }
		  };

		  Buffer.prototype.toJSON = function toJSON () {
		    return {
		      type: 'Buffer',
		      data: Array.prototype.slice.call(this._arr || this, 0)
		    }
		  };

		  function base64Slice (buf, start, end) {
		    if (start === 0 && end === buf.length) {
		      return fromByteArray(buf)
		    } else {
		      return fromByteArray(buf.slice(start, end))
		    }
		  }

		  function utf8Slice (buf, start, end) {
		    end = Math.min(buf.length, end);
		    var res = [];

		    var i = start;
		    while (i < end) {
		      var firstByte = buf[i];
		      var codePoint = null;
		      var bytesPerSequence = (firstByte > 0xEF) ? 4
		        : (firstByte > 0xDF) ? 3
		        : (firstByte > 0xBF) ? 2
		        : 1;

		      if (i + bytesPerSequence <= end) {
		        var secondByte, thirdByte, fourthByte, tempCodePoint;

		        switch (bytesPerSequence) {
		          case 1:
		            if (firstByte < 0x80) {
		              codePoint = firstByte;
		            }
		            break
		          case 2:
		            secondByte = buf[i + 1];
		            if ((secondByte & 0xC0) === 0x80) {
		              tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F);
		              if (tempCodePoint > 0x7F) {
		                codePoint = tempCodePoint;
		              }
		            }
		            break
		          case 3:
		            secondByte = buf[i + 1];
		            thirdByte = buf[i + 2];
		            if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
		              tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F);
		              if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
		                codePoint = tempCodePoint;
		              }
		            }
		            break
		          case 4:
		            secondByte = buf[i + 1];
		            thirdByte = buf[i + 2];
		            fourthByte = buf[i + 3];
		            if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
		              tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F);
		              if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
		                codePoint = tempCodePoint;
		              }
		            }
		        }
		      }

		      if (codePoint === null) {
		        // we did not generate a valid codePoint so insert a
		        // replacement char (U+FFFD) and advance only 1 byte
		        codePoint = 0xFFFD;
		        bytesPerSequence = 1;
		      } else if (codePoint > 0xFFFF) {
		        // encode to utf16 (surrogate pair dance)
		        codePoint -= 0x10000;
		        res.push(codePoint >>> 10 & 0x3FF | 0xD800);
		        codePoint = 0xDC00 | codePoint & 0x3FF;
		      }

		      res.push(codePoint);
		      i += bytesPerSequence;
		    }

		    return decodeCodePointsArray(res)
		  }

		  // Based on http://stackoverflow.com/a/22747272/680742, the browser with
		  // the lowest limit is Chrome, with 0x10000 args.
		  // We go 1 magnitude less, for safety
		  var MAX_ARGUMENTS_LENGTH = 0x1000;

		  function decodeCodePointsArray (codePoints) {
		    var len = codePoints.length;
		    if (len <= MAX_ARGUMENTS_LENGTH) {
		      return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
		    }

		    // Decode in chunks to avoid "call stack size exceeded".
		    var res = '';
		    var i = 0;
		    while (i < len) {
		      res += String.fromCharCode.apply(
		        String,
		        codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
		      );
		    }
		    return res
		  }

		  function asciiSlice (buf, start, end) {
		    var ret = '';
		    end = Math.min(buf.length, end);

		    for (var i = start; i < end; ++i) {
		      ret += String.fromCharCode(buf[i] & 0x7F);
		    }
		    return ret
		  }

		  function latin1Slice (buf, start, end) {
		    var ret = '';
		    end = Math.min(buf.length, end);

		    for (var i = start; i < end; ++i) {
		      ret += String.fromCharCode(buf[i]);
		    }
		    return ret
		  }

		  function hexSlice (buf, start, end) {
		    var len = buf.length;

		    if (!start || start < 0) start = 0;
		    if (!end || end < 0 || end > len) end = len;

		    var out = '';
		    for (var i = start; i < end; ++i) {
		      out += toHex(buf[i]);
		    }
		    return out
		  }

		  function utf16leSlice (buf, start, end) {
		    var bytes = buf.slice(start, end);
		    var res = '';
		    for (var i = 0; i < bytes.length; i += 2) {
		      res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
		    }
		    return res
		  }

		  Buffer.prototype.slice = function slice (start, end) {
		    var len = this.length;
		    start = ~~start;
		    end = end === undefined ? len : ~~end;

		    if (start < 0) {
		      start += len;
		      if (start < 0) start = 0;
		    } else if (start > len) {
		      start = len;
		    }

		    if (end < 0) {
		      end += len;
		      if (end < 0) end = 0;
		    } else if (end > len) {
		      end = len;
		    }

		    if (end < start) end = start;

		    var newBuf;
		    if (Buffer.TYPED_ARRAY_SUPPORT) {
		      newBuf = this.subarray(start, end);
		      newBuf.__proto__ = Buffer.prototype;
		    } else {
		      var sliceLen = end - start;
		      newBuf = new Buffer(sliceLen, undefined);
		      for (var i = 0; i < sliceLen; ++i) {
		        newBuf[i] = this[i + start];
		      }
		    }

		    return newBuf
		  };

		  /*
		   * Need to make sure that buffer isn't trying to write out of bounds.
		   */
		  function checkOffset (offset, ext, length) {
		    if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
		    if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
		  }

		  Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
		    offset = offset | 0;
		    byteLength = byteLength | 0;
		    if (!noAssert) checkOffset(offset, byteLength, this.length);

		    var val = this[offset];
		    var mul = 1;
		    var i = 0;
		    while (++i < byteLength && (mul *= 0x100)) {
		      val += this[offset + i] * mul;
		    }

		    return val
		  };

		  Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
		    offset = offset | 0;
		    byteLength = byteLength | 0;
		    if (!noAssert) {
		      checkOffset(offset, byteLength, this.length);
		    }

		    var val = this[offset + --byteLength];
		    var mul = 1;
		    while (byteLength > 0 && (mul *= 0x100)) {
		      val += this[offset + --byteLength] * mul;
		    }

		    return val
		  };

		  Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
		    if (!noAssert) checkOffset(offset, 1, this.length);
		    return this[offset]
		  };

		  Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
		    if (!noAssert) checkOffset(offset, 2, this.length);
		    return this[offset] | (this[offset + 1] << 8)
		  };

		  Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
		    if (!noAssert) checkOffset(offset, 2, this.length);
		    return (this[offset] << 8) | this[offset + 1]
		  };

		  Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
		    if (!noAssert) checkOffset(offset, 4, this.length);

		    return ((this[offset]) |
		        (this[offset + 1] << 8) |
		        (this[offset + 2] << 16)) +
		        (this[offset + 3] * 0x1000000)
		  };

		  Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
		    if (!noAssert) checkOffset(offset, 4, this.length);

		    return (this[offset] * 0x1000000) +
		      ((this[offset + 1] << 16) |
		      (this[offset + 2] << 8) |
		      this[offset + 3])
		  };

		  Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
		    offset = offset | 0;
		    byteLength = byteLength | 0;
		    if (!noAssert) checkOffset(offset, byteLength, this.length);

		    var val = this[offset];
		    var mul = 1;
		    var i = 0;
		    while (++i < byteLength && (mul *= 0x100)) {
		      val += this[offset + i] * mul;
		    }
		    mul *= 0x80;

		    if (val >= mul) val -= Math.pow(2, 8 * byteLength);

		    return val
		  };

		  Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
		    offset = offset | 0;
		    byteLength = byteLength | 0;
		    if (!noAssert) checkOffset(offset, byteLength, this.length);

		    var i = byteLength;
		    var mul = 1;
		    var val = this[offset + --i];
		    while (i > 0 && (mul *= 0x100)) {
		      val += this[offset + --i] * mul;
		    }
		    mul *= 0x80;

		    if (val >= mul) val -= Math.pow(2, 8 * byteLength);

		    return val
		  };

		  Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
		    if (!noAssert) checkOffset(offset, 1, this.length);
		    if (!(this[offset] & 0x80)) return (this[offset])
		    return ((0xff - this[offset] + 1) * -1)
		  };

		  Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
		    if (!noAssert) checkOffset(offset, 2, this.length);
		    var val = this[offset] | (this[offset + 1] << 8);
		    return (val & 0x8000) ? val | 0xFFFF0000 : val
		  };

		  Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
		    if (!noAssert) checkOffset(offset, 2, this.length);
		    var val = this[offset + 1] | (this[offset] << 8);
		    return (val & 0x8000) ? val | 0xFFFF0000 : val
		  };

		  Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
		    if (!noAssert) checkOffset(offset, 4, this.length);

		    return (this[offset]) |
		      (this[offset + 1] << 8) |
		      (this[offset + 2] << 16) |
		      (this[offset + 3] << 24)
		  };

		  Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
		    if (!noAssert) checkOffset(offset, 4, this.length);

		    return (this[offset] << 24) |
		      (this[offset + 1] << 16) |
		      (this[offset + 2] << 8) |
		      (this[offset + 3])
		  };

		  Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
		    if (!noAssert) checkOffset(offset, 4, this.length);
		    return read(this, offset, true, 23, 4)
		  };

		  Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
		    if (!noAssert) checkOffset(offset, 4, this.length);
		    return read(this, offset, false, 23, 4)
		  };

		  Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
		    if (!noAssert) checkOffset(offset, 8, this.length);
		    return read(this, offset, true, 52, 8)
		  };

		  Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
		    if (!noAssert) checkOffset(offset, 8, this.length);
		    return read(this, offset, false, 52, 8)
		  };

		  function checkInt (buf, value, offset, ext, max, min) {
		    if (!internalIsBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
		    if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
		    if (offset + ext > buf.length) throw new RangeError('Index out of range')
		  }

		  Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
		    value = +value;
		    offset = offset | 0;
		    byteLength = byteLength | 0;
		    if (!noAssert) {
		      var maxBytes = Math.pow(2, 8 * byteLength) - 1;
		      checkInt(this, value, offset, byteLength, maxBytes, 0);
		    }

		    var mul = 1;
		    var i = 0;
		    this[offset] = value & 0xFF;
		    while (++i < byteLength && (mul *= 0x100)) {
		      this[offset + i] = (value / mul) & 0xFF;
		    }

		    return offset + byteLength
		  };

		  Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
		    value = +value;
		    offset = offset | 0;
		    byteLength = byteLength | 0;
		    if (!noAssert) {
		      var maxBytes = Math.pow(2, 8 * byteLength) - 1;
		      checkInt(this, value, offset, byteLength, maxBytes, 0);
		    }

		    var i = byteLength - 1;
		    var mul = 1;
		    this[offset + i] = value & 0xFF;
		    while (--i >= 0 && (mul *= 0x100)) {
		      this[offset + i] = (value / mul) & 0xFF;
		    }

		    return offset + byteLength
		  };

		  Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
		    value = +value;
		    offset = offset | 0;
		    if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
		    if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
		    this[offset] = (value & 0xff);
		    return offset + 1
		  };

		  function objectWriteUInt16 (buf, value, offset, littleEndian) {
		    if (value < 0) value = 0xffff + value + 1;
		    for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
		      buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
		        (littleEndian ? i : 1 - i) * 8;
		    }
		  }

		  Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
		    value = +value;
		    offset = offset | 0;
		    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
		    if (Buffer.TYPED_ARRAY_SUPPORT) {
		      this[offset] = (value & 0xff);
		      this[offset + 1] = (value >>> 8);
		    } else {
		      objectWriteUInt16(this, value, offset, true);
		    }
		    return offset + 2
		  };

		  Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
		    value = +value;
		    offset = offset | 0;
		    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
		    if (Buffer.TYPED_ARRAY_SUPPORT) {
		      this[offset] = (value >>> 8);
		      this[offset + 1] = (value & 0xff);
		    } else {
		      objectWriteUInt16(this, value, offset, false);
		    }
		    return offset + 2
		  };

		  function objectWriteUInt32 (buf, value, offset, littleEndian) {
		    if (value < 0) value = 0xffffffff + value + 1;
		    for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
		      buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff;
		    }
		  }

		  Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
		    value = +value;
		    offset = offset | 0;
		    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
		    if (Buffer.TYPED_ARRAY_SUPPORT) {
		      this[offset + 3] = (value >>> 24);
		      this[offset + 2] = (value >>> 16);
		      this[offset + 1] = (value >>> 8);
		      this[offset] = (value & 0xff);
		    } else {
		      objectWriteUInt32(this, value, offset, true);
		    }
		    return offset + 4
		  };

		  Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
		    value = +value;
		    offset = offset | 0;
		    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
		    if (Buffer.TYPED_ARRAY_SUPPORT) {
		      this[offset] = (value >>> 24);
		      this[offset + 1] = (value >>> 16);
		      this[offset + 2] = (value >>> 8);
		      this[offset + 3] = (value & 0xff);
		    } else {
		      objectWriteUInt32(this, value, offset, false);
		    }
		    return offset + 4
		  };

		  Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
		    value = +value;
		    offset = offset | 0;
		    if (!noAssert) {
		      var limit = Math.pow(2, 8 * byteLength - 1);

		      checkInt(this, value, offset, byteLength, limit - 1, -limit);
		    }

		    var i = 0;
		    var mul = 1;
		    var sub = 0;
		    this[offset] = value & 0xFF;
		    while (++i < byteLength && (mul *= 0x100)) {
		      if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
		        sub = 1;
		      }
		      this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
		    }

		    return offset + byteLength
		  };

		  Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
		    value = +value;
		    offset = offset | 0;
		    if (!noAssert) {
		      var limit = Math.pow(2, 8 * byteLength - 1);

		      checkInt(this, value, offset, byteLength, limit - 1, -limit);
		    }

		    var i = byteLength - 1;
		    var mul = 1;
		    var sub = 0;
		    this[offset + i] = value & 0xFF;
		    while (--i >= 0 && (mul *= 0x100)) {
		      if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
		        sub = 1;
		      }
		      this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
		    }

		    return offset + byteLength
		  };

		  Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
		    value = +value;
		    offset = offset | 0;
		    if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -128);
		    if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
		    if (value < 0) value = 0xff + value + 1;
		    this[offset] = (value & 0xff);
		    return offset + 1
		  };

		  Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
		    value = +value;
		    offset = offset | 0;
		    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -32768);
		    if (Buffer.TYPED_ARRAY_SUPPORT) {
		      this[offset] = (value & 0xff);
		      this[offset + 1] = (value >>> 8);
		    } else {
		      objectWriteUInt16(this, value, offset, true);
		    }
		    return offset + 2
		  };

		  Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
		    value = +value;
		    offset = offset | 0;
		    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -32768);
		    if (Buffer.TYPED_ARRAY_SUPPORT) {
		      this[offset] = (value >>> 8);
		      this[offset + 1] = (value & 0xff);
		    } else {
		      objectWriteUInt16(this, value, offset, false);
		    }
		    return offset + 2
		  };

		  Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
		    value = +value;
		    offset = offset | 0;
		    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -2147483648);
		    if (Buffer.TYPED_ARRAY_SUPPORT) {
		      this[offset] = (value & 0xff);
		      this[offset + 1] = (value >>> 8);
		      this[offset + 2] = (value >>> 16);
		      this[offset + 3] = (value >>> 24);
		    } else {
		      objectWriteUInt32(this, value, offset, true);
		    }
		    return offset + 4
		  };

		  Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
		    value = +value;
		    offset = offset | 0;
		    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -2147483648);
		    if (value < 0) value = 0xffffffff + value + 1;
		    if (Buffer.TYPED_ARRAY_SUPPORT) {
		      this[offset] = (value >>> 24);
		      this[offset + 1] = (value >>> 16);
		      this[offset + 2] = (value >>> 8);
		      this[offset + 3] = (value & 0xff);
		    } else {
		      objectWriteUInt32(this, value, offset, false);
		    }
		    return offset + 4
		  };

		  function checkIEEE754 (buf, value, offset, ext, max, min) {
		    if (offset + ext > buf.length) throw new RangeError('Index out of range')
		    if (offset < 0) throw new RangeError('Index out of range')
		  }

		  function writeFloat (buf, value, offset, littleEndian, noAssert) {
		    if (!noAssert) {
		      checkIEEE754(buf, value, offset, 4);
		    }
		    write(buf, value, offset, littleEndian, 23, 4);
		    return offset + 4
		  }

		  Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
		    return writeFloat(this, value, offset, true, noAssert)
		  };

		  Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
		    return writeFloat(this, value, offset, false, noAssert)
		  };

		  function writeDouble (buf, value, offset, littleEndian, noAssert) {
		    if (!noAssert) {
		      checkIEEE754(buf, value, offset, 8);
		    }
		    write(buf, value, offset, littleEndian, 52, 8);
		    return offset + 8
		  }

		  Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
		    return writeDouble(this, value, offset, true, noAssert)
		  };

		  Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
		    return writeDouble(this, value, offset, false, noAssert)
		  };

		  // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
		  Buffer.prototype.copy = function copy (target, targetStart, start, end) {
		    if (!start) start = 0;
		    if (!end && end !== 0) end = this.length;
		    if (targetStart >= target.length) targetStart = target.length;
		    if (!targetStart) targetStart = 0;
		    if (end > 0 && end < start) end = start;

		    // Copy 0 bytes; we're done
		    if (end === start) return 0
		    if (target.length === 0 || this.length === 0) return 0

		    // Fatal error conditions
		    if (targetStart < 0) {
		      throw new RangeError('targetStart out of bounds')
		    }
		    if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
		    if (end < 0) throw new RangeError('sourceEnd out of bounds')

		    // Are we oob?
		    if (end > this.length) end = this.length;
		    if (target.length - targetStart < end - start) {
		      end = target.length - targetStart + start;
		    }

		    var len = end - start;
		    var i;

		    if (this === target && start < targetStart && targetStart < end) {
		      // descending copy from end
		      for (i = len - 1; i >= 0; --i) {
		        target[i + targetStart] = this[i + start];
		      }
		    } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
		      // ascending copy from start
		      for (i = 0; i < len; ++i) {
		        target[i + targetStart] = this[i + start];
		      }
		    } else {
		      Uint8Array.prototype.set.call(
		        target,
		        this.subarray(start, start + len),
		        targetStart
		      );
		    }

		    return len
		  };

		  // Usage:
		  //    buffer.fill(number[, offset[, end]])
		  //    buffer.fill(buffer[, offset[, end]])
		  //    buffer.fill(string[, offset[, end]][, encoding])
		  Buffer.prototype.fill = function fill (val, start, end, encoding) {
		    // Handle string cases:
		    if (typeof val === 'string') {
		      if (typeof start === 'string') {
		        encoding = start;
		        start = 0;
		        end = this.length;
		      } else if (typeof end === 'string') {
		        encoding = end;
		        end = this.length;
		      }
		      if (val.length === 1) {
		        var code = val.charCodeAt(0);
		        if (code < 256) {
		          val = code;
		        }
		      }
		      if (encoding !== undefined && typeof encoding !== 'string') {
		        throw new TypeError('encoding must be a string')
		      }
		      if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
		        throw new TypeError('Unknown encoding: ' + encoding)
		      }
		    } else if (typeof val === 'number') {
		      val = val & 255;
		    }

		    // Invalid ranges are not set to a default, so can range check early.
		    if (start < 0 || this.length < start || this.length < end) {
		      throw new RangeError('Out of range index')
		    }

		    if (end <= start) {
		      return this
		    }

		    start = start >>> 0;
		    end = end === undefined ? this.length : end >>> 0;

		    if (!val) val = 0;

		    var i;
		    if (typeof val === 'number') {
		      for (i = start; i < end; ++i) {
		        this[i] = val;
		      }
		    } else {
		      var bytes = internalIsBuffer(val)
		        ? val
		        : utf8ToBytes(new Buffer(val, encoding).toString());
		      var len = bytes.length;
		      for (i = 0; i < end - start; ++i) {
		        this[i + start] = bytes[i % len];
		      }
		    }

		    return this
		  };

		  // HELPER FUNCTIONS
		  // ================

		  var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;

		  function base64clean (str) {
		    // Node strips out invalid characters like \n and \t from the string, base64-js does not
		    str = stringtrim(str).replace(INVALID_BASE64_RE, '');
		    // Node converts strings with length < 2 to ''
		    if (str.length < 2) return ''
		    // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
		    while (str.length % 4 !== 0) {
		      str = str + '=';
		    }
		    return str
		  }

		  function stringtrim (str) {
		    if (str.trim) return str.trim()
		    return str.replace(/^\s+|\s+$/g, '')
		  }

		  function toHex (n) {
		    if (n < 16) return '0' + n.toString(16)
		    return n.toString(16)
		  }

		  function utf8ToBytes (string, units) {
		    units = units || Infinity;
		    var codePoint;
		    var length = string.length;
		    var leadSurrogate = null;
		    var bytes = [];

		    for (var i = 0; i < length; ++i) {
		      codePoint = string.charCodeAt(i);

		      // is surrogate component
		      if (codePoint > 0xD7FF && codePoint < 0xE000) {
		        // last char was a lead
		        if (!leadSurrogate) {
		          // no lead yet
		          if (codePoint > 0xDBFF) {
		            // unexpected trail
		            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
		            continue
		          } else if (i + 1 === length) {
		            // unpaired lead
		            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
		            continue
		          }

		          // valid lead
		          leadSurrogate = codePoint;

		          continue
		        }

		        // 2 leads in a row
		        if (codePoint < 0xDC00) {
		          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
		          leadSurrogate = codePoint;
		          continue
		        }

		        // valid surrogate pair
		        codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
		      } else if (leadSurrogate) {
		        // valid bmp char, but last char was a lead
		        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
		      }

		      leadSurrogate = null;

		      // encode utf8
		      if (codePoint < 0x80) {
		        if ((units -= 1) < 0) break
		        bytes.push(codePoint);
		      } else if (codePoint < 0x800) {
		        if ((units -= 2) < 0) break
		        bytes.push(
		          codePoint >> 0x6 | 0xC0,
		          codePoint & 0x3F | 0x80
		        );
		      } else if (codePoint < 0x10000) {
		        if ((units -= 3) < 0) break
		        bytes.push(
		          codePoint >> 0xC | 0xE0,
		          codePoint >> 0x6 & 0x3F | 0x80,
		          codePoint & 0x3F | 0x80
		        );
		      } else if (codePoint < 0x110000) {
		        if ((units -= 4) < 0) break
		        bytes.push(
		          codePoint >> 0x12 | 0xF0,
		          codePoint >> 0xC & 0x3F | 0x80,
		          codePoint >> 0x6 & 0x3F | 0x80,
		          codePoint & 0x3F | 0x80
		        );
		      } else {
		        throw new Error('Invalid code point')
		      }
		    }

		    return bytes
		  }

		  function asciiToBytes (str) {
		    var byteArray = [];
		    for (var i = 0; i < str.length; ++i) {
		      // Node's code seems to be doing this and not & 0x7F..
		      byteArray.push(str.charCodeAt(i) & 0xFF);
		    }
		    return byteArray
		  }

		  function utf16leToBytes (str, units) {
		    var c, hi, lo;
		    var byteArray = [];
		    for (var i = 0; i < str.length; ++i) {
		      if ((units -= 2) < 0) break

		      c = str.charCodeAt(i);
		      hi = c >> 8;
		      lo = c % 256;
		      byteArray.push(lo);
		      byteArray.push(hi);
		    }

		    return byteArray
		  }


		  function base64ToBytes (str) {
		    return toByteArray(base64clean(str))
		  }

		  function blitBuffer (src, dst, offset, length) {
		    for (var i = 0; i < length; ++i) {
		      if ((i + offset >= dst.length) || (i >= src.length)) break
		      dst[i + offset] = src[i];
		    }
		    return i
		  }

		  function isnan (val) {
		    return val !== val // eslint-disable-line no-self-compare
		  }


		  // the following is from is-buffer, also by Feross Aboukhadijeh and with same lisence
		  // The _isBuffer check is for Safari 5-7 support, because it's missing
		  // Object.prototype.constructor. Remove this eventually
		  function isBuffer(obj) {
		    return obj != null && (!!obj._isBuffer || isFastBuffer(obj) || isSlowBuffer(obj))
		  }

		  function isFastBuffer (obj) {
		    return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
		  }

		  // For Node v0.10 support. Remove this eventually.
		  function isSlowBuffer (obj) {
		    return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isFastBuffer(obj.slice(0, 0))
		  }

		  var browser$2 = true;

		  var utils$3 = {};

		  var he = {exports: {}};

		  /*! https://mths.be/he v1.2.0 by @mathias | MIT license */

		  (function (module, exports) {
		  (function(root) {

		  	// Detect free variables `exports`.
		  	var freeExports = exports;

		  	// Detect free variable `module`.
		  	var freeModule = module &&
		  		module.exports == freeExports && module;

		  	// Detect free variable `global`, from Node.js or Browserified code,
		  	// and use it as `root`.
		  	var freeGlobal = typeof commonjsGlobal$1 == 'object' && commonjsGlobal$1;
		  	if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {
		  		root = freeGlobal;
		  	}

		  	/*--------------------------------------------------------------------------*/

		  	// All astral symbols.
		  	var regexAstralSymbols = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;
		  	// All ASCII symbols (not just printable ASCII) except those listed in the
		  	// first column of the overrides table.
		  	// https://html.spec.whatwg.org/multipage/syntax.html#table-charref-overrides
		  	var regexAsciiWhitelist = /[\x01-\x7F]/g;
		  	// All BMP symbols that are not ASCII newlines, printable ASCII symbols, or
		  	// code points listed in the first column of the overrides table on
		  	// https://html.spec.whatwg.org/multipage/syntax.html#table-charref-overrides.
		  	var regexBmpWhitelist = /[\x01-\t\x0B\f\x0E-\x1F\x7F\x81\x8D\x8F\x90\x9D\xA0-\uFFFF]/g;

		  	var regexEncodeNonAscii = /<\u20D2|=\u20E5|>\u20D2|\u205F\u200A|\u219D\u0338|\u2202\u0338|\u2220\u20D2|\u2229\uFE00|\u222A\uFE00|\u223C\u20D2|\u223D\u0331|\u223E\u0333|\u2242\u0338|\u224B\u0338|\u224D\u20D2|\u224E\u0338|\u224F\u0338|\u2250\u0338|\u2261\u20E5|\u2264\u20D2|\u2265\u20D2|\u2266\u0338|\u2267\u0338|\u2268\uFE00|\u2269\uFE00|\u226A\u0338|\u226A\u20D2|\u226B\u0338|\u226B\u20D2|\u227F\u0338|\u2282\u20D2|\u2283\u20D2|\u228A\uFE00|\u228B\uFE00|\u228F\u0338|\u2290\u0338|\u2293\uFE00|\u2294\uFE00|\u22B4\u20D2|\u22B5\u20D2|\u22D8\u0338|\u22D9\u0338|\u22DA\uFE00|\u22DB\uFE00|\u22F5\u0338|\u22F9\u0338|\u2933\u0338|\u29CF\u0338|\u29D0\u0338|\u2A6D\u0338|\u2A70\u0338|\u2A7D\u0338|\u2A7E\u0338|\u2AA1\u0338|\u2AA2\u0338|\u2AAC\uFE00|\u2AAD\uFE00|\u2AAF\u0338|\u2AB0\u0338|\u2AC5\u0338|\u2AC6\u0338|\u2ACB\uFE00|\u2ACC\uFE00|\u2AFD\u20E5|[\xA0-\u0113\u0116-\u0122\u0124-\u012B\u012E-\u014D\u0150-\u017E\u0192\u01B5\u01F5\u0237\u02C6\u02C7\u02D8-\u02DD\u0311\u0391-\u03A1\u03A3-\u03A9\u03B1-\u03C9\u03D1\u03D2\u03D5\u03D6\u03DC\u03DD\u03F0\u03F1\u03F5\u03F6\u0401-\u040C\u040E-\u044F\u0451-\u045C\u045E\u045F\u2002-\u2005\u2007-\u2010\u2013-\u2016\u2018-\u201A\u201C-\u201E\u2020-\u2022\u2025\u2026\u2030-\u2035\u2039\u203A\u203E\u2041\u2043\u2044\u204F\u2057\u205F-\u2063\u20AC\u20DB\u20DC\u2102\u2105\u210A-\u2113\u2115-\u211E\u2122\u2124\u2127-\u2129\u212C\u212D\u212F-\u2131\u2133-\u2138\u2145-\u2148\u2153-\u215E\u2190-\u219B\u219D-\u21A7\u21A9-\u21AE\u21B0-\u21B3\u21B5-\u21B7\u21BA-\u21DB\u21DD\u21E4\u21E5\u21F5\u21FD-\u2205\u2207-\u2209\u220B\u220C\u220F-\u2214\u2216-\u2218\u221A\u221D-\u2238\u223A-\u2257\u2259\u225A\u225C\u225F-\u2262\u2264-\u228B\u228D-\u229B\u229D-\u22A5\u22A7-\u22B0\u22B2-\u22BB\u22BD-\u22DB\u22DE-\u22E3\u22E6-\u22F7\u22F9-\u22FE\u2305\u2306\u2308-\u2310\u2312\u2313\u2315\u2316\u231C-\u231F\u2322\u2323\u232D\u232E\u2336\u233D\u233F\u237C\u23B0\u23B1\u23B4-\u23B6\u23DC-\u23DF\u23E2\u23E7\u2423\u24C8\u2500\u2502\u250C\u2510\u2514\u2518\u251C\u2524\u252C\u2534\u253C\u2550-\u256C\u2580\u2584\u2588\u2591-\u2593\u25A1\u25AA\u25AB\u25AD\u25AE\u25B1\u25B3-\u25B5\u25B8\u25B9\u25BD-\u25BF\u25C2\u25C3\u25CA\u25CB\u25EC\u25EF\u25F8-\u25FC\u2605\u2606\u260E\u2640\u2642\u2660\u2663\u2665\u2666\u266A\u266D-\u266F\u2713\u2717\u2720\u2736\u2758\u2772\u2773\u27C8\u27C9\u27E6-\u27ED\u27F5-\u27FA\u27FC\u27FF\u2902-\u2905\u290C-\u2913\u2916\u2919-\u2920\u2923-\u292A\u2933\u2935-\u2939\u293C\u293D\u2945\u2948-\u294B\u294E-\u2976\u2978\u2979\u297B-\u297F\u2985\u2986\u298B-\u2996\u299A\u299C\u299D\u29A4-\u29B7\u29B9\u29BB\u29BC\u29BE-\u29C5\u29C9\u29CD-\u29D0\u29DC-\u29DE\u29E3-\u29E5\u29EB\u29F4\u29F6\u2A00-\u2A02\u2A04\u2A06\u2A0C\u2A0D\u2A10-\u2A17\u2A22-\u2A27\u2A29\u2A2A\u2A2D-\u2A31\u2A33-\u2A3C\u2A3F\u2A40\u2A42-\u2A4D\u2A50\u2A53-\u2A58\u2A5A-\u2A5D\u2A5F\u2A66\u2A6A\u2A6D-\u2A75\u2A77-\u2A9A\u2A9D-\u2AA2\u2AA4-\u2AB0\u2AB3-\u2AC8\u2ACB\u2ACC\u2ACF-\u2ADB\u2AE4\u2AE6-\u2AE9\u2AEB-\u2AF3\u2AFD\uFB00-\uFB04]|\uD835[\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDCCF\uDD04\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDD6B]/g;
		  	var encodeMap = {'\xAD':'shy','\u200C':'zwnj','\u200D':'zwj','\u200E':'lrm','\u2063':'ic','\u2062':'it','\u2061':'af','\u200F':'rlm','\u200B':'ZeroWidthSpace','\u2060':'NoBreak','\u0311':'DownBreve','\u20DB':'tdot','\u20DC':'DotDot','\t':'Tab','\n':'NewLine','\u2008':'puncsp','\u205F':'MediumSpace','\u2009':'thinsp','\u200A':'hairsp','\u2004':'emsp13','\u2002':'ensp','\u2005':'emsp14','\u2003':'emsp','\u2007':'numsp','\xA0':'nbsp','\u205F\u200A':'ThickSpace','\u203E':'oline','_':'lowbar','\u2010':'dash','\u2013':'ndash','\u2014':'mdash','\u2015':'horbar',',':'comma',';':'semi','\u204F':'bsemi',':':'colon','\u2A74':'Colone','!':'excl','\xA1':'iexcl','?':'quest','\xBF':'iquest','.':'period','\u2025':'nldr','\u2026':'mldr','\xB7':'middot','\'':'apos','\u2018':'lsquo','\u2019':'rsquo','\u201A':'sbquo','\u2039':'lsaquo','\u203A':'rsaquo','"':'quot','\u201C':'ldquo','\u201D':'rdquo','\u201E':'bdquo','\xAB':'laquo','\xBB':'